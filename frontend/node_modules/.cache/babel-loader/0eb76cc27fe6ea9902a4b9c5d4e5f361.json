{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/Site Node-Type-React/frontend/src/shared/forms/VPatternFormat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { TextField } from '@mui/material';\nimport { PatternFormat } from 'react-number-format';\nimport { useField } from '@unform/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * - Para resgatar o valor numérico no correto use o `onValueChange`\n * - Para eventos normais use o `onChange`\n *\n * Para como customizar a formatação verifique a documentação original do `react-number-format` [nesse link](https://www.npmjs.com/package/react-number-format) ou [nesse link](https://s-yadav.github.io/react-number-format/docs/intro/)\n */\nexport const VPatternFormat = _ref => {\n  _s();\n\n  let {\n    name,\n    onValueChange,\n    ...rest\n  } = _ref;\n  const {\n    fieldName,\n    defaultValue,\n    registerField,\n    error\n  } = useField(name);\n  const [value, setValue] = useState(defaultValue);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, value) => setValue(value)\n    });\n  }, [fieldName, value, registerField]);\n\n  const handleChange = value => {\n    setValue(value);\n    onValueChange && onValueChange(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PatternFormat, { ...rest,\n    customInput: TextField,\n    value: value,\n    error: !!error,\n    helperText: error,\n    onValueChange: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return handleChange(value);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VPatternFormat, \"oTMHenzG5cncaBG+hRgPM6Y2zDE=\", false, function () {\n  return [useField];\n});\n\n_c = VPatternFormat;\n\nvar _c;\n\n$RefreshReg$(_c, \"VPatternFormat\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Site Node-Type-React/frontend/src/shared/forms/VPatternFormat.tsx"],"names":["React","useEffect","useState","TextField","PatternFormat","useField","VPatternFormat","name","onValueChange","rest","fieldName","defaultValue","registerField","error","value","setValue","getValue","_","handleChange"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0C,eAA1C;AACA,SAA6BC,aAA7B,QAAkD,qBAAlD;AACA,SAASC,QAAT,QAAyB,cAAzB;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAA0C,GAAG,QAAsC;AAAA;;AAAA,MAArC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuB,OAAGC;AAA1B,GAAqC;AAC9F,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,MAAoDR,QAAQ,CAACE,IAAD,CAAlE;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAASS,YAAT,CAAlC;AAGAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,aAAa,CAAC;AACZL,MAAAA,IAAI,EAAEG,SADM;AAEZM,MAAAA,QAAQ,EAAE,MAAMF,KAFJ;AAGZC,MAAAA,QAAQ,EAAE,CAACE,CAAD,EAAIH,KAAJ,KAAcC,QAAQ,CAACD,KAAD;AAHpB,KAAD,CAAb;AAKD,GANQ,EAMN,CAACJ,SAAD,EAAYI,KAAZ,EAAmBF,aAAnB,CANM,CAAT;;AASA,QAAMM,YAAY,GAAIJ,KAAD,IAAmB;AACtCC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAN,IAAAA,aAAa,IAAIA,aAAa,CAACM,KAAD,CAA9B;AACD,GAHD;;AAMA,sBACE,QAAC,aAAD,OACML,IADN;AAGE,IAAA,WAAW,EAAEN,SAHf;AAIE,IAAA,KAAK,EAAEW,KAJT;AAKE,IAAA,KAAK,EAAE,CAAC,CAACD,KALX;AAME,IAAA,UAAU,EAAEA,KANd;AAOE,IAAA,aAAa,EAAE;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAeI,YAAY,CAACJ,KAAD,CAA3B;AAAA;AAPjB;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/BM;;GAAMR,c;UAC+CD,Q;;;KAD/CC,c","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TextField, TextFieldProps } from '@mui/material';\nimport { PatternFormatProps, PatternFormat } from 'react-number-format';\nimport { useField } from '@unform/core';\n\n\ntype TVTextFieldProps = Omit<PatternFormatProps, 'value'> & Omit<TextFieldProps, 'value'> & {\n  name: string;\n\n  onValueChange?: (value: string) => void;\n}\n/**\n * - Para resgatar o valor numérico no correto use o `onValueChange`\n * - Para eventos normais use o `onChange`\n *\n * Para como customizar a formatação verifique a documentação original do `react-number-format` [nesse link](https://www.npmjs.com/package/react-number-format) ou [nesse link](https://s-yadav.github.io/react-number-format/docs/intro/)\n */\nexport const VPatternFormat: React.FC<TVTextFieldProps> = ({ name, onValueChange, ...rest }) => {\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n  const [value, setValue] = useState<string>(defaultValue);\n\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, value) => setValue(value),\n    });\n  }, [fieldName, value, registerField]);\n\n\n  const handleChange = (value: string) => {\n    setValue(value);\n    onValueChange && onValueChange(value);\n  };\n\n\n  return (\n    <PatternFormat\n      {...rest as any}\n\n      customInput={TextField}\n      value={value}\n      error={!!error}\n      helperText={error}\n      onValueChange={({ value }) => handleChange(value)}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}