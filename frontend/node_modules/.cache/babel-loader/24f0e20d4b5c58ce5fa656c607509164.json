{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { renderTimeViewClock } from '../timeViewRenderers';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useStaticPicker } from '../internals/hooks/useStaticPicker';\nimport { validateTime } from '../internals/utils/validation/validateTime';\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://mui.com/x/api/date-pickers/static-time-picker/)\n */\n\nvar StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  var _defaultizedProps$dis, _defaultizedProps$amp, _defaultizedProps$slo;\n\n  var defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n  var displayStaticWrapperAs = (_defaultizedProps$dis = defaultizedProps.displayStaticWrapperAs) != null ? _defaultizedProps$dis : 'mobile';\n  var ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : displayStaticWrapperAs === 'desktop';\n\n  var viewRenderers = _extends({\n    hours: renderTimeViewClock,\n    minutes: renderTimeViewClock,\n    seconds: renderTimeViewClock\n  }, defaultizedProps.viewRenderers); // Props with the default values specific to the static variant\n\n\n  var props = _extends({}, defaultizedProps, {\n    viewRenderers: viewRenderers,\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    ampmInClock: ampmInClock,\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      toolbar: _extends({\n        hidden: displayStaticWrapperAs === 'desktop',\n        ampmInClock: ampmInClock\n      }, (_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.toolbar)\n    })\n  });\n\n  var _useStaticPicker = useStaticPicker({\n    props: props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    validator: validateTime,\n    ref: ref\n  }),\n      renderPicker = _useStaticPicker.renderPicker;\n\n  return renderPicker();\n});\nStaticTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default \"mobile\"\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when component requests to be closed.\n   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.\n   * @deprecated Please avoid using as it will be removed in next major version.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { StaticTimePicker };","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/StaticTimePicker/StaticTimePicker.js"],"names":["_extends","React","PropTypes","useTimePickerDefaultizedProps","renderTimeViewClock","singleItemValueManager","useStaticPicker","validateTime","StaticTimePicker","forwardRef","inProps","ref","_defaultizedProps$dis","_defaultizedProps$amp","_defaultizedProps$slo","defaultizedProps","displayStaticWrapperAs","ampmInClock","viewRenderers","hours","minutes","seconds","props","slotProps","toolbar","hidden","valueManager","valueType","validator","renderPicker","propTypes","ampm","bool","autoFocus","className","string","components","object","componentsProps","defaultValue","any","disabled","disableFuture","disableIgnoringDatePartForTimeValidation","disablePast","oneOf","localeText","maxTime","minTime","minutesStep","number","onAccept","func","onChange","onClose","onError","onViewChange","openTo","orientation","readOnly","reduceAnimations","referenceDate","shouldDisableClock","shouldDisableTime","slots","sx","oneOfType","arrayOf","timezone","value","view","shape","views","isRequired"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { renderTimeViewClock } from '../timeViewRenderers';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useStaticPicker } from '../internals/hooks/useStaticPicker';\nimport { validateTime } from '../internals/utils/validation/validateTime';\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://mui.com/x/api/date-pickers/static-time-picker/)\n */\nconst StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  var _defaultizedProps$dis, _defaultizedProps$amp, _defaultizedProps$slo;\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n  const displayStaticWrapperAs = (_defaultizedProps$dis = defaultizedProps.displayStaticWrapperAs) != null ? _defaultizedProps$dis : 'mobile';\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : displayStaticWrapperAs === 'desktop';\n  const viewRenderers = _extends({\n    hours: renderTimeViewClock,\n    minutes: renderTimeViewClock,\n    seconds: renderTimeViewClock\n  }, defaultizedProps.viewRenderers);\n\n  // Props with the default values specific to the static variant\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    displayStaticWrapperAs,\n    ampmInClock,\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      toolbar: _extends({\n        hidden: displayStaticWrapperAs === 'desktop',\n        ampmInClock\n      }, (_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useStaticPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    validator: validateTime,\n    ref\n  });\n  return renderPicker();\n});\nStaticTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default \"mobile\"\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when component requests to be closed.\n   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.\n   * @deprecated Please avoid using as it will be removed in next major version.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { StaticTimePicker };"]},"metadata":{},"sourceType":"module"}