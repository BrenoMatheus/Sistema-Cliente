{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from './useIsDateDisabled';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { SECTION_TYPE_GRANULARITY } from '../internals/utils/getDefaultReferenceDate';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = params => {\n  const {\n    value,\n    referenceDate: referenceDateProp,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus = false,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate,\n    timezone\n  } = params;\n  const now = useNow(timezone);\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const referenceDate = React.useMemo(() => {\n    let externalReferenceDate = null;\n\n    if (referenceDateProp) {\n      externalReferenceDate = referenceDateProp;\n    } else if (defaultCalendarMonth) {\n      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.\n      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);\n    }\n\n    return singleItemValueManager.getInitialReferenceValue({\n      value,\n      utils,\n      timezone,\n      props: params,\n      referenceDate: externalReferenceDate,\n      granularity: SECTION_TYPE_GRANULARITY.day\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: utils.isValid(value) ? value : now,\n    currentMonth: utils.startOfMonth(referenceDate),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate;\n\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  const isDateDisabled = useIsDateDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast,\n    timezone\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    referenceDate,\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js"],"names":["_extends","React","useEventCallback","useIsDateDisabled","useUtils","useNow","singleItemValueManager","SECTION_TYPE_GRANULARITY","createCalendarStateReducer","reduceAnimations","disableSwitchToMonthOnDayFocus","utils","state","action","type","slideDirection","direction","currentMonth","newMonth","isMonthSwitchingAnimating","focusedDay","isSameDay","needMonthSwitch","isSameMonth","withoutMonthSwitchingAnimation","startOfMonth","isAfterDay","Error","useCalendarState","params","value","referenceDate","referenceDateProp","defaultCalendarMonth","disableFuture","disablePast","maxDate","minDate","onMonthChange","shouldDisableDate","timezone","now","reducerFn","useRef","Boolean","current","useMemo","externalReferenceDate","getInitialReferenceValue","props","granularity","day","calendarState","dispatch","useReducer","isValid","handleChangeMonth","useCallback","payload","changeMonth","newDate","newDateRequested","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","newFocusedDate"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from './useIsDateDisabled';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { SECTION_TYPE_GRANULARITY } from '../internals/utils/getDefaultReferenceDate';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = params => {\n  const {\n    value,\n    referenceDate: referenceDateProp,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus = false,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate,\n    timezone\n  } = params;\n  const now = useNow(timezone);\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const referenceDate = React.useMemo(() => {\n    let externalReferenceDate = null;\n    if (referenceDateProp) {\n      externalReferenceDate = referenceDateProp;\n    } else if (defaultCalendarMonth) {\n      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.\n      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);\n    }\n    return singleItemValueManager.getInitialReferenceValue({\n      value,\n      utils,\n      timezone,\n      props: params,\n      referenceDate: externalReferenceDate,\n      granularity: SECTION_TYPE_GRANULARITY.day\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: utils.isValid(value) ? value : now,\n    currentMonth: utils.startOfMonth(referenceDate),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate;\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  const isDateDisabled = useIsDateDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast,\n    timezone\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    referenceDate,\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};"]},"metadata":{},"sourceType":"module"}