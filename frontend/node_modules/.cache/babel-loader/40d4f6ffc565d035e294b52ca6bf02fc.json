{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/shared/forms/VDateField.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { TextField } from '@mui/material';\nimport { useField } from '@unform/core';\nimport { DateField } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * - Para resgatar o valor numérico no correto use o `onValueChange`\n * - Para eventos normais use o `onChange`\n *\n * Para como customizar a formatação verifique a documentação original do `react-number-format` [nesse link](https://www.npmjs.com/package/react-number-format) ou [nesse link](https://s-yadav.github.io/react-number-format/docs/intro/)\n */\nexport const VDateField = _ref => {\n  _s();\n\n  let {\n    name,\n    ...rest\n  } = _ref;\n  const {\n    fieldName,\n    defaultValue,\n    registerField,\n    error\n  } = useField(name);\n  const [value, setValue] = useState(dayjs(defaultValue) || '');\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, newValue) => setValue(newValue)\n    });\n  }, [registerField, fieldName, value]);\n  return /*#__PURE__*/_jsxDEV(DateField, { ...rest,\n    dateAdapter: AdapterDayjs,\n    customInput: TextField,\n    value: value,\n    error: !!error,\n    helperText: error,\n    onChange: e => {\n      var _rest$onChange;\n\n      setValue(e.target.value);\n      (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, e);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VDateField, \"lvwh1XniQ6Jj9dabm/Nyoobt2So=\", false, function () {\n  return [useField];\n});\n\n_c = VDateField;\n\nvar _c;\n\n$RefreshReg$(_c, \"VDateField\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/shared/forms/VDateField.tsx"],"names":["useEffect","useState","TextField","useField","DateField","AdapterDayjs","dayjs","VDateField","name","rest","fieldName","defaultValue","registerField","error","value","setValue","getValue","_","newValue","e","target","onChange"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,YAAT,QAA6B,kCAA7B;AAEA,OAAOC,KAAP,MAA6B,OAA7B;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAsC,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAAsB;AAC3E,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,MAAoDV,QAAQ,CAACK,IAAD,CAAlE;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAeK,KAAK,CAACK,YAAD,CAAL,IAAuB,EAAtC,CAAlC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,aAAa,CAAC;AACZJ,MAAAA,IAAI,EAAEE,SADM;AAEZM,MAAAA,QAAQ,EAAE,MAAMF,KAFJ;AAGZC,MAAAA,QAAQ,EAAE,CAACE,CAAD,EAAIC,QAAJ,KAAiBH,QAAQ,CAACG,QAAD;AAHvB,KAAD,CAAb;AAKD,GANQ,EAMN,CAACN,aAAD,EAAgBF,SAAhB,EAA2BI,KAA3B,CANM,CAAT;AASA,sBACE,QAAC,SAAD,OACML,IADN;AAGE,IAAA,WAAW,EAAEJ,YAHf;AAIE,IAAA,WAAW,EAAEH,SAJf;AAKE,IAAA,KAAK,EAAEY,KALT;AAME,IAAA,KAAK,EAAE,CAAC,CAACD,KANX;AAOE,IAAA,UAAU,EAAEA,KAPd;AAQE,IAAA,QAAQ,EAAEM,CAAC,IAAI;AAAA;;AAAEJ,MAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAAR;AAA0B,wBAAAL,IAAI,CAACY,QAAL,uEAAAZ,IAAI,EAAYU,CAAZ,CAAJ;AAAqB;AARlE;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAzBM;;GAAMZ,U;UAC+CJ,Q;;;KAD/CI,U","sourcesContent":["import { useEffect, useState } from 'react';\nimport { TextField } from '@mui/material';\nimport { useField } from '@unform/core';\nimport { DateField } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n\nimport dayjs, { Dayjs } from 'dayjs';\n\n\ntype TVTextFieldProps = {\n  name: string;\n}\n/**\n * - Para resgatar o valor numérico no correto use o `onValueChange`\n * - Para eventos normais use o `onChange`\n *\n * Para como customizar a formatação verifique a documentação original do `react-number-format` [nesse link](https://www.npmjs.com/package/react-number-format) ou [nesse link](https://s-yadav.github.io/react-number-format/docs/intro/)\n */\nexport const VDateField: React.FC<TVTextFieldProps> = ({ name, ...rest }) => {\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n  const [value, setValue] = useState<Dayjs | null>(dayjs(defaultValue) || '');\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, newValue) => setValue(newValue),\n    });\n  }, [registerField, fieldName, value]);\n\n\n  return (\n    <DateField\n      {...rest as any}\n    \n      dateAdapter={AdapterDayjs}  \n      customInput={TextField}\n      value={value}\n      error={!!error}\n      helperText={error}\n      onChange={e => { setValue(e.target.value); rest.onChange?.(e); }}\n    />\n  );\n};"]},"metadata":{},"sourceType":"module"}