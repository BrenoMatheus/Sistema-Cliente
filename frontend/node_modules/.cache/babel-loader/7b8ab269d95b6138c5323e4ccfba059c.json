{"ast":null,"code":"import _slicedToArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useOpenState } from '../useOpenState';\nimport { useLocalizationContext, useUtils } from '../useUtils';\nimport { useValidation } from '../useValidation';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\n/**\n * Decide if the new value should be published\n * The published value will be passed to `onChange` if defined.\n */\n\nvar shouldPublishValue = function shouldPublishValue(params) {\n  var action = params.action,\n      hasChanged = params.hasChanged,\n      dateState = params.dateState,\n      isControlled = params.isControlled;\n  var isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount; // The field is responsible for only calling `onChange` when needed.\n\n  if (action.name === 'setValueFromField') {\n    return true;\n  }\n\n  if (action.name === 'setValueFromAction') {\n    // If the component is not controlled, and the value has not been modified since the mount,\n    // Then we want to publish the default value whenever the user pressed the \"Accept\", \"Today\" or \"Clear\" button.\n    if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {\n      return true;\n    }\n\n    return hasChanged(dateState.lastPublishedValue);\n  }\n\n  if (action.name === 'setValueFromView' && action.selectionState !== 'shallow') {\n    // On the first view,\n    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`\n    if (isCurrentValueTheDefaultValue) {\n      return true;\n    }\n\n    return hasChanged(dateState.lastPublishedValue);\n  }\n\n  if (action.name === 'setValueFromShortcut') {\n    // On the first view,\n    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`\n    if (isCurrentValueTheDefaultValue) {\n      return true;\n    }\n\n    return hasChanged(dateState.lastPublishedValue);\n  }\n\n  return false;\n};\n/**\n * Decide if the new value should be committed.\n * The committed value will be passed to `onAccept` if defined.\n * It will also be used as a reset target when calling the `cancel` picker action (when clicking on the \"Cancel\" button).\n */\n\n\nvar shouldCommitValue = function shouldCommitValue(params) {\n  var action = params.action,\n      hasChanged = params.hasChanged,\n      dateState = params.dateState,\n      isControlled = params.isControlled,\n      closeOnSelect = params.closeOnSelect;\n  var isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;\n\n  if (action.name === 'setValueFromAction') {\n    // If the component is not controlled, and the value has not been modified since the mount,\n    // Then we want to commit the default value whenever the user pressed the \"Accept\", \"Today\" or \"Clear\" button.\n    if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {\n      return true;\n    }\n\n    return hasChanged(dateState.lastCommittedValue);\n  }\n\n  if (action.name === 'setValueFromView' && action.selectionState === 'finish' && closeOnSelect) {\n    // On picker where the 1st view is also the last view,\n    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onAccept`\n    if (isCurrentValueTheDefaultValue) {\n      return true;\n    }\n\n    return hasChanged(dateState.lastCommittedValue);\n  }\n\n  if (action.name === 'setValueFromShortcut') {\n    return action.changeImportance === 'accept' && hasChanged(dateState.lastCommittedValue);\n  }\n\n  return false;\n};\n/**\n * Decide if the picker should be closed after the value is updated.\n */\n\n\nvar shouldClosePicker = function shouldClosePicker(params) {\n  var action = params.action,\n      closeOnSelect = params.closeOnSelect;\n\n  if (action.name === 'setValueFromAction') {\n    return true;\n  }\n\n  if (action.name === 'setValueFromView') {\n    return action.selectionState === 'finish' && closeOnSelect;\n  }\n\n  if (action.name === 'setValueFromShortcut') {\n    return action.changeImportance === 'accept';\n  }\n\n  return false;\n};\n/**\n * Manage the value lifecycle of all the pickers.\n */\n\n\nexport var usePickerValue = function usePickerValue(_ref) {\n  var props = _ref.props,\n      valueManager = _ref.valueManager,\n      valueType = _ref.valueType,\n      wrapperVariant = _ref.wrapperVariant,\n      validator = _ref.validator;\n  var onAccept = props.onAccept,\n      onChange = props.onChange,\n      inValue = props.value,\n      inDefaultValue = props.defaultValue,\n      _props$closeOnSelect = props.closeOnSelect,\n      closeOnSelect = _props$closeOnSelect === void 0 ? wrapperVariant === 'desktop' : _props$closeOnSelect,\n      selectedSectionsProp = props.selectedSections,\n      onSelectedSectionsChange = props.onSelectedSectionsChange,\n      timezoneProp = props.timezone;\n\n  var _React$useRef = React.useRef(inDefaultValue),\n      defaultValue = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(inValue !== undefined),\n      isControlled = _React$useRef2.current;\n  /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(function () {\n      if (isControlled !== (inValue !== undefined)) {\n        console.error([\"MUI: A component is changing the \".concat(isControlled ? '' : 'un', \"controlled value of a picker to be \").concat(isControlled ? 'un' : '', \"controlled.\"), 'Elements should not switch from uncontrolled to controlled (or vice versa).', \"Decide between using a controlled or uncontrolled value\" + 'for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [inValue]);\n    React.useEffect(function () {\n      if (!isControlled && defaultValue !== inDefaultValue) {\n        console.error([\"MUI: A component is changing the defaultValue of an uncontrolled picker after being initialized. \" + \"To suppress this warning opt to use a controlled value.\"].join('\\n'));\n      }\n    }, [JSON.stringify(defaultValue)]);\n  }\n  /* eslint-enable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n\n\n  var utils = useUtils();\n  var adapter = useLocalizationContext();\n\n  var _useControlled = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'usePickerValue',\n    state: 'selectedSections'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      selectedSections = _useControlled2[0],\n      setSelectedSections = _useControlled2[1];\n\n  var _useOpenState = useOpenState(props),\n      isOpen = _useOpenState.isOpen,\n      setIsOpen = _useOpenState.setIsOpen;\n\n  var _React$useState = React.useState(function () {\n    var initialValue;\n\n    if (inValue !== undefined) {\n      initialValue = inValue;\n    } else if (defaultValue !== undefined) {\n      initialValue = defaultValue;\n    } else {\n      initialValue = valueManager.emptyValue;\n    }\n\n    return {\n      draft: initialValue,\n      lastPublishedValue: initialValue,\n      lastCommittedValue: initialValue,\n      lastControlledValue: inValue,\n      hasBeenModifiedSinceMount: false\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dateState = _React$useState2[0],\n      setDateState = _React$useState2[1];\n\n  var _useValueWithTimezone = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: inValue,\n    defaultValue: defaultValue,\n    onChange: onChange,\n    valueManager: valueManager\n  }),\n      timezone = _useValueWithTimezone.timezone,\n      handleValueChange = _useValueWithTimezone.handleValueChange;\n\n  useValidation(_extends({}, props, {\n    value: dateState.draft,\n    timezone: timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  var updateDate = useEventCallback(function (action) {\n    var updaterParams = {\n      action: action,\n      dateState: dateState,\n      hasChanged: function hasChanged(comparison) {\n        return !valueManager.areValuesEqual(utils, action.value, comparison);\n      },\n      isControlled: isControlled,\n      closeOnSelect: closeOnSelect\n    };\n    var shouldPublish = shouldPublishValue(updaterParams);\n    var shouldCommit = shouldCommitValue(updaterParams);\n    var shouldClose = shouldClosePicker(updaterParams);\n    setDateState(function (prev) {\n      return _extends({}, prev, {\n        draft: action.value,\n        lastPublishedValue: shouldPublish ? action.value : prev.lastPublishedValue,\n        lastCommittedValue: shouldCommit ? action.value : prev.lastCommittedValue,\n        hasBeenModifiedSinceMount: true\n      });\n    });\n\n    if (shouldPublish) {\n      var validationError = action.name === 'setValueFromField' ? action.context.validationError : validator({\n        adapter: adapter,\n        value: action.value,\n        props: _extends({}, props, {\n          value: action.value,\n          timezone: timezone\n        })\n      });\n      var context = {\n        validationError: validationError\n      }; // TODO v7: Remove 2nd condition\n\n      if (action.name === 'setValueFromShortcut' && action.shortcut != null) {\n        context.shortcut = action.shortcut;\n      }\n\n      handleValueChange(action.value, context);\n    }\n\n    if (shouldCommit && onAccept) {\n      onAccept(action.value);\n    }\n\n    if (shouldClose) {\n      setIsOpen(false);\n    }\n  });\n\n  if (inValue !== undefined && (dateState.lastControlledValue === undefined || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValue))) {\n    var isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValue);\n    setDateState(function (prev) {\n      return _extends({}, prev, {\n        lastControlledValue: inValue\n      }, isUpdateComingFromPicker ? {} : {\n        lastCommittedValue: inValue,\n        lastPublishedValue: inValue,\n        draft: inValue,\n        hasBeenModifiedSinceMount: true\n      });\n    });\n  }\n\n  var handleClear = useEventCallback(function () {\n    updateDate({\n      value: valueManager.emptyValue,\n      name: 'setValueFromAction',\n      pickerAction: 'clear'\n    });\n  });\n  var handleAccept = useEventCallback(function () {\n    updateDate({\n      value: dateState.lastPublishedValue,\n      name: 'setValueFromAction',\n      pickerAction: 'accept'\n    });\n  });\n  var handleDismiss = useEventCallback(function () {\n    updateDate({\n      value: dateState.lastPublishedValue,\n      name: 'setValueFromAction',\n      pickerAction: 'dismiss'\n    });\n  });\n  var handleCancel = useEventCallback(function () {\n    updateDate({\n      value: dateState.lastCommittedValue,\n      name: 'setValueFromAction',\n      pickerAction: 'cancel'\n    });\n  });\n  var handleSetToday = useEventCallback(function () {\n    updateDate({\n      value: valueManager.getTodayValue(utils, timezone, valueType),\n      name: 'setValueFromAction',\n      pickerAction: 'today'\n    });\n  });\n  var handleOpen = useEventCallback(function () {\n    return setIsOpen(true);\n  });\n  var handleClose = useEventCallback(function () {\n    return setIsOpen(false);\n  });\n  var handleChange = useEventCallback(function (newValue) {\n    var selectionState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'partial';\n    return updateDate({\n      name: 'setValueFromView',\n      value: newValue,\n      selectionState: selectionState\n    });\n  }); // TODO v7: Make changeImportance and label mandatory.\n\n  var handleSelectShortcut = useEventCallback(function (newValue, changeImportance, shortcut) {\n    return updateDate({\n      name: 'setValueFromShortcut',\n      value: newValue,\n      changeImportance: changeImportance != null ? changeImportance : 'accept',\n      shortcut: shortcut\n    });\n  });\n  var handleChangeFromField = useEventCallback(function (newValue, context) {\n    return updateDate({\n      name: 'setValueFromField',\n      value: newValue,\n      context: context\n    });\n  });\n  var handleFieldSelectedSectionsChange = useEventCallback(function (newSelectedSections) {\n    setSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n  });\n  var actions = {\n    onClear: handleClear,\n    onAccept: handleAccept,\n    onDismiss: handleDismiss,\n    onCancel: handleCancel,\n    onSetToday: handleSetToday,\n    onOpen: handleOpen,\n    onClose: handleClose\n  };\n  var fieldResponse = {\n    value: dateState.draft,\n    onChange: handleChangeFromField,\n    selectedSections: selectedSections,\n    onSelectedSectionsChange: handleFieldSelectedSectionsChange\n  };\n  var viewValue = React.useMemo(function () {\n    return valueManager.cleanValue(utils, dateState.draft);\n  }, [utils, valueManager, dateState.draft]);\n  var viewResponse = {\n    value: viewValue,\n    onChange: handleChange,\n    onClose: handleClose,\n    open: isOpen,\n    onSelectedSectionsChange: handleFieldSelectedSectionsChange\n  };\n\n  var isValid = function isValid(testedValue) {\n    var error = validator({\n      adapter: adapter,\n      value: testedValue,\n      props: _extends({}, props, {\n        value: testedValue,\n        timezone: timezone\n      })\n    });\n    return !valueManager.hasError(error);\n  };\n\n  var layoutResponse = _extends({}, actions, {\n    value: viewValue,\n    onChange: handleChange,\n    onSelectShortcut: handleSelectShortcut,\n    isValid: isValid\n  });\n\n  return {\n    open: isOpen,\n    fieldProps: fieldResponse,\n    viewProps: viewResponse,\n    layoutProps: layoutResponse,\n    actions: actions\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js"],"names":["_extends","React","unstable_useControlled","useControlled","useEventCallback","useOpenState","useLocalizationContext","useUtils","useValidation","useValueWithTimezone","shouldPublishValue","params","action","hasChanged","dateState","isControlled","isCurrentValueTheDefaultValue","hasBeenModifiedSinceMount","name","includes","pickerAction","lastPublishedValue","selectionState","shouldCommitValue","closeOnSelect","lastCommittedValue","changeImportance","shouldClosePicker","usePickerValue","props","valueManager","valueType","wrapperVariant","validator","onAccept","onChange","inValue","value","inDefaultValue","defaultValue","selectedSectionsProp","selectedSections","onSelectedSectionsChange","timezoneProp","timezone","useRef","current","undefined","process","env","NODE_ENV","useEffect","console","error","join","JSON","stringify","utils","adapter","controlled","default","state","setSelectedSections","isOpen","setIsOpen","useState","initialValue","emptyValue","draft","lastControlledValue","setDateState","handleValueChange","isSameError","defaultErrorState","updateDate","updaterParams","comparison","areValuesEqual","shouldPublish","shouldCommit","shouldClose","prev","validationError","context","shortcut","isUpdateComingFromPicker","handleClear","handleAccept","handleDismiss","handleCancel","handleSetToday","getTodayValue","handleOpen","handleClose","handleChange","newValue","handleSelectShortcut","handleChangeFromField","handleFieldSelectedSectionsChange","newSelectedSections","actions","onClear","onDismiss","onCancel","onSetToday","onOpen","onClose","fieldResponse","viewValue","useMemo","cleanValue","viewResponse","open","isValid","testedValue","hasError","layoutResponse","onSelectShortcut","fieldProps","viewProps","layoutProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useOpenState } from '../useOpenState';\nimport { useLocalizationContext, useUtils } from '../useUtils';\nimport { useValidation } from '../useValidation';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\n\n/**\n * Decide if the new value should be published\n * The published value will be passed to `onChange` if defined.\n */\nconst shouldPublishValue = params => {\n  const {\n    action,\n    hasChanged,\n    dateState,\n    isControlled\n  } = params;\n  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;\n\n  // The field is responsible for only calling `onChange` when needed.\n  if (action.name === 'setValueFromField') {\n    return true;\n  }\n  if (action.name === 'setValueFromAction') {\n    // If the component is not controlled, and the value has not been modified since the mount,\n    // Then we want to publish the default value whenever the user pressed the \"Accept\", \"Today\" or \"Clear\" button.\n    if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {\n      return true;\n    }\n    return hasChanged(dateState.lastPublishedValue);\n  }\n  if (action.name === 'setValueFromView' && action.selectionState !== 'shallow') {\n    // On the first view,\n    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`\n    if (isCurrentValueTheDefaultValue) {\n      return true;\n    }\n    return hasChanged(dateState.lastPublishedValue);\n  }\n  if (action.name === 'setValueFromShortcut') {\n    // On the first view,\n    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`\n    if (isCurrentValueTheDefaultValue) {\n      return true;\n    }\n    return hasChanged(dateState.lastPublishedValue);\n  }\n  return false;\n};\n\n/**\n * Decide if the new value should be committed.\n * The committed value will be passed to `onAccept` if defined.\n * It will also be used as a reset target when calling the `cancel` picker action (when clicking on the \"Cancel\" button).\n */\nconst shouldCommitValue = params => {\n  const {\n    action,\n    hasChanged,\n    dateState,\n    isControlled,\n    closeOnSelect\n  } = params;\n  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;\n  if (action.name === 'setValueFromAction') {\n    // If the component is not controlled, and the value has not been modified since the mount,\n    // Then we want to commit the default value whenever the user pressed the \"Accept\", \"Today\" or \"Clear\" button.\n    if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {\n      return true;\n    }\n    return hasChanged(dateState.lastCommittedValue);\n  }\n  if (action.name === 'setValueFromView' && action.selectionState === 'finish' && closeOnSelect) {\n    // On picker where the 1st view is also the last view,\n    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onAccept`\n    if (isCurrentValueTheDefaultValue) {\n      return true;\n    }\n    return hasChanged(dateState.lastCommittedValue);\n  }\n  if (action.name === 'setValueFromShortcut') {\n    return action.changeImportance === 'accept' && hasChanged(dateState.lastCommittedValue);\n  }\n  return false;\n};\n\n/**\n * Decide if the picker should be closed after the value is updated.\n */\nconst shouldClosePicker = params => {\n  const {\n    action,\n    closeOnSelect\n  } = params;\n  if (action.name === 'setValueFromAction') {\n    return true;\n  }\n  if (action.name === 'setValueFromView') {\n    return action.selectionState === 'finish' && closeOnSelect;\n  }\n  if (action.name === 'setValueFromShortcut') {\n    return action.changeImportance === 'accept';\n  }\n  return false;\n};\n\n/**\n * Manage the value lifecycle of all the pickers.\n */\nexport const usePickerValue = ({\n  props,\n  valueManager,\n  valueType,\n  wrapperVariant,\n  validator\n}) => {\n  const {\n    onAccept,\n    onChange,\n    value: inValue,\n    defaultValue: inDefaultValue,\n    closeOnSelect = wrapperVariant === 'desktop',\n    selectedSections: selectedSectionsProp,\n    onSelectedSectionsChange,\n    timezone: timezoneProp\n  } = props;\n  const {\n    current: defaultValue\n  } = React.useRef(inDefaultValue);\n  const {\n    current: isControlled\n  } = React.useRef(inValue !== undefined);\n\n  /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (inValue !== undefined)) {\n        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled value of a picker to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled value` + 'for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [inValue]);\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== inDefaultValue) {\n        console.error([`MUI: A component is changing the defaultValue of an uncontrolled picker after being initialized. ` + `To suppress this warning opt to use a controlled value.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultValue)]);\n  }\n  /* eslint-enable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n\n  const utils = useUtils();\n  const adapter = useLocalizationContext();\n  const [selectedSections, setSelectedSections] = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'usePickerValue',\n    state: 'selectedSections'\n  });\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n  const [dateState, setDateState] = React.useState(() => {\n    let initialValue;\n    if (inValue !== undefined) {\n      initialValue = inValue;\n    } else if (defaultValue !== undefined) {\n      initialValue = defaultValue;\n    } else {\n      initialValue = valueManager.emptyValue;\n    }\n    return {\n      draft: initialValue,\n      lastPublishedValue: initialValue,\n      lastCommittedValue: initialValue,\n      lastControlledValue: inValue,\n      hasBeenModifiedSinceMount: false\n    };\n  });\n  const {\n    timezone,\n    handleValueChange\n  } = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: inValue,\n    defaultValue,\n    onChange,\n    valueManager\n  });\n  useValidation(_extends({}, props, {\n    value: dateState.draft,\n    timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const updateDate = useEventCallback(action => {\n    const updaterParams = {\n      action,\n      dateState,\n      hasChanged: comparison => !valueManager.areValuesEqual(utils, action.value, comparison),\n      isControlled,\n      closeOnSelect\n    };\n    const shouldPublish = shouldPublishValue(updaterParams);\n    const shouldCommit = shouldCommitValue(updaterParams);\n    const shouldClose = shouldClosePicker(updaterParams);\n    setDateState(prev => _extends({}, prev, {\n      draft: action.value,\n      lastPublishedValue: shouldPublish ? action.value : prev.lastPublishedValue,\n      lastCommittedValue: shouldCommit ? action.value : prev.lastCommittedValue,\n      hasBeenModifiedSinceMount: true\n    }));\n    if (shouldPublish) {\n      const validationError = action.name === 'setValueFromField' ? action.context.validationError : validator({\n        adapter,\n        value: action.value,\n        props: _extends({}, props, {\n          value: action.value,\n          timezone\n        })\n      });\n      const context = {\n        validationError\n      };\n\n      // TODO v7: Remove 2nd condition\n      if (action.name === 'setValueFromShortcut' && action.shortcut != null) {\n        context.shortcut = action.shortcut;\n      }\n      handleValueChange(action.value, context);\n    }\n    if (shouldCommit && onAccept) {\n      onAccept(action.value);\n    }\n    if (shouldClose) {\n      setIsOpen(false);\n    }\n  });\n  if (inValue !== undefined && (dateState.lastControlledValue === undefined || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValue))) {\n    const isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValue);\n    setDateState(prev => _extends({}, prev, {\n      lastControlledValue: inValue\n    }, isUpdateComingFromPicker ? {} : {\n      lastCommittedValue: inValue,\n      lastPublishedValue: inValue,\n      draft: inValue,\n      hasBeenModifiedSinceMount: true\n    }));\n  }\n  const handleClear = useEventCallback(() => {\n    updateDate({\n      value: valueManager.emptyValue,\n      name: 'setValueFromAction',\n      pickerAction: 'clear'\n    });\n  });\n  const handleAccept = useEventCallback(() => {\n    updateDate({\n      value: dateState.lastPublishedValue,\n      name: 'setValueFromAction',\n      pickerAction: 'accept'\n    });\n  });\n  const handleDismiss = useEventCallback(() => {\n    updateDate({\n      value: dateState.lastPublishedValue,\n      name: 'setValueFromAction',\n      pickerAction: 'dismiss'\n    });\n  });\n  const handleCancel = useEventCallback(() => {\n    updateDate({\n      value: dateState.lastCommittedValue,\n      name: 'setValueFromAction',\n      pickerAction: 'cancel'\n    });\n  });\n  const handleSetToday = useEventCallback(() => {\n    updateDate({\n      value: valueManager.getTodayValue(utils, timezone, valueType),\n      name: 'setValueFromAction',\n      pickerAction: 'today'\n    });\n  });\n  const handleOpen = useEventCallback(() => setIsOpen(true));\n  const handleClose = useEventCallback(() => setIsOpen(false));\n  const handleChange = useEventCallback((newValue, selectionState = 'partial') => updateDate({\n    name: 'setValueFromView',\n    value: newValue,\n    selectionState\n  }));\n\n  // TODO v7: Make changeImportance and label mandatory.\n  const handleSelectShortcut = useEventCallback((newValue, changeImportance, shortcut) => updateDate({\n    name: 'setValueFromShortcut',\n    value: newValue,\n    changeImportance: changeImportance != null ? changeImportance : 'accept',\n    shortcut\n  }));\n  const handleChangeFromField = useEventCallback((newValue, context) => updateDate({\n    name: 'setValueFromField',\n    value: newValue,\n    context\n  }));\n  const handleFieldSelectedSectionsChange = useEventCallback(newSelectedSections => {\n    setSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n  });\n  const actions = {\n    onClear: handleClear,\n    onAccept: handleAccept,\n    onDismiss: handleDismiss,\n    onCancel: handleCancel,\n    onSetToday: handleSetToday,\n    onOpen: handleOpen,\n    onClose: handleClose\n  };\n  const fieldResponse = {\n    value: dateState.draft,\n    onChange: handleChangeFromField,\n    selectedSections,\n    onSelectedSectionsChange: handleFieldSelectedSectionsChange\n  };\n  const viewValue = React.useMemo(() => valueManager.cleanValue(utils, dateState.draft), [utils, valueManager, dateState.draft]);\n  const viewResponse = {\n    value: viewValue,\n    onChange: handleChange,\n    onClose: handleClose,\n    open: isOpen,\n    onSelectedSectionsChange: handleFieldSelectedSectionsChange\n  };\n  const isValid = testedValue => {\n    const error = validator({\n      adapter,\n      value: testedValue,\n      props: _extends({}, props, {\n        value: testedValue,\n        timezone\n      })\n    });\n    return !valueManager.hasError(error);\n  };\n  const layoutResponse = _extends({}, actions, {\n    value: viewValue,\n    onChange: handleChange,\n    onSelectShortcut: handleSelectShortcut,\n    isValid\n  });\n  return {\n    open: isOpen,\n    fieldProps: fieldResponse,\n    viewProps: viewResponse,\n    layoutProps: layoutResponse,\n    actions\n  };\n};"]},"metadata":{},"sourceType":"module"}