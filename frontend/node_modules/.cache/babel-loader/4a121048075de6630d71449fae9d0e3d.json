{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from '../useUtils';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions } from './useField.utils';\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\n\nconst QUERY_LIFE_DURATION_MS = 5000;\n\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\n\n\nexport const useFieldCharacterEditing = _ref => {\n  let {\n    sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr,\n    timezone\n  } = _ref;\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    var _sections$query$secti;\n\n    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        window.clearTimeout(timeout);\n      };\n    }\n\n    return () => {};\n  }, [query, resetQuery]);\n\n  const applyQuery = (_ref2, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    let {\n      keyPressed,\n      sectionIndex\n    } = _ref2;\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex]; // The current query targets the section being editing\n    // We can try to concatenated value\n\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n\n    return queryResponse;\n  };\n\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      } // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n\n\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n\n      return {\n        saveQuery: false\n      };\n    };\n\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, section) => {\n      const queryValueNumber = Number(`${queryValue}`);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      } // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n\n\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n\n      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue(queryValue, activeSection);\n      } // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n\n\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');\n        const response = getNewSectionValue(queryValue, {\n          type: activeSection.type,\n          format: 'MM',\n          hasLeadingZerosInFormat,\n          hasLeadingZerosInInput: true,\n          contentType: 'digit',\n          maxLength: 2\n        });\n\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      } // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n\n\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection);\n\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n\n        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      return {\n        saveQuery: false\n      };\n    };\n\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));\n  };\n\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));\n    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);\n\n    if (response == null) {\n      setTempAndroidValueStr(null);\n    } else {\n      updateSectionValue({\n        activeSection,\n        newSectionValue: response.sectionValue,\n        shouldGoToNextSection: response.shouldGoToNextSection\n      });\n    }\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js"],"names":["_extends","React","useEventCallback","useUtils","changeSectionValueFormat","cleanDigitSectionValue","doesSectionFormatHaveLeadingZeros","getDateSectionConfigFromFormatToken","getDaysInWeekStr","getLetterEditingOptions","QUERY_LIFE_DURATION_MS","isQueryResponseWithoutValue","response","saveQuery","useFieldCharacterEditing","sections","updateSectionValue","sectionsValueBoundaries","setTempAndroidValueStr","timezone","utils","query","setQuery","useState","resetQuery","useEffect","_sections$query$secti","sectionIndex","type","sectionType","timeout","setTimeout","window","clearTimeout","applyQuery","getFirstSectionValueMatchingWithQuery","isValidQueryValue","keyPressed","cleanKeyPressed","toLowerCase","activeSection","value","concatenatedQueryValue","queryResponse","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","contentType","fallbackOptions","fallbackValue","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","section","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","hasLeadingZerosInFormat","hasLeadingZerosInInput","maxLength","formattedValue","isNaN","applyCharacterEditing","isNumericEditing","resetCharacterQuery"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from '../useUtils';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions } from './useField.utils';\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\n\nconst QUERY_LIFE_DURATION_MS = 5000;\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  sections,\n  updateSectionValue,\n  sectionsValueBoundaries,\n  setTempAndroidValueStr,\n  timezone\n}) => {\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    var _sections$query$secti;\n    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        window.clearTimeout(timeout);\n      };\n    }\n    return () => {};\n  }, [query, resetQuery]);\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenated value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, section) => {\n      const queryValueNumber = Number(`${queryValue}`);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue(queryValue, activeSection);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');\n        const response = getNewSectionValue(queryValue, {\n          type: activeSection.type,\n          format: 'MM',\n          hasLeadingZerosInFormat,\n          hasLeadingZerosInInput: true,\n          contentType: 'digit',\n          maxLength: 2\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection);\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));\n  };\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));\n    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n    } else {\n      updateSectionValue({\n        activeSection,\n        newSectionValue: response.sectionValue,\n        shouldGoToNextSection: response.shouldGoToNextSection\n      });\n    }\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};"]},"metadata":{},"sourceType":"module"}