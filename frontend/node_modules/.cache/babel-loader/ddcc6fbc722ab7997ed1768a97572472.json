{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/Projeto advocacia/frontend/src/shared/contexts/ThemeContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport { ThemeProvider } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { DarkTheme, LightTheme } from './../themes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({});\nexport const useAppThemeContext = () => {\n  _s();\n\n  return useContext(ThemeContext);\n};\n\n_s(useAppThemeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const AppThemeProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [themeName, setThemeName] = useState('light');\n  const toggleTheme = useCallback(() => {\n    setThemeName(oldThemeName => oldThemeName === 'light' ? 'dark' : 'light');\n  }, []);\n  const theme = useMemo(() => {\n    if (themeName === 'light') return LightTheme;\n    return DarkTheme;\n  }, [themeName]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      themeName,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        width: \"100vw\",\n        height: \"100vh\",\n        bgcolor: theme.palette.background.default,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AppThemeProvider, \"DiTGdwgS7wpg/n8LtbXEuRECslM=\");\n\n_c = AppThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppThemeProvider\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Projeto advocacia/frontend/src/shared/contexts/ThemeContext.tsx"],"names":["createContext","useCallback","useContext","useMemo","useState","ThemeProvider","Box","DarkTheme","LightTheme","ThemeContext","useAppThemeContext","AppThemeProvider","children","themeName","setThemeName","toggleTheme","oldThemeName","theme","palette","background","default"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,UAArC,EAAiDC,OAAjD,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,GAAT,QAAoB,aAApB;AAEA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,aAAtC;;AAOA,MAAMC,YAAY,gBAAGT,aAAa,CAAC,EAAD,CAAlC;AAEA,OAAO,MAAMU,kBAAkB,GAAG,MAAM;AAAA;;AACtC,SAAOR,UAAU,CAACO,YAAD,CAAjB;AACD,CAFM;;GAAMC,kB;;AAOb,OAAO,MAAMC,gBAAkD,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClF,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAmB,OAAnB,CAA1C;AAEA,QAAMW,WAAW,GAAGd,WAAW,CAAC,MAAM;AACpCa,IAAAA,YAAY,CAACE,YAAY,IAAIA,YAAY,KAAK,OAAjB,GAA2B,MAA3B,GAAoC,OAArD,CAAZ;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,QAAMC,KAAK,GAAGd,OAAO,CAAC,MAAM;AAC1B,QAAIU,SAAS,KAAK,OAAlB,EAA2B,OAAOL,UAAP;AAE3B,WAAOD,SAAP;AACD,GAJoB,EAIlB,CAACM,SAAD,CAJkB,CAArB;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAA9B;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEE,KAAtB;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,KAAK,EAAC,OAAX;AAAmB,QAAA,MAAM,EAAC,OAA1B;AAAkC,QAAA,OAAO,EAAEA,KAAK,CAACC,OAAN,CAAcC,UAAd,CAAyBC,OAApE;AAAA,kBACGR;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAvBM;;IAAMD,gB;;KAAAA,gB","sourcesContent":["import { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport { ThemeProvider } from '@mui/material';\nimport { Box } from '@mui/system';\n\nimport { DarkTheme, LightTheme } from './../themes';\n\ninterface IThemeContextData {\n  themeName: 'light' | 'dark';\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext({} as IThemeContextData);\n\nexport const useAppThemeContext = () => {\n  return useContext(ThemeContext);\n};\n\ninterface IAppThemeProviderProps {\n  children: React.ReactNode\n}\nexport const AppThemeProvider: React.FC<IAppThemeProviderProps> = ({ children }) => {\n  const [themeName, setThemeName] = useState<'light' | 'dark'>('light');\n\n  const toggleTheme = useCallback(() => {\n    setThemeName(oldThemeName => oldThemeName === 'light' ? 'dark' : 'light');\n  }, []);\n\n  const theme = useMemo(() => {\n    if (themeName === 'light') return LightTheme;\n\n    return DarkTheme;\n  }, [themeName]);\n\n\n  return (\n    <ThemeContext.Provider value={{ themeName, toggleTheme }}>\n      <ThemeProvider theme={theme}>\n        <Box width=\"100vw\" height=\"100vh\" bgcolor={theme.palette.background.default}>\n          {children}\n        </Box>\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}