{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { renderDateViewCalendar } from '../dateViewRenderers';\nimport { useStaticPicker } from '../internals/hooks/useStaticPicker';\nimport { validateDate } from '../internals';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/x/api/date-pickers/static-date-picker/)\n */\n\nconst StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  var _defaultizedProps$dis, _defaultizedProps$yea, _defaultizedProps$slo;\n\n  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker');\n  const displayStaticWrapperAs = (_defaultizedProps$dis = defaultizedProps.displayStaticWrapperAs) != null ? _defaultizedProps$dis : 'mobile';\n\n  const viewRenderers = _extends({\n    day: renderDateViewCalendar,\n    month: renderDateViewCalendar,\n    year: renderDateViewCalendar\n  }, defaultizedProps.viewRenderers); // Props with the default values specific to the static variant\n\n\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    displayStaticWrapperAs,\n    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : displayStaticWrapperAs === 'mobile' ? 3 : 4,\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      toolbar: _extends({\n        hidden: displayStaticWrapperAs === 'desktop'\n      }, (_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.toolbar)\n    })\n  });\n\n  const {\n    renderPicker\n  } = useStaticPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'date',\n    validator: validateDate,\n    ref\n  });\n  return renderPicker();\n});\nStaticDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value` and `defaultValue` are empty.\n   * @deprecated Consider using `referenceDate` instead.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default \"mobile\"\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Months rendered per row.\n   * @default 3\n   */\n  monthsPerRow: PropTypes.oneOf([3, 4]),\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when component requests to be closed.\n   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.\n   * @deprecated Please avoid using as it will be removed in next major version.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback fired on year change.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} If `true` the date will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific month.\n   * @template TDate\n   * @param {TDate} month The month to test.\n   * @returns {boolean} If `true`, the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific year.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} If `true`, the year will be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func,\n    month: PropTypes.func,\n    year: PropTypes.func\n  }),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),\n\n  /**\n   * Years rendered per row.\n   * @default 3\n   */\n  yearsPerRow: PropTypes.oneOf([3, 4])\n};\nexport { StaticDatePicker };","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/StaticDatePicker/StaticDatePicker.js"],"names":["_extends","React","PropTypes","useDatePickerDefaultizedProps","renderDateViewCalendar","useStaticPicker","validateDate","singleItemValueManager","StaticDatePicker","forwardRef","inProps","ref","_defaultizedProps$dis","_defaultizedProps$yea","_defaultizedProps$slo","defaultizedProps","displayStaticWrapperAs","viewRenderers","day","month","year","props","yearsPerRow","slotProps","toolbar","hidden","renderPicker","valueManager","valueType","validator","propTypes","autoFocus","bool","className","string","components","object","componentsProps","dayOfWeekFormatter","func","defaultCalendarMonth","any","defaultValue","disabled","disableFuture","disableHighlightToday","disablePast","oneOf","displayWeekNumber","fixedWeekNumber","number","loading","localeText","maxDate","minDate","monthsPerRow","onAccept","onChange","onClose","onError","onMonthChange","onViewChange","onYearChange","openTo","orientation","readOnly","reduceAnimations","referenceDate","renderLoading","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","slots","sx","oneOfType","arrayOf","timezone","value","view","shape","views","isRequired"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,6BAAT,QAA8C,sBAA9C;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,sBAAT,QAAuC,kCAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,aAAaP,KAAK,CAACQ,UAAN,CAAiB,SAASD,gBAAT,CAA0BE,OAA1B,EAAmCC,GAAnC,EAAwC;AAC7F,MAAIC,qBAAJ,EAA2BC,qBAA3B,EAAkDC,qBAAlD;;AACA,QAAMC,gBAAgB,GAAGZ,6BAA6B,CAACO,OAAD,EAAU,qBAAV,CAAtD;AACA,QAAMM,sBAAsB,GAAG,CAACJ,qBAAqB,GAAGG,gBAAgB,CAACC,sBAA1C,KAAqE,IAArE,GAA4EJ,qBAA5E,GAAoG,QAAnI;;AACA,QAAMK,aAAa,GAAGjB,QAAQ,CAAC;AAC7BkB,IAAAA,GAAG,EAAEd,sBADwB;AAE7Be,IAAAA,KAAK,EAAEf,sBAFsB;AAG7BgB,IAAAA,IAAI,EAAEhB;AAHuB,GAAD,EAI3BW,gBAAgB,CAACE,aAJU,CAA9B,CAJ6F,CAU7F;;;AACA,QAAMI,KAAK,GAAGrB,QAAQ,CAAC,EAAD,EAAKe,gBAAL,EAAuB;AAC3CE,IAAAA,aAD2C;AAE3CD,IAAAA,sBAF2C;AAG3CM,IAAAA,WAAW,EAAE,CAACT,qBAAqB,GAAGE,gBAAgB,CAACO,WAA1C,KAA0D,IAA1D,GAAiET,qBAAjE,GAAyFG,sBAAsB,KAAK,QAA3B,GAAsC,CAAtC,GAA0C,CAHrG;AAI3CO,IAAAA,SAAS,EAAEvB,QAAQ,CAAC,EAAD,EAAKe,gBAAgB,CAACQ,SAAtB,EAAiC;AAClDC,MAAAA,OAAO,EAAExB,QAAQ,CAAC;AAChByB,QAAAA,MAAM,EAAET,sBAAsB,KAAK;AADnB,OAAD,EAEd,CAACF,qBAAqB,GAAGC,gBAAgB,CAACQ,SAA1C,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwET,qBAAqB,CAACU,OAFhF;AADiC,KAAjC;AAJwB,GAAvB,CAAtB;;AAUA,QAAM;AACJE,IAAAA;AADI,MAEFrB,eAAe,CAAC;AAClBgB,IAAAA,KADkB;AAElBM,IAAAA,YAAY,EAAEpB,sBAFI;AAGlBqB,IAAAA,SAAS,EAAE,MAHO;AAIlBC,IAAAA,SAAS,EAAEvB,YAJO;AAKlBK,IAAAA;AALkB,GAAD,CAFnB;AASA,SAAOe,YAAY,EAAnB;AACD,CA/BqC,CAAtC;AAgCAlB,gBAAgB,CAACsB,SAAjB,GAA6B;AAC3B;AACA;AACA;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE7B,SAAS,CAAC8B,IAXM;;AAY3B;AACF;AACA;AACEC,EAAAA,SAAS,EAAE/B,SAAS,CAACgC,MAfM;;AAgB3B;AACF;AACA;AACA;AACA;AACEC,EAAAA,UAAU,EAAEjC,SAAS,CAACkC,MArBK;;AAsB3B;AACF;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAEnC,SAAS,CAACkC,MA3BA;;AA4B3B;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,kBAAkB,EAAEpC,SAAS,CAACqC,IAnCH;;AAoC3B;AACF;AACA;AACA;AACEC,EAAAA,oBAAoB,EAAEtC,SAAS,CAACuC,GAxCL;;AAyC3B;AACF;AACA;AACA;AACEC,EAAAA,YAAY,EAAExC,SAAS,CAACuC,GA7CG;;AA8C3B;AACF;AACA;AACA;AACEE,EAAAA,QAAQ,EAAEzC,SAAS,CAAC8B,IAlDO;;AAmD3B;AACF;AACA;AACA;AACEY,EAAAA,aAAa,EAAE1C,SAAS,CAAC8B,IAvDE;;AAwD3B;AACF;AACA;AACA;AACEa,EAAAA,qBAAqB,EAAE3C,SAAS,CAAC8B,IA5DN;;AA6D3B;AACF;AACA;AACA;AACEc,EAAAA,WAAW,EAAE5C,SAAS,CAAC8B,IAjEI;;AAkE3B;AACF;AACA;AACA;AACEhB,EAAAA,sBAAsB,EAAEd,SAAS,CAAC6C,KAAV,CAAgB,CAAC,SAAD,EAAY,QAAZ,CAAhB,CAtEG;;AAuE3B;AACF;AACA;AACEC,EAAAA,iBAAiB,EAAE9C,SAAS,CAAC8B,IA1EF;;AA2E3B;AACF;AACA;AACA;AACA;AACEiB,EAAAA,eAAe,EAAE/C,SAAS,CAACgD,MAhFA;;AAiF3B;AACF;AACA;AACA;AACA;AACEC,EAAAA,OAAO,EAAEjD,SAAS,CAAC8B,IAtFQ;;AAuF3B;AACF;AACA;AACA;AACEoB,EAAAA,UAAU,EAAElD,SAAS,CAACkC,MA3FK;;AA4F3B;AACF;AACA;AACEiB,EAAAA,OAAO,EAAEnD,SAAS,CAACuC,GA/FQ;;AAgG3B;AACF;AACA;AACEa,EAAAA,OAAO,EAAEpD,SAAS,CAACuC,GAnGQ;;AAoG3B;AACF;AACA;AACA;AACEc,EAAAA,YAAY,EAAErD,SAAS,CAAC6C,KAAV,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAxGa;;AAyG3B;AACF;AACA;AACA;AACA;AACES,EAAAA,QAAQ,EAAEtD,SAAS,CAACqC,IA9GO;;AA+G3B;AACF;AACA;AACA;AACA;AACA;AACA;AACEkB,EAAAA,QAAQ,EAAEvD,SAAS,CAACqC,IAtHO;;AAuH3B;AACF;AACA;AACA;AACA;AACEmB,EAAAA,OAAO,EAAExD,SAAS,CAACqC,IA5HQ;;AA6H3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEoB,EAAAA,OAAO,EAAEzD,SAAS,CAACqC,IAtIQ;;AAuI3B;AACF;AACA;AACA;AACA;AACEqB,EAAAA,aAAa,EAAE1D,SAAS,CAACqC,IA5IE;;AA6I3B;AACF;AACA;AACA;AACA;AACEsB,EAAAA,YAAY,EAAE3D,SAAS,CAACqC,IAlJG;;AAmJ3B;AACF;AACA;AACA;AACA;AACEuB,EAAAA,YAAY,EAAE5D,SAAS,CAACqC,IAxJG;;AAyJ3B;AACF;AACA;AACA;AACA;AACEwB,EAAAA,MAAM,EAAE7D,SAAS,CAAC6C,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAAhB,CA9JmB;;AA+J3B;AACF;AACA;AACEiB,EAAAA,WAAW,EAAE9D,SAAS,CAAC6C,KAAV,CAAgB,CAAC,WAAD,EAAc,UAAd,CAAhB,CAlKc;AAmK3BkB,EAAAA,QAAQ,EAAE/D,SAAS,CAAC8B,IAnKO;;AAoK3B;AACF;AACA;AACA;AACEkC,EAAAA,gBAAgB,EAAEhE,SAAS,CAAC8B,IAxKD;;AAyK3B;AACF;AACA;AACA;AACEmC,EAAAA,aAAa,EAAEjE,SAAS,CAACuC,GA7KE;;AA8K3B;AACF;AACA;AACA;AACA;AACE2B,EAAAA,aAAa,EAAElE,SAAS,CAACqC,IAnLE;;AAoL3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE8B,EAAAA,iBAAiB,EAAEnE,SAAS,CAACqC,IA7LF;;AA8L3B;AACF;AACA;AACA;AACA;AACA;AACE+B,EAAAA,kBAAkB,EAAEpE,SAAS,CAACqC,IApMH;;AAqM3B;AACF;AACA;AACA;AACA;AACA;AACEgC,EAAAA,iBAAiB,EAAErE,SAAS,CAACqC,IA3MF;;AA4M3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEiC,EAAAA,2BAA2B,EAAEtE,SAAS,CAAC8B,IAtNZ;;AAuN3B;AACF;AACA;AACA;AACET,EAAAA,SAAS,EAAErB,SAAS,CAACkC,MA3NM;;AA4N3B;AACF;AACA;AACA;AACEqC,EAAAA,KAAK,EAAEvE,SAAS,CAACkC,MAhOU;;AAiO3B;AACF;AACA;AACEsC,EAAAA,EAAE,EAAExE,SAAS,CAACyE,SAAV,CAAoB,CAACzE,SAAS,CAAC0E,OAAV,CAAkB1E,SAAS,CAACyE,SAAV,CAAoB,CAACzE,SAAS,CAACqC,IAAX,EAAiBrC,SAAS,CAACkC,MAA3B,EAAmClC,SAAS,CAAC8B,IAA7C,CAApB,CAAlB,CAAD,EAA6F9B,SAAS,CAACqC,IAAvG,EAA6GrC,SAAS,CAACkC,MAAvH,CAApB,CApOuB;;AAqO3B;AACF;AACA;AACA;AACA;AACA;AACA;AACEyC,EAAAA,QAAQ,EAAE3E,SAAS,CAACgC,MA5OO;;AA6O3B;AACF;AACA;AACA;AACE4C,EAAAA,KAAK,EAAE5E,SAAS,CAACuC,GAjPU;;AAkP3B;AACF;AACA;AACA;AACA;AACEsC,EAAAA,IAAI,EAAE7E,SAAS,CAAC6C,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAAhB,CAvPqB;;AAwP3B;AACF;AACA;AACA;AACA;AACE9B,EAAAA,aAAa,EAAEf,SAAS,CAAC8E,KAAV,CAAgB;AAC7B9D,IAAAA,GAAG,EAAEhB,SAAS,CAACqC,IADc;AAE7BpB,IAAAA,KAAK,EAAEjB,SAAS,CAACqC,IAFY;AAG7BnB,IAAAA,IAAI,EAAElB,SAAS,CAACqC;AAHa,GAAhB,CA7PY;;AAkQ3B;AACF;AACA;AACE0C,EAAAA,KAAK,EAAE/E,SAAS,CAAC0E,OAAV,CAAkB1E,SAAS,CAAC6C,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAAhB,EAA0CmC,UAA5D,CArQoB;;AAsQ3B;AACF;AACA;AACA;AACE5D,EAAAA,WAAW,EAAEpB,SAAS,CAAC6C,KAAV,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AA1Qc,CAA7B;AA4QA,SAASvC,gBAAT","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { renderDateViewCalendar } from '../dateViewRenderers';\nimport { useStaticPicker } from '../internals/hooks/useStaticPicker';\nimport { validateDate } from '../internals';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/x/api/date-pickers/static-date-picker/)\n */\nconst StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  var _defaultizedProps$dis, _defaultizedProps$yea, _defaultizedProps$slo;\n  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker');\n  const displayStaticWrapperAs = (_defaultizedProps$dis = defaultizedProps.displayStaticWrapperAs) != null ? _defaultizedProps$dis : 'mobile';\n  const viewRenderers = _extends({\n    day: renderDateViewCalendar,\n    month: renderDateViewCalendar,\n    year: renderDateViewCalendar\n  }, defaultizedProps.viewRenderers);\n\n  // Props with the default values specific to the static variant\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    displayStaticWrapperAs,\n    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : displayStaticWrapperAs === 'mobile' ? 3 : 4,\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      toolbar: _extends({\n        hidden: displayStaticWrapperAs === 'desktop'\n      }, (_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useStaticPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'date',\n    validator: validateDate,\n    ref\n  });\n  return renderPicker();\n});\nStaticDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value` and `defaultValue` are empty.\n   * @deprecated Consider using `referenceDate` instead.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default \"mobile\"\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n  /**\n   * Months rendered per row.\n   * @default 3\n   */\n  monthsPerRow: PropTypes.oneOf([3, 4]),\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when component requests to be closed.\n   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.\n   * @deprecated Please avoid using as it will be removed in next major version.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Callback fired on year change.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} If `true` the date will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific month.\n   * @template TDate\n   * @param {TDate} month The month to test.\n   * @returns {boolean} If `true`, the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n  /**\n   * Disable specific year.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} If `true`, the year will be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func,\n    month: PropTypes.func,\n    year: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),\n  /**\n   * Years rendered per row.\n   * @default 3\n   */\n  yearsPerRow: PropTypes.oneOf([3, 4])\n};\nexport { StaticDatePicker };"]},"metadata":{},"sourceType":"module"}