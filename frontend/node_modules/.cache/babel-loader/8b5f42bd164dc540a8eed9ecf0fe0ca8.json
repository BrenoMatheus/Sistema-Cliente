{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/list.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './styles.css';\nimport { Grid, TextField } from '@mui/material';\nimport { formValidationSchema } from './DetailItemofLines';\nimport { ItemofLinesService } from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { useVForm } from '../../../../shared/forms';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AutoCompleteItem } from './AutoCompleteItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Notes = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  console.log(data);\n  const [changedAmout, setChangedAmout] = useState('');\n  const [changedTotal, setChangedTotal] = useState('');\n  const [changedItemID, setChangedItemID] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    formRef,\n    save,\n    saveAndClose,\n    isSaveAndClose\n  } = useVForm();\n  const {\n    id = 'nova'\n  } = useParams();\n  const navigate = useNavigate();\n  const [rows, setRows] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  /* async function handleSave(e, notes) {\n        e.style.cursor = 'default';\n        e.style.boxShadow = 'none';\n        if (changedNote && changedNote !== notes) {\n            await api.post(`/contents/${data._id}`, {\n                notes: changedNote,\n            });\n        }\n    } */\n\n  const handleSave = dados => {\n    formValidationSchema.validate(dados, {\n      abortEarly: false\n    }).then(dadosValidados => {\n      setIsLoading(true);\n\n      if (changedNote && changedNote !== dados) {\n        ItemofLinesService.updateById(Number(id), {\n          id: Number(id),\n          ...dadosValidados\n        }).then(result => {\n          setIsLoading(false);\n\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            if (isSaveAndClose()) {\n              navigate('/itemofLines');\n            }\n          }\n        });\n      }\n    }).catch(errors => {\n      var _formRef$current;\n\n      const validationErrors = {};\n      errors.inner.forEach(error => {\n        if (!error.path) return;\n        validationErrors[error.path] = error.message;\n      });\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors(validationErrors);\n    });\n  };\n\n  const handleDelete = id => {\n    if (confirm('Realmente deseja apagar?')) {\n      ItemofLinesService.deleteById(id).then(result => {\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          alert('Registro apagado com sucesso!');\n          navigate('/itemofLines');\n        }\n      });\n    }\n  };\n  /* async function handleEdit(e, priority) {\n    e.style.cursor = 'text';\n    e.style.borderRadius = '5px';\n    if (priority) {\n      e.style.boxShadow = '0 0 5px white';\n    } else {\n      e.style.boxShadow = '0 0 5px gray';\n    }\n  } */\n\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderBottom: 1,\n    spacing: {\n      xs: 0,\n      md: 0\n    },\n    columns: {\n      xs: 3,\n      sm: 6,\n      md: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 2,\n      sm: 4,\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(AutoCompleteItem, {\n        isExternalLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 2,\n      sm: 4,\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"standard\",\n        defaultValue: data.amount\n        /* onClick={(e) => handleEdit(e.target, data.priority)} */\n        ,\n        onChange: e => set(e.target.value),\n        onBlur: e => handleSave(e.target, data.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 2,\n      sm: 4,\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"standard\",\n        defaultValue: data.total\n        /* onClick={(e) => handleEdit(e.target, data.priority)} */\n        ,\n        onChange: e => setChangedNote(e.target.value)\n        /*  onBlur={(e) => handleSave(e.target, data.total)} */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"jKiAtPwiVSSL1425TSmrlyk/2yc=\", false, function () {\n  return [useVForm, useParams, useNavigate];\n});\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/list.tsx"],"names":["React","useState","Grid","TextField","formValidationSchema","ItemofLinesService","useVForm","useNavigate","useParams","AutoCompleteItem","Notes","data","console","log","changedAmout","setChangedAmout","changedTotal","setChangedTotal","changedItemID","setChangedItemID","isLoading","setIsLoading","formRef","save","saveAndClose","isSaveAndClose","id","navigate","rows","setRows","totalCount","setTotalCount","handleSave","dados","validate","abortEarly","then","dadosValidados","changedNote","updateById","Number","result","Error","alert","message","catch","errors","validationErrors","inner","forEach","error","path","current","setErrors","handleDelete","confirm","deleteById","xs","md","sm","amount","e","set","target","value","total","setChangedNote"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './styles.css';\n\nimport { Grid, TextField, TextFieldProps } from '@mui/material';\nimport * as yup from 'yup';\nimport { formValidationSchema } from './DetailItemofLines';\nimport {\n  IListItemofLine,\n  ItemofLinesService,\n} from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { IVFormErrors, VTextField, useVForm } from '../../../../shared/forms';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AutoCompleteItem } from './AutoCompleteItem';\n\ntype TVTextFieldProps = {\n  name: string;\n  data: IListItemofLine;\n};\n\ninterface IFormData {\n  orderID: number;\n  itemID: number;\n  amount: number;\n  total: number;\n}\n\nexport const Notes: React.FC<TVTextFieldProps> = ({ data }) => {\n  console.log(data);\n\n  const [changedAmout, setChangedAmout] = useState('');\n  const [changedTotal, setChangedTotal] = useState('');\n  const [changedItemID, setChangedItemID] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { formRef, save, saveAndClose, isSaveAndClose } = useVForm();\n  const { id = 'nova' } = useParams<'id'>();\n  const navigate = useNavigate();\n  const [rows, setRows] = useState<IListItemofLine[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n  \n  /* async function handleSave(e, notes) {\n        e.style.cursor = 'default';\n        e.style.boxShadow = 'none';\n        if (changedNote && changedNote !== notes) {\n            await api.post(`/contents/${data._id}`, {\n                notes: changedNote,\n            });\n        }\n    } */\n  const handleSave = (dados: IFormData) => {\n    formValidationSchema\n      .validate(dados, { abortEarly: false })\n      .then((dadosValidados) => {\n        setIsLoading(true);\n        \n        if (changedNote && changedNote !== dados) {\n         \n\n          ItemofLinesService.updateById(Number(id), {\n            id: Number(id),\n            ...dadosValidados,\n          }).then((result) => {\n            setIsLoading(false);\n\n            if (result instanceof Error) {\n              alert(result.message);\n            } else {\n              if (isSaveAndClose()) {\n                navigate('/itemofLines');\n              }\n            }\n          });\n      }\n\n          \n        \n      })\n      .catch((errors: yup.ValidationError) => {\n        const validationErrors: IVFormErrors = {};\n\n        errors.inner.forEach((error) => {\n          if (!error.path) return;\n\n          validationErrors[error.path] = error.message;\n        });\n\n        formRef.current?.setErrors(validationErrors);\n      });\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm('Realmente deseja apagar?')) {\n      ItemofLinesService.deleteById(id).then((result) => {\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          alert('Registro apagado com sucesso!');\n          navigate('/itemofLines');\n        }\n      });\n    }\n  };\n\n\n  /* async function handleEdit(e, priority) {\n    e.style.cursor = 'text';\n    e.style.borderRadius = '5px';\n    if (priority) {\n      e.style.boxShadow = '0 0 5px white';\n    } else {\n      e.style.boxShadow = '0 0 5px gray';\n    }\n  } */\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      borderBottom={1}\n      spacing={{ xs: 0, md: 0 }}\n      columns={{ xs: 3, sm: 6, md: 8 }}\n    >\n      <Grid item xs={2} sm={4} md={3}>\n        <AutoCompleteItem isExternalLoading={isLoading} />\n      </Grid>\n      <Grid item xs={2} sm={4} md={2}>\n        <TextField\n          variant=\"standard\"\n          defaultValue={data.amount}\n          /* onClick={(e) => handleEdit(e.target, data.priority)} */\n          onChange={(e) => set(e.target.value)}\n          onBlur={e => handleSave(e.target, data.amount)}\n        />\n      </Grid>\n      <Grid item xs={2} sm={4} md={2}>\n        <TextField\n          variant=\"standard\"\n          defaultValue={data.total}\n          \n          /* onClick={(e) => handleEdit(e.target, data.priority)} */\n          onChange={(e) => setChangedNote(e.target.value)}\n          /*  onBlur={(e) => handleSave(e.target, data.total)} */\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}