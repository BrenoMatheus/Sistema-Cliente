{"ast":null,"code":"import _slicedToArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\n\nexport var useValueWithTimezone = function useValueWithTimezone(_ref3) {\n  var timezoneProp = _ref3.timezone,\n      valueProp = _ref3.value,\n      defaultValue = _ref3.defaultValue,\n      onChange = _ref3.onChange,\n      valueManager = _ref3.valueManager;\n\n  var _ref, _ref2;\n\n  var utils = useUtils();\n  var firstDefaultValue = React.useRef(defaultValue);\n  var inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;\n  var inputTimezone = React.useMemo(function () {\n    return valueManager.getTimezone(utils, inputValue);\n  }, [utils, valueManager, inputValue]);\n  var setInputTimezone = useEventCallback(function (newValue) {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  var timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';\n  var valueWithTimezoneToRender = React.useMemo(function () {\n    return valueManager.setTimezone(utils, timezoneToRender, inputValue);\n  }, [valueManager, utils, timezoneToRender, inputValue]);\n  var handleValueChange = useEventCallback(function (newValue) {\n    var newValueWithInputTimezone = setInputTimezone(newValue);\n\n    for (var _len = arguments.length, otherParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      otherParams[_key - 1] = arguments[_key];\n    }\n\n    onChange == null || onChange.apply(void 0, [newValueWithInputTimezone].concat(otherParams));\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange: handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\n\nexport var useControlledValueWithTimezone = function useControlledValueWithTimezone(_ref4) {\n  var name = _ref4.name,\n      timezoneProp = _ref4.timezone,\n      valueProp = _ref4.value,\n      defaultValue = _ref4.defaultValue,\n      onChangeProp = _ref4.onChange,\n      valueManager = _ref4.valueManager;\n\n  var _useControlled = useControlled({\n    name: name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : valueManager.emptyValue\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      valueWithInputTimezone = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var onChange = useEventCallback(function (newValue) {\n    setValue(newValue);\n\n    for (var _len2 = arguments.length, otherParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      otherParams[_key2 - 1] = arguments[_key2];\n    }\n\n    onChangeProp == null || onChangeProp.apply(void 0, [newValue].concat(otherParams));\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange: onChange,\n    valueManager: valueManager\n  });\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.js"],"names":["React","useEventCallback","useControlled","useUtils","useValueWithTimezone","timezoneProp","timezone","valueProp","value","defaultValue","onChange","valueManager","_ref","_ref2","utils","firstDefaultValue","useRef","inputValue","current","emptyValue","inputTimezone","useMemo","getTimezone","setInputTimezone","newValue","setTimezone","timezoneToRender","valueWithTimezoneToRender","handleValueChange","newValueWithInputTimezone","otherParams","useControlledValueWithTimezone","name","onChangeProp","state","controlled","default","valueWithInputTimezone","setValue","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\nexport const useValueWithTimezone = ({\n  timezone: timezoneProp,\n  value: valueProp,\n  defaultValue,\n  onChange,\n  valueManager\n}) => {\n  var _ref, _ref2;\n  const utils = useUtils();\n  const firstDefaultValue = React.useRef(defaultValue);\n  const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;\n  const inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);\n  const setInputTimezone = useEventCallback(newValue => {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';\n  const valueWithTimezoneToRender = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);\n  const handleValueChange = useEventCallback((newValue, ...otherParams) => {\n    const newValueWithInputTimezone = setInputTimezone(newValue);\n    onChange == null || onChange(newValueWithInputTimezone, ...otherParams);\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\nexport const useControlledValueWithTimezone = ({\n  name,\n  timezone: timezoneProp,\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  valueManager\n}) => {\n  const [valueWithInputTimezone, setValue] = useControlled({\n    name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : valueManager.emptyValue\n  });\n  const onChange = useEventCallback((newValue, ...otherParams) => {\n    setValue(newValue);\n    onChangeProp == null || onChangeProp(newValue, ...otherParams);\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange,\n    valueManager\n  });\n};"]},"metadata":{},"sourceType":"module"}