{"ast":null,"code":"import _toConsumableArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useControlled from '@mui/utils/useControlled';\nimport { useTheme } from '@mui/material/styles';\nimport { useUtils, useLocaleText, useLocalizationContext } from '../useUtils';\nimport { addPositionPropertiesToSections, splitFormatIntoSections, mergeDateIntoReferenceDate, getSectionsBoundaries, validateSections, getDateFromDateSections } from './useField.utils';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\nimport { getSectionTypeGranularity } from '../../utils/getDefaultReferenceDate';\nexport var useFieldState = function useFieldState(params) {\n  var utils = useUtils();\n  var localeText = useLocaleText();\n  var adapter = useLocalizationContext();\n  var theme = useTheme();\n  var isRTL = theme.direction === 'rtl';\n  var valueManager = params.valueManager,\n      fieldValueManager = params.fieldValueManager,\n      valueType = params.valueType,\n      validator = params.validator,\n      internalProps = params.internalProps,\n      _params$internalProps = params.internalProps,\n      valueProp = _params$internalProps.value,\n      defaultValue = _params$internalProps.defaultValue,\n      referenceDateProp = _params$internalProps.referenceDate,\n      onChange = _params$internalProps.onChange,\n      format = _params$internalProps.format,\n      _params$internalProps2 = _params$internalProps.formatDensity,\n      formatDensity = _params$internalProps2 === void 0 ? 'dense' : _params$internalProps2,\n      selectedSectionsProp = _params$internalProps.selectedSections,\n      onSelectedSectionsChange = _params$internalProps.onSelectedSectionsChange,\n      _params$internalProps3 = _params$internalProps.shouldRespectLeadingZeros,\n      shouldRespectLeadingZeros = _params$internalProps3 === void 0 ? false : _params$internalProps3,\n      timezoneProp = _params$internalProps.timezone;\n\n  var _useValueWithTimezone = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue: defaultValue,\n    onChange: onChange,\n    valueManager: valueManager\n  }),\n      timezone = _useValueWithTimezone.timezone,\n      valueFromTheOutside = _useValueWithTimezone.value,\n      handleValueChange = _useValueWithTimezone.handleValueChange;\n\n  var sectionsValueBoundaries = React.useMemo(function () {\n    return getSectionsBoundaries(utils, timezone);\n  }, [utils, timezone]);\n  var getSectionsFromValue = React.useCallback(function (value) {\n    var fallbackSections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, function (date) {\n      return splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n    });\n  }, [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);\n  var placeholder = React.useMemo(function () {\n    return fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL);\n  }, [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);\n\n  var _React$useState = React.useState(function () {\n    var sections = getSectionsFromValue(valueFromTheOutside);\n    validateSections(sections, valueType);\n    var stateWithoutReferenceDate = {\n      sections: sections,\n      value: valueFromTheOutside,\n      referenceValue: valueManager.emptyValue,\n      tempValueStrAndroid: null\n    };\n    var granularity = getSectionTypeGranularity(sections);\n    var referenceValue = valueManager.getInitialReferenceValue({\n      referenceDate: referenceDateProp,\n      value: valueFromTheOutside,\n      utils: utils,\n      props: internalProps,\n      granularity: granularity,\n      timezone: timezone\n    });\n    return _extends({}, stateWithoutReferenceDate, {\n      referenceValue: referenceValue\n    });\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _useControlled = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'useField',\n    state: 'selectedSectionIndexes'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      selectedSections = _useControlled2[0],\n      innerSetSelectedSections = _useControlled2[1];\n\n  var setSelectedSections = function setSelectedSections(newSelectedSections) {\n    innerSetSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n    setState(function (prevState) {\n      return _extends({}, prevState, {\n        selectedSectionQuery: null\n      });\n    });\n  };\n\n  var selectedSectionIndexes = React.useMemo(function () {\n    if (selectedSections == null) {\n      return null;\n    }\n\n    if (selectedSections === 'all') {\n      return {\n        startIndex: 0,\n        endIndex: state.sections.length - 1,\n        shouldSelectBoundarySelectors: true\n      };\n    }\n\n    if (typeof selectedSections === 'number') {\n      return {\n        startIndex: selectedSections,\n        endIndex: selectedSections\n      };\n    }\n\n    if (typeof selectedSections === 'string') {\n      var selectedSectionIndex = state.sections.findIndex(function (section) {\n        return section.type === selectedSections;\n      });\n      return {\n        startIndex: selectedSectionIndex,\n        endIndex: selectedSectionIndex\n      };\n    }\n\n    return selectedSections;\n  }, [selectedSections, state.sections]);\n\n  var publishValue = function publishValue(_ref) {\n    var value = _ref.value,\n        referenceValue = _ref.referenceValue,\n        sections = _ref.sections;\n    setState(function (prevState) {\n      return _extends({}, prevState, {\n        sections: sections,\n        value: value,\n        referenceValue: referenceValue,\n        tempValueStrAndroid: null\n      });\n    });\n\n    if (valueManager.areValuesEqual(utils, state.value, value)) {\n      return;\n    }\n\n    var context = {\n      validationError: validator({\n        adapter: adapter,\n        value: value,\n        props: _extends({}, internalProps, {\n          value: value,\n          timezone: timezone\n        })\n      })\n    };\n    handleValueChange(value, context);\n  };\n\n  var setSectionValue = function setSectionValue(sectionIndex, newSectionValue) {\n    var newSections = _toConsumableArray(state.sections);\n\n    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {\n      value: newSectionValue,\n      modified: true\n    });\n    return addPositionPropertiesToSections(newSections, isRTL);\n  };\n\n  var clearValue = function clearValue() {\n    publishValue({\n      value: valueManager.emptyValue,\n      referenceValue: state.referenceValue,\n      sections: getSectionsFromValue(valueManager.emptyValue)\n    });\n  };\n\n  var clearActiveSection = function clearActiveSection() {\n    if (selectedSectionIndexes == null) {\n      return;\n    }\n\n    var activeSection = state.sections[selectedSectionIndexes.startIndex];\n    var activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    var nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(function (section) {\n      return section.value !== '';\n    }).length;\n    var hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);\n    var newSections = setSectionValue(selectedSectionIndexes.startIndex, '');\n    var newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));\n    var newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n\n    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {\n      publishValue(_extends({}, newValues, {\n        sections: newSections\n      }));\n    } else {\n      setState(function (prevState) {\n        return _extends({}, prevState, newValues, {\n          sections: newSections,\n          tempValueStrAndroid: null\n        });\n      });\n    }\n  };\n\n  var updateValueFromValueStr = function updateValueFromValueStr(valueStr) {\n    var parseDateStr = function parseDateStr(dateStr, referenceDate) {\n      var date = utils.parse(dateStr, format);\n\n      if (date == null || !utils.isValid(date)) {\n        return null;\n      }\n\n      var sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);\n    };\n\n    var newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);\n    var newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);\n    publishValue({\n      value: newValue,\n      referenceValue: newReferenceValue,\n      sections: getSectionsFromValue(newValue, state.sections)\n    });\n  };\n\n  var updateSectionValue = function updateSectionValue(_ref2) {\n    var activeSection = _ref2.activeSection,\n        newSectionValue = _ref2.newSectionValue,\n        shouldGoToNextSection = _ref2.shouldGoToNextSection;\n\n    /**\n     * 1. Decide which section should be focused\n     */\n    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {\n      setSelectedSections(selectedSectionIndexes.startIndex + 1);\n    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n      setSelectedSections(selectedSectionIndexes.startIndex);\n    }\n    /**\n     * 2. Try to build a valid date from the new section value\n     */\n\n\n    var activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    var newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);\n    var newActiveDateSections = activeDateManager.getSections(newSections);\n    var newActiveDate = getDateFromDateSections(utils, newActiveDateSections);\n    var values;\n    var shouldPublish;\n    /**\n     * If the new date is valid,\n     * Then we merge the value of the modified sections into the reference date.\n     * This makes sure that we don't lose some information of the initial date (like the time on a date field).\n     */\n\n    if (newActiveDate != null && utils.isValid(newActiveDate)) {\n      var mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);\n      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);\n      shouldPublish = true;\n    } else {\n      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));\n    }\n    /**\n     * Publish or update the internal state with the new value and sections.\n     */\n\n\n    if (shouldPublish) {\n      return publishValue(_extends({}, values, {\n        sections: newSections\n      }));\n    }\n\n    return setState(function (prevState) {\n      return _extends({}, prevState, values, {\n        sections: newSections,\n        tempValueStrAndroid: null\n      });\n    });\n  };\n\n  var setTempAndroidValueStr = function setTempAndroidValueStr(tempValueStrAndroid) {\n    return setState(function (prev) {\n      return _extends({}, prev, {\n        tempValueStrAndroid: tempValueStrAndroid\n      });\n    });\n  };\n\n  React.useEffect(function () {\n    var sections = getSectionsFromValue(state.value);\n    validateSections(sections, valueType);\n    setState(function (prevState) {\n      return _extends({}, prevState, {\n        sections: sections\n      });\n    });\n  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(function () {\n    var shouldUpdate = false;\n\n    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {\n      shouldUpdate = true;\n    } else {\n      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);\n    }\n\n    if (shouldUpdate) {\n      setState(function (prevState) {\n        return _extends({}, prevState, {\n          value: valueFromTheOutside,\n          referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),\n          sections: getSectionsFromValue(valueFromTheOutside)\n        });\n      });\n    }\n  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    state: state,\n    selectedSectionIndexes: selectedSectionIndexes,\n    setSelectedSections: setSelectedSections,\n    clearValue: clearValue,\n    clearActiveSection: clearActiveSection,\n    updateSectionValue: updateSectionValue,\n    updateValueFromValueStr: updateValueFromValueStr,\n    setTempAndroidValueStr: setTempAndroidValueStr,\n    sectionsValueBoundaries: sectionsValueBoundaries,\n    placeholder: placeholder,\n    timezone: timezone\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js"],"names":["_extends","React","useControlled","useTheme","useUtils","useLocaleText","useLocalizationContext","addPositionPropertiesToSections","splitFormatIntoSections","mergeDateIntoReferenceDate","getSectionsBoundaries","validateSections","getDateFromDateSections","useValueWithTimezone","getSectionTypeGranularity","useFieldState","params","utils","localeText","adapter","theme","isRTL","direction","valueManager","fieldValueManager","valueType","validator","internalProps","valueProp","value","defaultValue","referenceDateProp","referenceDate","onChange","format","formatDensity","selectedSectionsProp","selectedSections","onSelectedSectionsChange","shouldRespectLeadingZeros","timezoneProp","timezone","valueFromTheOutside","handleValueChange","sectionsValueBoundaries","useMemo","getSectionsFromValue","useCallback","fallbackSections","date","placeholder","getValueStrFromSections","emptyValue","useState","sections","stateWithoutReferenceDate","referenceValue","tempValueStrAndroid","granularity","getInitialReferenceValue","props","state","setState","controlled","default","name","innerSetSelectedSections","setSelectedSections","newSelectedSections","prevState","selectedSectionQuery","selectedSectionIndexes","startIndex","endIndex","length","shouldSelectBoundarySelectors","selectedSectionIndex","findIndex","section","type","publishValue","areValuesEqual","context","validationError","setSectionValue","sectionIndex","newSectionValue","newSections","modified","clearValue","clearActiveSection","activeSection","activeDateManager","getActiveDateManager","nonEmptySectionCountBefore","getSections","filter","hasNoOtherNonEmptySections","newActiveDate","Date","newValues","getNewValuesFromNewActiveDate","isValid","updateValueFromValueStr","valueStr","parseDateStr","dateStr","parse","newValue","parseValueStr","newReferenceValue","updateReferenceValue","updateSectionValue","shouldGoToNextSection","newActiveDateSections","values","shouldPublish","mergedDate","setTempAndroidValueStr","prev","useEffect","locale","shouldUpdate","getTimezone"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useControlled from '@mui/utils/useControlled';\nimport { useTheme } from '@mui/material/styles';\nimport { useUtils, useLocaleText, useLocalizationContext } from '../useUtils';\nimport { addPositionPropertiesToSections, splitFormatIntoSections, mergeDateIntoReferenceDate, getSectionsBoundaries, validateSections, getDateFromDateSections } from './useField.utils';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\nimport { getSectionTypeGranularity } from '../../utils/getDefaultReferenceDate';\nexport const useFieldState = params => {\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const adapter = useLocalizationContext();\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const {\n    valueManager,\n    fieldValueManager,\n    valueType,\n    validator,\n    internalProps,\n    internalProps: {\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      onChange,\n      format,\n      formatDensity = 'dense',\n      selectedSections: selectedSectionsProp,\n      onSelectedSectionsChange,\n      shouldRespectLeadingZeros = false,\n      timezone: timezoneProp\n    }\n  } = params;\n  const {\n    timezone,\n    value: valueFromTheOutside,\n    handleValueChange\n  } = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  });\n  const sectionsValueBoundaries = React.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);\n  const getSectionsFromValue = React.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);\n  const placeholder = React.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);\n  const [state, setState] = React.useState(() => {\n    const sections = getSectionsFromValue(valueFromTheOutside);\n    validateSections(sections, valueType);\n    const stateWithoutReferenceDate = {\n      sections,\n      value: valueFromTheOutside,\n      referenceValue: valueManager.emptyValue,\n      tempValueStrAndroid: null\n    };\n    const granularity = getSectionTypeGranularity(sections);\n    const referenceValue = valueManager.getInitialReferenceValue({\n      referenceDate: referenceDateProp,\n      value: valueFromTheOutside,\n      utils,\n      props: internalProps,\n      granularity,\n      timezone\n    });\n    return _extends({}, stateWithoutReferenceDate, {\n      referenceValue\n    });\n  });\n  const [selectedSections, innerSetSelectedSections] = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'useField',\n    state: 'selectedSectionIndexes'\n  });\n  const setSelectedSections = newSelectedSections => {\n    innerSetSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n    setState(prevState => _extends({}, prevState, {\n      selectedSectionQuery: null\n    }));\n  };\n  const selectedSectionIndexes = React.useMemo(() => {\n    if (selectedSections == null) {\n      return null;\n    }\n    if (selectedSections === 'all') {\n      return {\n        startIndex: 0,\n        endIndex: state.sections.length - 1,\n        shouldSelectBoundarySelectors: true\n      };\n    }\n    if (typeof selectedSections === 'number') {\n      return {\n        startIndex: selectedSections,\n        endIndex: selectedSections\n      };\n    }\n    if (typeof selectedSections === 'string') {\n      const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);\n      return {\n        startIndex: selectedSectionIndex,\n        endIndex: selectedSectionIndex\n      };\n    }\n    return selectedSections;\n  }, [selectedSections, state.sections]);\n  const publishValue = ({\n    value,\n    referenceValue,\n    sections\n  }) => {\n    setState(prevState => _extends({}, prevState, {\n      sections,\n      value,\n      referenceValue,\n      tempValueStrAndroid: null\n    }));\n    if (valueManager.areValuesEqual(utils, state.value, value)) {\n      return;\n    }\n    const context = {\n      validationError: validator({\n        adapter,\n        value,\n        props: _extends({}, internalProps, {\n          value,\n          timezone\n        })\n      })\n    };\n    handleValueChange(value, context);\n  };\n  const setSectionValue = (sectionIndex, newSectionValue) => {\n    const newSections = [...state.sections];\n    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {\n      value: newSectionValue,\n      modified: true\n    });\n    return addPositionPropertiesToSections(newSections, isRTL);\n  };\n  const clearValue = () => {\n    publishValue({\n      value: valueManager.emptyValue,\n      referenceValue: state.referenceValue,\n      sections: getSectionsFromValue(valueManager.emptyValue)\n    });\n  };\n  const clearActiveSection = () => {\n    if (selectedSectionIndexes == null) {\n      return;\n    }\n    const activeSection = state.sections[selectedSectionIndexes.startIndex];\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;\n    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');\n    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));\n    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {\n      publishValue(_extends({}, newValues, {\n        sections: newSections\n      }));\n    } else {\n      setState(prevState => _extends({}, prevState, newValues, {\n        sections: newSections,\n        tempValueStrAndroid: null\n      }));\n    }\n  };\n  const updateValueFromValueStr = valueStr => {\n    const parseDateStr = (dateStr, referenceDate) => {\n      const date = utils.parse(dateStr, format);\n      if (date == null || !utils.isValid(date)) {\n        return null;\n      }\n      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);\n    };\n    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);\n    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);\n    publishValue({\n      value: newValue,\n      referenceValue: newReferenceValue,\n      sections: getSectionsFromValue(newValue, state.sections)\n    });\n  };\n  const updateSectionValue = ({\n    activeSection,\n    newSectionValue,\n    shouldGoToNextSection\n  }) => {\n    /**\n     * 1. Decide which section should be focused\n     */\n    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {\n      setSelectedSections(selectedSectionIndexes.startIndex + 1);\n    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n      setSelectedSections(selectedSectionIndexes.startIndex);\n    }\n\n    /**\n     * 2. Try to build a valid date from the new section value\n     */\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);\n    const newActiveDateSections = activeDateManager.getSections(newSections);\n    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);\n    let values;\n    let shouldPublish;\n\n    /**\n     * If the new date is valid,\n     * Then we merge the value of the modified sections into the reference date.\n     * This makes sure that we don't lose some information of the initial date (like the time on a date field).\n     */\n    if (newActiveDate != null && utils.isValid(newActiveDate)) {\n      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);\n      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);\n      shouldPublish = true;\n    } else {\n      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));\n    }\n\n    /**\n     * Publish or update the internal state with the new value and sections.\n     */\n    if (shouldPublish) {\n      return publishValue(_extends({}, values, {\n        sections: newSections\n      }));\n    }\n    return setState(prevState => _extends({}, prevState, values, {\n      sections: newSections,\n      tempValueStrAndroid: null\n    }));\n  };\n  const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {\n    tempValueStrAndroid\n  }));\n  React.useEffect(() => {\n    const sections = getSectionsFromValue(state.value);\n    validateSections(sections, valueType);\n    setState(prevState => _extends({}, prevState, {\n      sections\n    }));\n  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    let shouldUpdate = false;\n    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {\n      shouldUpdate = true;\n    } else {\n      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);\n    }\n    if (shouldUpdate) {\n      setState(prevState => _extends({}, prevState, {\n        value: valueFromTheOutside,\n        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),\n        sections: getSectionsFromValue(valueFromTheOutside)\n      }));\n    }\n  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  };\n};"]},"metadata":{},"sourceType":"module"}