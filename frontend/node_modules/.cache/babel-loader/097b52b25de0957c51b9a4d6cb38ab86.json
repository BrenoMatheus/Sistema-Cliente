{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/equipment/components/AutoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { Autocomplete, CircularProgress, TextField } from '@mui/material';\nimport { useDebounce } from '../../../shared/hooks';\nimport { useField } from '@unform/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AutoComplete = _ref => {\n  _s();\n\n  let {\n    isExternalLoading = false\n  } = _ref;\n  const {\n    fieldName,\n    registerField,\n    defaultValue,\n    error,\n    clearError\n  } = useField('id');\n  const {\n    debounce\n  } = useDebounce();\n  const [selectedId, setSelectedId] = useState(defaultValue);\n  const [opcoes, setOpcoes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [busca, setBusca] = useState('');\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => selectedId,\n      setValue: (_, newSelectedId) => setSelectedId(newSelectedId)\n    });\n  }, [registerField, fieldName, selectedId]);\n  useEffect(() => {\n    setIsLoading(true);\n    debounce(() => {\n      setIsLoading(false);\n      const data = [{\n        id: 1,\n        label: 'Combustão'\n      }, {\n        id: 2,\n        label: 'Eletrica'\n      }, {\n        id: 2,\n        label: 'Retratil'\n      }];\n      setOpcoes(data);\n    });\n  }, [busca, selectedId]);\n  const autoCompleteSelectedOption = useMemo(() => {\n    if (!selectedId) return null;\n    const selectedOption = opcoes.find(opcao => opcao.id === selectedId);\n    if (!selectedOption) return null;\n    return selectedOption;\n  }, [selectedId, opcoes]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    openText: \"Abrir\",\n    closeText: \"Fechar\",\n    noOptionsText: \"Sem op\\xE7\\xF5es\",\n    loadingText: \"Carregando...\",\n    disablePortal: true,\n    options: opcoes,\n    loading: isLoading,\n    disabled: isExternalLoading,\n    value: autoCompleteSelectedOption,\n    onInputChange: (_, newValue) => setBusca(newValue),\n    onChange: (_, newValue) => {\n      setSelectedId(newValue === null || newValue === void 0 ? void 0 : newValue.id);\n      setBusca('');\n      clearError();\n    },\n    popupIcon: isExternalLoading || isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: 28\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 53\n    }, this) : undefined,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Type\",\n      error: !!error,\n      helperText: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoComplete, \"y+Bgb2X7SPauLgUl3d7qQzaoJm8=\", false, function () {\n  return [useField, useDebounce];\n});\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/equipment/components/AutoComplete.tsx"],"names":["useEffect","useMemo","useState","Autocomplete","CircularProgress","TextField","useDebounce","useField","AutoComplete","isExternalLoading","fieldName","registerField","defaultValue","error","clearError","debounce","selectedId","setSelectedId","opcoes","setOpcoes","isLoading","setIsLoading","busca","setBusca","name","getValue","setValue","_","newSelectedId","data","id","label","autoCompleteSelectedOption","selectedOption","find","opcao","newValue","undefined","params"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { Autocomplete, CircularProgress, TextField } from '@mui/material';\n\nimport { EquipmentsService } from '../../../shared/services/api/equipments/EquipmentsService';\nimport { useDebounce } from '../../../shared/hooks';\nimport { useField } from '@unform/core';\n\n\ntype TAutoCompleteOption = {\n  id: number;\n  label: string;\n}\n\ninterface IAutoCompleteProps {\n  isExternalLoading?: boolean;\n}\nexport const AutoComplete: React.FC<IAutoCompleteProps> = ({ isExternalLoading = false }) => {\n  const { fieldName, registerField, defaultValue, error, clearError } = useField('id');\n  const { debounce } = useDebounce();\n\n  const [selectedId, setSelectedId] = useState<number | undefined>(defaultValue);\n\n  const [opcoes, setOpcoes] = useState<TAutoCompleteOption[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [busca, setBusca] = useState('');\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => selectedId,\n      setValue: (_, newSelectedId) => setSelectedId(newSelectedId),\n    });\n  }, [registerField, fieldName, selectedId]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    debounce(() => {\n      setIsLoading(false);\n      const data = [{ id: 1, label: 'Combustão' }, { id: 2, label: 'Eletrica' }, { id: 2, label: 'Retratil' }];\n      setOpcoes(data);\n     \n    });\n  }, [busca, selectedId]);\n\n  const autoCompleteSelectedOption = useMemo(() => {\n    if (!selectedId) return null;\n\n    const selectedOption = opcoes.find(opcao => opcao.id === selectedId);\n    if (!selectedOption) return null;\n\n    return selectedOption;\n  }, [selectedId, opcoes]);\n\n\n  return (\n    <Autocomplete\n      openText='Abrir'\n      closeText='Fechar'\n      noOptionsText='Sem opções'\n      loadingText='Carregando...'\n\n      disablePortal\n\n      options={opcoes}\n      loading={isLoading}\n      disabled={isExternalLoading}\n      value={autoCompleteSelectedOption}\n      onInputChange={(_, newValue) => setBusca(newValue)}\n      onChange={(_, newValue) => { setSelectedId(newValue?.id); setBusca(''); clearError(); }}\n      popupIcon={(isExternalLoading || isLoading) ? <CircularProgress size={28} /> : undefined}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n\n          label=\"Type\"\n          error={!!error}\n          helperText={error}\n        />\n      )}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}