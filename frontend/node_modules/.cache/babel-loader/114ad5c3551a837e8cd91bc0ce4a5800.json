{"ast":null,"code":"/**\n * Converts a function to a curried function that accepts arguments in reverse\n * order.\n *\n * @param fn - The function to convert to FP\n * @param arity - The arity of the function\n * @param curriedArgs - The curried arguments\n *\n * @returns FP version of the function\n *\n * @private\n */\nexport function convertToFP(fn, arity) {\n  let curriedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return curriedArgs.length >= arity ? fn(...curriedArgs.slice(0, arity).reverse()) : function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return convertToFP(fn, arity, curriedArgs.concat(args));\n  };\n}","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/date-fns/fp/_lib/convertToFP.mjs"],"names":["convertToFP","fn","arity","curriedArgs","length","slice","reverse","args","concat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAT,CAAqBC,EAArB,EAAyBC,KAAzB,EAAkD;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AACvD,SAAOA,WAAW,CAACC,MAAZ,IAAsBF,KAAtB,GACHD,EAAE,CAAC,GAAGE,WAAW,CAACE,KAAZ,CAAkB,CAAlB,EAAqBH,KAArB,EAA4BI,OAA5B,EAAJ,CADC,GAEH;AAAA,sCAAIC,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAaP,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,WAAW,CAACK,MAAZ,CAAmBD,IAAnB,CAAZ,CAAxB;AAAA,GAFJ;AAGD","sourcesContent":["/**\n * Converts a function to a curried function that accepts arguments in reverse\n * order.\n *\n * @param fn - The function to convert to FP\n * @param arity - The arity of the function\n * @param curriedArgs - The curried arguments\n *\n * @returns FP version of the function\n *\n * @private\n */\nexport function convertToFP(fn, arity, curriedArgs = []) {\n  return curriedArgs.length >= arity\n    ? fn(...curriedArgs.slice(0, arity).reverse())\n    : (...args) => convertToFP(fn, arity, curriedArgs.concat(args));\n}\n"]},"metadata":{},"sourceType":"module"}