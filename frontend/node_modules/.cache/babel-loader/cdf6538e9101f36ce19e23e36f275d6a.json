{"ast":null,"code":"import { Environment } from '../../../environment';\nimport { Api } from '../axios-config';\n\nconst getAll = async function () {\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  try {\n    const urlRelativa = `/cidades?_page=${page}&_limit=${Environment.LIMITE_DE_LINHAS}&nome_like=${filter}&id_like=${id}`;\n    const {\n      data,\n      headers\n    } = await Api.get(urlRelativa);\n\n    if (data) {\n      return {\n        data,\n        totalCount: Number(headers['x-total-count'] || Environment.LIMITE_DE_LINHAS)\n      };\n    }\n\n    return new Error('Erro ao listar os registros.');\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao listar os registros.');\n  }\n};\n\nconst getById = async id => {\n  try {\n    const {\n      data\n    } = await Api.get(`/cidades/${id}`);\n\n    if (data) {\n      return data;\n    }\n\n    return new Error('Erro ao consultar o registro.');\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao consultar o registro.');\n  }\n};\n\nconst create = async dados => {\n  try {\n    const {\n      data\n    } = await Api.post('/cidades', dados);\n\n    if (data) {\n      return data.id;\n    }\n\n    return new Error('Erro ao criar o registro.');\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao criar o registro.');\n  }\n};\n\nconst updateById = async (id, dados) => {\n  try {\n    await Api.put(`/cidades/${id}`, dados);\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao atualizar o registro.');\n  }\n};\n\nconst deleteById = async id => {\n  try {\n    await Api.delete(`/cidades/${id}`);\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao apagar o registro.');\n  }\n};\n\nexport const CidadesService = {\n  getAll,\n  create,\n  getById,\n  updateById,\n  deleteById\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Site Node-Type-React/frontend/src/shared/services/api/cidades/CidadesService.ts"],"names":["Environment","Api","getAll","page","filter","id","urlRelativa","LIMITE_DE_LINHAS","data","headers","get","totalCount","Number","Error","error","console","message","getById","create","dados","post","updateById","put","deleteById","delete","CidadesService"],"mappings":"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","sourcesContent":["import { Environment } from '../../../environment';\nimport { Api } from '../axios-config';\n\n\nexport interface IListagemCidade {\n  id: number;\n  nome: string;\n}\n\nexport interface IDetalheCidade {\n  id: number;\n  nome: string;\n}\n\ntype TCidadesComTotalCount = {\n  data: IListagemCidade[];\n  totalCount: number;\n}\n\nconst getAll = async (page = 1, filter = '', id = ''): Promise<TCidadesComTotalCount | Error> => {\n  try {\n    const urlRelativa = `/cidades?_page=${page}&_limit=${Environment.LIMITE_DE_LINHAS}&nome_like=${filter}&id_like=${id}`;\n\n    const { data, headers } = await Api.get(urlRelativa);\n\n    if (data) {\n      return {\n        data,\n        totalCount: Number(headers['x-total-count'] || Environment.LIMITE_DE_LINHAS),\n      };\n    }\n\n    return new Error('Erro ao listar os registros.');\n  } catch (error) {\n    console.error(error);\n    return new Error((error as { message: string }).message || 'Erro ao listar os registros.');\n  }\n};\n\nconst getById = async (id: number): Promise<IDetalheCidade | Error> => {\n  try {\n    const { data } = await Api.get(`/cidades/${id}`);\n\n    if (data) {\n      return data;\n    }\n\n    return new Error('Erro ao consultar o registro.');\n  } catch (error) {\n    console.error(error);\n    return new Error((error as { message: string }).message || 'Erro ao consultar o registro.');\n  }\n};\n\nconst create = async (dados: Omit<IDetalheCidade, 'id'>): Promise<number | Error> => {\n  try {\n    const { data } = await Api.post<IDetalheCidade>('/cidades', dados);\n\n    if (data) {\n      return data.id;\n    }\n\n    return new Error('Erro ao criar o registro.');\n  } catch (error) {\n    console.error(error);\n    return new Error((error as { message: string }).message || 'Erro ao criar o registro.');\n  }\n};\n\nconst updateById = async (id: number, dados: IDetalheCidade): Promise<void | Error> => {\n  try {\n    await Api.put(`/cidades/${id}`, dados);\n  } catch (error) {\n    console.error(error);\n    return new Error((error as { message: string }).message || 'Erro ao atualizar o registro.');\n  }\n};\n\nconst deleteById = async (id: number): Promise<void | Error> => {\n  try {\n    await Api.delete(`/cidades/${id}`);\n  } catch (error) {\n    console.error(error);\n    return new Error((error as { message: string }).message || 'Erro ao apagar o registro.');\n  }\n};\n\n\nexport const CidadesService = {\n  getAll,\n  create,\n  getById,\n  updateById,\n  deleteById,\n};\n"]},"metadata":{},"sourceType":"module"}