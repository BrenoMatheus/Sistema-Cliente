{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/Projeto advocacia/frontend/src/pages/dashboard/components/Maps.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { APIProvider, Map, useMap, useMapsLibrary } from '@vis.gl/react-google-maps';\nimport { Environment } from '../../../shared/environment';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MapsDashboard = () => {\n  _s();\n\n  const position = {\n    lat: 43.6532,\n    lng: -79.3832\n  };\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(APIProvider, {\n      apiKey: Environment.API_KEY,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        center: position,\n        defaultZoom: 9,\n        mapId: Environment.ID_MAP,\n        fullscreenControl: false,\n        children: /*#__PURE__*/_jsxDEV(Directions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapsDashboard, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = MapsDashboard;\n\nfunction Directions() {\n  _s2();\n\n  const map = useMap();\n  const routesLibrary = useMapsLibrary('routes');\n  const [directionsService, setDirectionsService] = useState();\n  const [directionsRenderer, setDirectionsRenderer] = useState();\n  const [routes, setRoutes] = useState([]);\n  const [routeIndex, setRouteIndex] = useState(0);\n  const selected = routes[routeIndex];\n  const leg = selected === null || selected === void 0 ? void 0 : selected.legs[0];\n  useEffect(() => {\n    if (!routesLibrary || !map) return;\n    setDirectionsService(new routesLibrary.DirectionsService());\n    setDirectionsRenderer(new routesLibrary.DirectionsRenderer({\n      map\n    }));\n  }, [routesLibrary, map]);\n  useEffect(() => {\n    if (!directionsService || !directionsRenderer) return;\n    directionsService.route({\n      origin: '100 Front St, Toronto ON',\n      destination: '500 College St, Toronto ON',\n      travelMode: google.maps.TravelMode.DRIVING,\n      provideRouteAlternatives: true\n    }).then(response => {\n      directionsRenderer.setDirections(response);\n      setRoutes(response.routes);\n    });\n  }, [directionsService, directionsRenderer]);\n  if (!leg) return null; //console.log(selected.summary);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"directions\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selected.summary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Directions, \"IBKr2hElKuG+0RgUmdWtNqlqQFw=\", false, function () {\n  return [useMap, useMapsLibrary];\n});\n\n_c2 = Directions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapsDashboard\");\n$RefreshReg$(_c2, \"Directions\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Projeto advocacia/frontend/src/pages/dashboard/components/Maps.tsx"],"names":["APIProvider","Map","useMap","useMapsLibrary","Environment","useEffect","useState","MapsDashboard","position","lat","lng","open","setOpen","height","width","API_KEY","ID_MAP","Directions","map","routesLibrary","directionsService","setDirectionsService","directionsRenderer","setDirectionsRenderer","routes","setRoutes","routeIndex","setRouteIndex","selected","leg","legs","DirectionsService","DirectionsRenderer","route","origin","destination","travelMode","google","maps","TravelMode","DRIVING","provideRouteAlternatives","then","response","setDirections","summary"],"mappings":"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","sourcesContent":["import { Grid, Paper } from '@mui/material';\nimport {\n  APIProvider,\n  InfoWindow,\n  Map,\n  Marker,\n  useMap,\n  useMapsLibrary,\n} from '@vis.gl/react-google-maps';\nimport { Environment } from '../../../shared/environment';\nimport { useEffect, useState } from 'react';\n\nexport const MapsDashboard: React.FC = () => {\n  const position = { lat: 43.6532, lng: -79.3832 };\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <APIProvider apiKey={Environment.API_KEY}>\n        <Map\n          center={position}\n          defaultZoom={9}\n          mapId={Environment.ID_MAP}\n          fullscreenControl={false}\n        >\n          {/* <Marker position={position} onClick={() => setOpen(true)} />\n          {open && (\n            <InfoWindow position={position} onCloseClick={() => setOpen(false)}>\n              <p>Cliente 1</p>\n            </InfoWindow>\n          )} */}\n          <Directions />\n        </Map>\n      </APIProvider>\n    </div>\n  );\n};\n\nfunction Directions() {\n  const map = useMap();\n  const routesLibrary = useMapsLibrary('routes');\n  const [directionsService, setDirectionsService] =\n    useState<google.maps.DirectionsService>();\n  const [directionsRenderer, setDirectionsRenderer] =\n    useState<google.maps.DirectionsRenderer>();\n  const [routes, setRoutes] = useState<google.maps.DirectionsRoute[]>([]);\n  const [routeIndex, setRouteIndex] = useState(0);\n  const selected = routes[routeIndex];\n  const leg = selected?.legs[0];\n\n  useEffect(() => {\n    if (!routesLibrary || !map) return;\n    setDirectionsService(new routesLibrary.DirectionsService());\n    setDirectionsRenderer(new routesLibrary.DirectionsRenderer({ map }));\n  }, [routesLibrary, map]);\n\n  useEffect(() => {\n    if (!directionsService || !directionsRenderer) return;\n    directionsService\n      .route({\n        origin: '100 Front St, Toronto ON',\n        destination: '500 College St, Toronto ON',\n        travelMode: google.maps.TravelMode.DRIVING,\n        provideRouteAlternatives: true,\n      })\n      .then((response) => {\n        directionsRenderer.setDirections(response);\n        setRoutes(response.routes);\n      });\n  }, [directionsService, directionsRenderer]);\n\n  if (!leg) return null;\n\n  //console.log(selected.summary);\n  return (\n    <div className='directions'>\n      <h2>{selected.summary}</h2>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}