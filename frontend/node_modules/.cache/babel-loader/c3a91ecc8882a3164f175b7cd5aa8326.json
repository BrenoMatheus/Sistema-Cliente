{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"timeSteps\", \"autoFocus\", \"components\", \"componentsProps\", \"slots\", \"slotProps\", \"value\", \"defaultValue\", \"referenceDate\", \"disableIgnoringDatePartForTimeValidation\", \"maxTime\", \"minTime\", \"disableFuture\", \"disablePast\", \"minutesStep\", \"shouldDisableClock\", \"shouldDisableTime\", \"onChange\", \"view\", \"views\", \"openTo\", \"onViewChange\", \"focusedView\", \"onFocusedViewChange\", \"className\", \"disabled\", \"readOnly\", \"skipDisabled\", \"timezone\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { getMultiSectionDigitalClockUtilityClass } from './multiSectionDigitalClockClasses';\nimport { MultiSectionDigitalClockSection } from './MultiSectionDigitalClockSection';\nimport { getHourSectionOptions, getTimeSectionOptions } from './MultiSectionDigitalClock.utils';\nimport { useControlledValueWithTimezone } from '../internals/hooks/useValueWithTimezone';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useClockReferenceDate } from '../internals/hooks/useClockReferenceDate';\nimport { formatMeridiem } from '../internals/utils/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);\n};\n\nconst MultiSectionDigitalClockRoot = styled(PickerViewRoot, {\n  name: 'MuiMultiSectionDigitalClock',\n  slot: 'Root',\n  overridesResolver: (_, styles) => styles.root\n})(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`\n  };\n});\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [DigitalClock](https://mui.com/x/react-date-pickers/digital-clock/)\n *\n * API:\n *\n * - [MultiSectionDigitalClock API](https://mui.com/x/api/date-pickers/multi-section-digital-clock/)\n */\n\nexport const MultiSectionDigitalClock = /*#__PURE__*/React.forwardRef(function MultiSectionDigitalClock(inProps, ref) {\n  const utils = useUtils();\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMultiSectionDigitalClock'\n  });\n\n  const {\n    ampm = utils.is12HourCycleInCurrentLocale(),\n    timeSteps: inTimeSteps,\n    autoFocus,\n    components,\n    componentsProps,\n    slots,\n    slotProps,\n    value: valueProp,\n    defaultValue,\n    referenceDate: referenceDateProp,\n    disableIgnoringDatePartForTimeValidation = false,\n    maxTime,\n    minTime,\n    disableFuture,\n    disablePast,\n    minutesStep = 1,\n    shouldDisableClock,\n    shouldDisableTime,\n    onChange,\n    view: inView,\n    views: inViews = ['hours', 'minutes'],\n    openTo,\n    onViewChange,\n    focusedView: inFocusedView,\n    onFocusedViewChange,\n    className,\n    disabled,\n    readOnly,\n    skipDisabled = false,\n    timezone: timezoneProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    value,\n    handleValueChange: handleRawValueChange,\n    timezone\n  } = useControlledValueWithTimezone({\n    name: 'MultiSectionDigitalClock',\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager: singleItemValueManager\n  });\n  const localeText = useLocaleText();\n  const now = useNow(timezone);\n  const timeSteps = React.useMemo(() => _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, inTimeSteps), [inTimeSteps]);\n  const valueOrReferenceDate = useClockReferenceDate({\n    value,\n    referenceDate: referenceDateProp,\n    utils,\n    props,\n    timezone\n  });\n  const handleValueChange = useEventCallback((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));\n  const views = React.useMemo(() => {\n    if (!ampm || !inViews.includes('hours')) {\n      return inViews;\n    }\n\n    return inViews.includes('meridiem') ? inViews : [...inViews, 'meridiem'];\n  }, [ampm, inViews]);\n  const {\n    view,\n    setValueAndGoToNextView,\n    focusedView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    onChange: handleValueChange,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  });\n  const handleMeridiemValueChange = useEventCallback(newValue => {\n    setValueAndGoToNextView(newValue, 'finish', 'meridiem');\n  });\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, 'finish');\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');\n\n    const containsValidTime = _ref2 => {\n      let {\n        start,\n        end\n      } = _ref2;\n\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n\n      if (disableFuture && isAfter(start, now)) {\n        return false;\n      }\n\n      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    const isValidValue = function (timeValue) {\n      let step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (timeValue % step !== 0) {\n        return false;\n      }\n\n      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {\n        return false;\n      }\n\n      if (shouldDisableTime) {\n        switch (viewType) {\n          case 'hours':\n            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');\n\n          case 'minutes':\n            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');\n\n          case 'seconds':\n            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');\n\n          default:\n            return false;\n        }\n      }\n\n      return true;\n    };\n\n    switch (viewType) {\n      case 'hours':\n        {\n          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);\n          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(valueWithMeridiem);\n        }\n\n      case 'minutes':\n        {\n          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);\n          const start = utils.setSeconds(dateWithNewMinutes, 0);\n          const end = utils.setSeconds(dateWithNewMinutes, 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n\n      case 'seconds':\n        {\n          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);\n          const start = dateWithNewSeconds;\n          const end = dateWithNewSeconds;\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue);\n        }\n\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);\n  const buildViewProps = React.useCallback(viewToBuild => {\n    switch (viewToBuild) {\n      case 'hours':\n        {\n          return {\n            onChange: hours => {\n              const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);\n              setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), 'finish', 'hours');\n            },\n            items: getHourSectionOptions({\n              now,\n              value,\n              ampm,\n              utils,\n              isDisabled: hours => disabled || isTimeDisabled(hours, 'hours'),\n              timeStep: timeSteps.hours,\n              resolveAriaLabel: localeText.hoursClockNumberText\n            })\n          };\n        }\n\n      case 'minutes':\n        {\n          return {\n            onChange: minutes => {\n              setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minutes), 'finish', 'minutes');\n            },\n            items: getTimeSectionOptions({\n              value: utils.getMinutes(valueOrReferenceDate),\n              utils,\n              isDisabled: minutes => disabled || isTimeDisabled(minutes, 'minutes'),\n              resolveLabel: minutes => utils.format(utils.setMinutes(now, minutes), 'minutes'),\n              timeStep: timeSteps.minutes,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.minutesClockNumberText\n            })\n          };\n        }\n\n      case 'seconds':\n        {\n          return {\n            onChange: seconds => {\n              setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, seconds), 'finish', 'seconds');\n            },\n            items: getTimeSectionOptions({\n              value: utils.getSeconds(valueOrReferenceDate),\n              utils,\n              isDisabled: seconds => disabled || isTimeDisabled(seconds, 'seconds'),\n              resolveLabel: seconds => utils.format(utils.setSeconds(now, seconds), 'seconds'),\n              timeStep: timeSteps.seconds,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.secondsClockNumberText\n            })\n          };\n        }\n\n      case 'meridiem':\n        {\n          const amLabel = formatMeridiem(utils, 'am');\n          const pmLabel = formatMeridiem(utils, 'pm');\n          return {\n            onChange: handleMeridiemChange,\n            items: [{\n              value: 'am',\n              label: amLabel,\n              isSelected: () => !!value && meridiemMode === 'am',\n              ariaLabel: amLabel\n            }, {\n              value: 'pm',\n              label: pmLabel,\n              isSelected: () => !!value && meridiemMode === 'pm',\n              ariaLabel: pmLabel\n            }]\n          };\n        }\n\n      default:\n        throw new Error(`Unknown view: ${viewToBuild} found.`);\n    }\n  }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, disabled, isTimeDisabled, handleMeridiemChange]);\n  const viewTimeOptions = React.useMemo(() => {\n    return views.reduce((result, currentView) => {\n      return _extends({}, result, {\n        [currentView]: buildViewProps(currentView)\n      });\n    }, {});\n  }, [views, buildViewProps]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(MultiSectionDigitalClockRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    role: \"group\"\n  }, other, {\n    children: Object.entries(viewTimeOptions).map(_ref3 => {\n      let [timeView, viewOptions] = _ref3;\n      return /*#__PURE__*/_jsx(MultiSectionDigitalClockSection, {\n        items: viewOptions.items,\n        onChange: viewOptions.onChange,\n        active: view === timeView,\n        autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,\n        disabled: disabled,\n        readOnly: readOnly,\n        slots: slots != null ? slots : components,\n        slotProps: slotProps != null ? slotProps : componentsProps,\n        skipDisabled: skipDisabled,\n        \"aria-label\": localeText.selectViewText(timeView)\n      }, timeView);\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSectionDigitalClock.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the picker views and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TView The view type. Will be one of date or time views.\n   * @param {TValue} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired on focused view change.\n   * @template TView\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * If `true`, the picker views and text field are read-only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overrideable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","clsx","PropTypes","styled","useThemeProps","useEventCallback","composeClasses","useUtils","useNow","useLocaleText","convertValueToMeridiem","createIsAfterIgnoreDatePart","useViews","useMeridiemMode","PickerViewRoot","getMultiSectionDigitalClockUtilityClass","MultiSectionDigitalClockSection","getHourSectionOptions","getTimeSectionOptions","useControlledValueWithTimezone","singleItemValueManager","useClockReferenceDate","formatMeridiem","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","MultiSectionDigitalClockRoot","name","slot","overridesResolver","_","styles","theme","display","flexDirection","width","borderBottom","vars","palette","divider","MultiSectionDigitalClock","forwardRef","inProps","ref","utils","props","ampm","is12HourCycleInCurrentLocale","timeSteps","inTimeSteps","autoFocus","components","componentsProps","slotProps","value","valueProp","defaultValue","referenceDate","referenceDateProp","disableIgnoringDatePartForTimeValidation","maxTime","minTime","disableFuture","disablePast","minutesStep","shouldDisableClock","shouldDisableTime","onChange","view","inView","views","inViews","openTo","onViewChange","focusedView","inFocusedView","onFocusedViewChange","className","disabled","readOnly","skipDisabled","timezone","timezoneProp","other","handleValueChange","handleRawValueChange","valueManager","localeText","now","useMemo","hours","minutes","seconds","valueOrReferenceDate","newValue","selectionState","selectedView","includes","setValueAndGoToNextView","handleMeridiemValueChange","meridiemMode","handleMeridiemChange","isTimeDisabled","useCallback","rawValue","viewType","isAfter","shouldCheckPastEnd","containsValidTime","start","end","isValidValue","timeValue","step","setHours","setMinutes","setSeconds","valueWithMeridiem","dateWithNewHours","dateWithNewMinutes","dateWithNewSeconds","Error","buildViewProps","viewToBuild","items","isDisabled","timeStep","resolveAriaLabel","hoursClockNumberText","getMinutes","resolveLabel","format","hasValue","minutesClockNumberText","getSeconds","secondsClockNumberText","amLabel","pmLabel","label","isSelected","ariaLabel","viewTimeOptions","reduce","result","currentView","role","children","Object","entries","map","timeView","viewOptions","active","selectViewText","process","env","NODE_ENV","propTypes","bool","object","string","any","oneOf","number","func","sx","oneOfType","arrayOf","shape","isRequired"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"timeSteps\", \"autoFocus\", \"components\", \"componentsProps\", \"slots\", \"slotProps\", \"value\", \"defaultValue\", \"referenceDate\", \"disableIgnoringDatePartForTimeValidation\", \"maxTime\", \"minTime\", \"disableFuture\", \"disablePast\", \"minutesStep\", \"shouldDisableClock\", \"shouldDisableTime\", \"onChange\", \"view\", \"views\", \"openTo\", \"onViewChange\", \"focusedView\", \"onFocusedViewChange\", \"className\", \"disabled\", \"readOnly\", \"skipDisabled\", \"timezone\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { getMultiSectionDigitalClockUtilityClass } from './multiSectionDigitalClockClasses';\nimport { MultiSectionDigitalClockSection } from './MultiSectionDigitalClockSection';\nimport { getHourSectionOptions, getTimeSectionOptions } from './MultiSectionDigitalClock.utils';\nimport { useControlledValueWithTimezone } from '../internals/hooks/useValueWithTimezone';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useClockReferenceDate } from '../internals/hooks/useClockReferenceDate';\nimport { formatMeridiem } from '../internals/utils/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);\n};\nconst MultiSectionDigitalClockRoot = styled(PickerViewRoot, {\n  name: 'MuiMultiSectionDigitalClock',\n  slot: 'Root',\n  overridesResolver: (_, styles) => styles.root\n})(({\n  theme\n}) => ({\n  display: 'flex',\n  flexDirection: 'row',\n  width: '100%',\n  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`\n}));\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [DigitalClock](https://mui.com/x/react-date-pickers/digital-clock/)\n *\n * API:\n *\n * - [MultiSectionDigitalClock API](https://mui.com/x/api/date-pickers/multi-section-digital-clock/)\n */\nexport const MultiSectionDigitalClock = /*#__PURE__*/React.forwardRef(function MultiSectionDigitalClock(inProps, ref) {\n  const utils = useUtils();\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMultiSectionDigitalClock'\n  });\n  const {\n      ampm = utils.is12HourCycleInCurrentLocale(),\n      timeSteps: inTimeSteps,\n      autoFocus,\n      components,\n      componentsProps,\n      slots,\n      slotProps,\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      disableIgnoringDatePartForTimeValidation = false,\n      maxTime,\n      minTime,\n      disableFuture,\n      disablePast,\n      minutesStep = 1,\n      shouldDisableClock,\n      shouldDisableTime,\n      onChange,\n      view: inView,\n      views: inViews = ['hours', 'minutes'],\n      openTo,\n      onViewChange,\n      focusedView: inFocusedView,\n      onFocusedViewChange,\n      className,\n      disabled,\n      readOnly,\n      skipDisabled = false,\n      timezone: timezoneProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    value,\n    handleValueChange: handleRawValueChange,\n    timezone\n  } = useControlledValueWithTimezone({\n    name: 'MultiSectionDigitalClock',\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager: singleItemValueManager\n  });\n  const localeText = useLocaleText();\n  const now = useNow(timezone);\n  const timeSteps = React.useMemo(() => _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, inTimeSteps), [inTimeSteps]);\n  const valueOrReferenceDate = useClockReferenceDate({\n    value,\n    referenceDate: referenceDateProp,\n    utils,\n    props,\n    timezone\n  });\n  const handleValueChange = useEventCallback((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));\n  const views = React.useMemo(() => {\n    if (!ampm || !inViews.includes('hours')) {\n      return inViews;\n    }\n    return inViews.includes('meridiem') ? inViews : [...inViews, 'meridiem'];\n  }, [ampm, inViews]);\n  const {\n    view,\n    setValueAndGoToNextView,\n    focusedView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    onChange: handleValueChange,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  });\n  const handleMeridiemValueChange = useEventCallback(newValue => {\n    setValueAndGoToNextView(newValue, 'finish', 'meridiem');\n  });\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, 'finish');\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');\n    const containsValidTime = ({\n      start,\n      end\n    }) => {\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n      if (disableFuture && isAfter(start, now)) {\n        return false;\n      }\n      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {\n        return false;\n      }\n      return true;\n    };\n    const isValidValue = (timeValue, step = 1) => {\n      if (timeValue % step !== 0) {\n        return false;\n      }\n      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {\n        return false;\n      }\n      if (shouldDisableTime) {\n        switch (viewType) {\n          case 'hours':\n            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');\n          case 'minutes':\n            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');\n          case 'seconds':\n            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');\n          default:\n            return false;\n        }\n      }\n      return true;\n    };\n    switch (viewType) {\n      case 'hours':\n        {\n          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);\n          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(valueWithMeridiem);\n        }\n      case 'minutes':\n        {\n          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);\n          const start = utils.setSeconds(dateWithNewMinutes, 0);\n          const end = utils.setSeconds(dateWithNewMinutes, 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n      case 'seconds':\n        {\n          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);\n          const start = dateWithNewSeconds;\n          const end = dateWithNewSeconds;\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue);\n        }\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);\n  const buildViewProps = React.useCallback(viewToBuild => {\n    switch (viewToBuild) {\n      case 'hours':\n        {\n          return {\n            onChange: hours => {\n              const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);\n              setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), 'finish', 'hours');\n            },\n            items: getHourSectionOptions({\n              now,\n              value,\n              ampm,\n              utils,\n              isDisabled: hours => disabled || isTimeDisabled(hours, 'hours'),\n              timeStep: timeSteps.hours,\n              resolveAriaLabel: localeText.hoursClockNumberText\n            })\n          };\n        }\n      case 'minutes':\n        {\n          return {\n            onChange: minutes => {\n              setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minutes), 'finish', 'minutes');\n            },\n            items: getTimeSectionOptions({\n              value: utils.getMinutes(valueOrReferenceDate),\n              utils,\n              isDisabled: minutes => disabled || isTimeDisabled(minutes, 'minutes'),\n              resolveLabel: minutes => utils.format(utils.setMinutes(now, minutes), 'minutes'),\n              timeStep: timeSteps.minutes,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.minutesClockNumberText\n            })\n          };\n        }\n      case 'seconds':\n        {\n          return {\n            onChange: seconds => {\n              setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, seconds), 'finish', 'seconds');\n            },\n            items: getTimeSectionOptions({\n              value: utils.getSeconds(valueOrReferenceDate),\n              utils,\n              isDisabled: seconds => disabled || isTimeDisabled(seconds, 'seconds'),\n              resolveLabel: seconds => utils.format(utils.setSeconds(now, seconds), 'seconds'),\n              timeStep: timeSteps.seconds,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.secondsClockNumberText\n            })\n          };\n        }\n      case 'meridiem':\n        {\n          const amLabel = formatMeridiem(utils, 'am');\n          const pmLabel = formatMeridiem(utils, 'pm');\n          return {\n            onChange: handleMeridiemChange,\n            items: [{\n              value: 'am',\n              label: amLabel,\n              isSelected: () => !!value && meridiemMode === 'am',\n              ariaLabel: amLabel\n            }, {\n              value: 'pm',\n              label: pmLabel,\n              isSelected: () => !!value && meridiemMode === 'pm',\n              ariaLabel: pmLabel\n            }]\n          };\n        }\n      default:\n        throw new Error(`Unknown view: ${viewToBuild} found.`);\n    }\n  }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, disabled, isTimeDisabled, handleMeridiemChange]);\n  const viewTimeOptions = React.useMemo(() => {\n    return views.reduce((result, currentView) => {\n      return _extends({}, result, {\n        [currentView]: buildViewProps(currentView)\n      });\n    }, {});\n  }, [views, buildViewProps]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(MultiSectionDigitalClockRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    role: \"group\"\n  }, other, {\n    children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => /*#__PURE__*/_jsx(MultiSectionDigitalClockSection, {\n      items: viewOptions.items,\n      onChange: viewOptions.onChange,\n      active: view === timeView,\n      autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,\n      disabled: disabled,\n      readOnly: readOnly,\n      slots: slots != null ? slots : components,\n      slotProps: slotProps != null ? slotProps : componentsProps,\n      skipDisabled: skipDisabled,\n      \"aria-label\": localeText.selectViewText(timeView)\n    }, timeView))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSectionDigitalClock.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Overrideable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker views and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TView The view type. Will be one of date or time views.\n   * @param {TValue} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired on focused view change.\n   * @template TView\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * If `true`, the picker views and text field are read-only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overrideable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']).isRequired)\n} : void 0;"]},"metadata":{},"sourceType":"module"}