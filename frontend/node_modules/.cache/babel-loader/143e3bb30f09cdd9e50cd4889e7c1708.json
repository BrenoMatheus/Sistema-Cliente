{"ast":null,"code":"import React, { useState, useReducer, useMemo, useCallback, useEffect, useRef, useContext, useLayoutEffect, forwardRef, useImperativeHandle, Children } from 'react';\nimport { createPortal } from 'react-dom';\nimport isDeepEqual from 'fast-deep-equal';\n\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (\"string\" === r ? String : Number)(t);\n}\n\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n\n  return \"symbol\" == typeof i ? i : String(i);\n}\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst APILoadingStatus = {\n  NOT_LOADED: 'NOT_LOADED',\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n  FAILED: 'FAILED',\n  AUTH_FAILURE: 'AUTH_FAILURE'\n};\nconst MAPS_API_BASE_URL = 'https://maps.googleapis.com/maps/api/js';\n/**\n * A GoogleMapsApiLoader to reliably load and unload the Google Maps JavaScript API.\n *\n * The actual loading and unloading is delayed into the microtask queue, to\n * allow using the API in an useEffect hook, without worrying about multiple API loads.\n */\n\nclass GoogleMapsApiLoader {\n  /**\n   * Loads the Google Maps API with the specified parameters.\n   * Since the Maps library can only be loaded once per page, this will\n   * produce a warning when called multiple times with different\n   * parameters.\n   *\n   * The returned promise resolves when loading completes\n   * and rejects in case of an error or when the loading was aborted.\n   */\n  static async load(params, onLoadingStatusChange) {\n    var _window$google;\n\n    const libraries = params.libraries ? params.libraries.split(',') : [];\n    const serializedParams = this.serializeParams(params); // note: if google.maps.importLibrary was defined externally, the params\n    //   will be ignored. If it was defined by a previous call to this\n    //   method, we will check that the key and other parameters have not been\n    //   changed in between calls.\n\n    if (!((_window$google = window.google) != null && (_window$google = _window$google.maps) != null && _window$google.importLibrary)) {\n      this.serializedApiParams = serializedParams;\n      this.initImportLibrary(params, onLoadingStatusChange);\n    } else {\n      // if serializedApiParams isn't defined the library was loaded externally\n      // and we can only assume that went alright.\n      if (!this.serializedApiParams) {\n        this.loadingStatus = APILoadingStatus.LOADED;\n      }\n\n      onLoadingStatusChange(this.loadingStatus);\n    }\n\n    if (this.serializedApiParams && this.serializedApiParams !== serializedParams) {\n      console.warn(`The maps API has already been loaded with different ` + `parameters and will not be loaded again. Refresh the page for ` + `new values to have effect.`);\n    }\n\n    for (const lib of ['maps', ...libraries]) {\n      await google.maps.importLibrary(lib);\n    }\n  }\n\n  static serializeParams(params) {\n    return [params.v, params.key, params.language, params.region, params.authReferrerPolicy, params.solutionChannel].join('/');\n  }\n\n  static initImportLibrary(params, onLoadingStatusChange) {\n    if (!window.google) window.google = {};\n    if (!window.google.maps) window.google.maps = {};\n\n    if (window.google.maps['importLibrary']) {\n      console.warn('initImportLibrary can only be called once.', params);\n      return;\n    }\n\n    let apiPromise = null;\n\n    const loadApi = library => {\n      if (apiPromise) return apiPromise;\n      apiPromise = new Promise((resolve, reject) => {\n        var _document$querySelect;\n\n        const scriptElement = document.createElement('script');\n        const urlParams = new URLSearchParams();\n\n        for (const [key, value] of Object.entries(params)) {\n          const urlParamName = key.replace(/[A-Z]/g, t => '_' + t[0].toLowerCase());\n          urlParams.set(urlParamName, value);\n        }\n\n        urlParams.set('libraries', library);\n        urlParams.set('loading', 'async');\n        urlParams.set('callback', '__googleMapsCallback__');\n        scriptElement.async = true;\n        scriptElement.src = MAPS_API_BASE_URL + `?` + urlParams.toString();\n\n        window.__googleMapsCallback__ = () => {\n          this.loadingStatus = APILoadingStatus.LOADED;\n          onLoadingStatusChange(this.loadingStatus);\n          resolve();\n        };\n\n        window.gm_authFailure = () => {\n          this.loadingStatus = APILoadingStatus.AUTH_FAILURE;\n          onLoadingStatusChange(this.loadingStatus);\n        };\n\n        scriptElement.onerror = () => {\n          this.loadingStatus = APILoadingStatus.FAILED;\n          onLoadingStatusChange(this.loadingStatus);\n          reject(new Error('The Google Maps JavaScript API could not load.'));\n        };\n\n        scriptElement.nonce = ((_document$querySelect = document.querySelector('script[nonce]')) == null ? void 0 : _document$querySelect.nonce) || '';\n        this.loadingStatus = APILoadingStatus.LOADING;\n        onLoadingStatusChange(this.loadingStatus);\n        document.head.append(scriptElement);\n      });\n      return apiPromise;\n    }; // for the first load, we declare an importLibrary function that will\n    // be overwritten once the api is loaded.\n\n\n    google.maps.importLibrary = libraryName => loadApi(libraryName).then(() => google.maps.importLibrary(libraryName));\n  }\n\n}\n\nGoogleMapsApiLoader.loadingStatus = APILoadingStatus.NOT_LOADED;\nGoogleMapsApiLoader.serializedApiParams = void 0;\nconst _excluded$3 = [\"onLoad\", \"apiKey\", \"version\", \"libraries\"],\n      _excluded2 = [\"children\"];\nconst APIProviderContext = React.createContext(null);\n/**\n * local hook to set up the map-instance management context.\n */\n\nfunction useMapInstances() {\n  const [mapInstances, setMapInstances] = useState({});\n\n  const addMapInstance = function (mapInstance) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMapInstances(instances => _extends({}, instances, {\n      [id]: mapInstance\n    }));\n  };\n\n  const removeMapInstance = function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMapInstances(_ref => {\n      let remaining = _objectWithoutPropertiesLoose(_ref, [id].map(_toPropertyKey));\n\n      return remaining;\n    });\n  };\n\n  const clearMapInstances = () => {\n    setMapInstances({});\n  };\n\n  return {\n    mapInstances,\n    addMapInstance,\n    removeMapInstance,\n    clearMapInstances\n  };\n}\n/**\n * local hook to handle the loading of the maps API, returns the current loading status\n * @param props\n */\n\n\nfunction useGoogleMapsApiLoader(props) {\n  const {\n    onLoad,\n    apiKey,\n    version,\n    libraries = []\n  } = props,\n        otherApiParams = _objectWithoutPropertiesLoose(props, _excluded$3);\n\n  const [status, setStatus] = useState(GoogleMapsApiLoader.loadingStatus);\n  const [loadedLibraries, addLoadedLibrary] = useReducer((loadedLibraries, action) => {\n    return _extends({}, loadedLibraries, {\n      [action.name]: action.value\n    });\n  }, {});\n  const librariesString = useMemo(() => libraries == null ? void 0 : libraries.join(','), [libraries]);\n  const serializedParams = useMemo(() => JSON.stringify(_extends({\n    apiKey,\n    version\n  }, otherApiParams)), [apiKey, version, otherApiParams]);\n  const importLibrary = useCallback(async name => {\n    var _google;\n\n    if (loadedLibraries[name]) {\n      return loadedLibraries[name];\n    }\n\n    if (!((_google = google) != null && (_google = _google.maps) != null && _google.importLibrary)) {\n      throw new Error('[api-provider-internal] importLibrary was called before ' + 'google.maps.importLibrary was defined.');\n    }\n\n    const res = await window.google.maps.importLibrary(name);\n    addLoadedLibrary({\n      name,\n      value: res\n    });\n    return res;\n  }, [loadedLibraries]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const params = _extends({\n          key: apiKey\n        }, otherApiParams);\n\n        if (version) params.v = version;\n        if ((librariesString == null ? void 0 : librariesString.length) > 0) params.libraries = librariesString;\n        await GoogleMapsApiLoader.load(params, status => setStatus(status));\n\n        for (const name of ['core', 'maps', ...libraries]) {\n          await importLibrary(name);\n        }\n\n        if (onLoad) {\n          onLoad();\n        }\n      } catch (error) {\n        console.error('<ApiProvider> failed to load Google Maps API', error);\n      }\n    })();\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [apiKey, librariesString, serializedParams]);\n  return {\n    status,\n    loadedLibraries,\n    importLibrary\n  };\n}\n/**\n * Component to wrap the Google Maps React components and load the Google Maps JavaScript API\n */\n\n\nconst APIProvider = props => {\n  const {\n    children\n  } = props,\n        loaderProps = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const {\n    mapInstances,\n    addMapInstance,\n    removeMapInstance,\n    clearMapInstances\n  } = useMapInstances();\n  const {\n    status,\n    loadedLibraries,\n    importLibrary\n  } = useGoogleMapsApiLoader(loaderProps);\n  return /*#__PURE__*/React.createElement(APIProviderContext.Provider, {\n    value: {\n      mapInstances,\n      addMapInstance,\n      removeMapInstance,\n      clearMapInstances,\n      status,\n      loadedLibraries,\n      importLibrary\n    }\n  }, children);\n};\n/**\n * Sets up effects to bind event-handlers for all event-props in MapEventProps.\n * @internal\n */\n\n\nfunction useMapEvents(map, props) {\n  // note: calling a useEffect hook from within a loop is prohibited by the\n  // rules of hooks, but it's ok here since it's unconditional and the number\n  // and order of iterations is always strictly the same.\n  // (see https://legacy.reactjs.org/docs/hooks-rules.html)\n  for (const propName of eventPropNames) {\n    // fixme: this cast is essentially a 'trust me, bro' for typescript, but\n    //   a proper solution seems way too complicated right now\n    const handler = props[propName];\n    const eventType = propNameToEventType[propName]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    useEffect(() => {\n      if (!map) return;\n      if (!handler) return;\n      const listener = google.maps.event.addListener(map, eventType, ev => {\n        handler(createMapEvent(eventType, map, ev));\n      });\n      return () => listener.remove();\n    }, [map, eventType, handler]);\n  }\n}\n/**\n * Create the wrapped map-events used for the event-props.\n * @param type the event type as it is specified to the maps api\n * @param map the map instance the event originates from\n * @param srcEvent the source-event if there is one.\n */\n\n\nfunction createMapEvent(type, map, srcEvent) {\n  const ev = {\n    type,\n    map,\n    detail: {},\n    stoppable: false,\n    stop: () => {}\n  };\n\n  if (cameraEventTypes.includes(type)) {\n    const camEvent = ev;\n    const center = map.getCenter();\n    const zoom = map.getZoom();\n    const heading = map.getHeading() || 0;\n    const tilt = map.getTilt() || 0;\n    const bounds = map.getBounds();\n\n    if (!center || !bounds || !Number.isFinite(zoom)) {\n      console.warn('[createEvent] at least one of the values from the map ' + 'returned undefined. This is not expected to happen. Please ' + 'report an issue at https://github.com/visgl/react-google-maps/issues/new');\n    }\n\n    camEvent.detail = {\n      center: (center == null ? void 0 : center.toJSON()) || {\n        lat: 0,\n        lng: 0\n      },\n      zoom: zoom || 0,\n      heading: heading,\n      tilt: tilt,\n      bounds: (bounds == null ? void 0 : bounds.toJSON()) || {\n        north: 90,\n        east: 180,\n        south: -90,\n        west: -180\n      }\n    };\n    return camEvent;\n  } else if (mouseEventTypes.includes(type)) {\n    var _srcEvent$latLng;\n\n    if (!srcEvent) throw new Error('[createEvent] mouse events must provide a srcEvent');\n    const mouseEvent = ev;\n    mouseEvent.domEvent = srcEvent.domEvent;\n    mouseEvent.stoppable = true;\n\n    mouseEvent.stop = () => srcEvent.stop();\n\n    mouseEvent.detail = {\n      latLng: ((_srcEvent$latLng = srcEvent.latLng) == null ? void 0 : _srcEvent$latLng.toJSON()) || null,\n      placeId: srcEvent.placeId\n    };\n    return mouseEvent;\n  }\n\n  return ev;\n}\n/**\n * maps the camelCased names of event-props to the corresponding event-types\n * used in the maps API.\n */\n\n\nconst propNameToEventType = {\n  onBoundsChanged: 'bounds_changed',\n  onCenterChanged: 'center_changed',\n  onClick: 'click',\n  onContextmenu: 'contextmenu',\n  onDblclick: 'dblclick',\n  onDrag: 'drag',\n  onDragend: 'dragend',\n  onDragstart: 'dragstart',\n  onHeadingChanged: 'heading_changed',\n  onIdle: 'idle',\n  onIsFractionalZoomEnabledChanged: 'isfractionalzoomenabled_changed',\n  onMapCapabilitiesChanged: 'mapcapabilities_changed',\n  onMapTypeIdChanged: 'maptypeid_changed',\n  onMousemove: 'mousemove',\n  onMouseout: 'mouseout',\n  onMouseover: 'mouseover',\n  onProjectionChanged: 'projection_changed',\n  onRenderingTypeChanged: 'renderingtype_changed',\n  onTilesLoaded: 'tilesloaded',\n  onTiltChanged: 'tilt_changed',\n  onZoomChanged: 'zoom_changed',\n  // note: onCameraChanged is an alias for the bounds_changed event,\n  // since that is going to be fired in every situation where the camera is\n  // updated.\n  onCameraChanged: 'bounds_changed'\n};\nconst cameraEventTypes = ['bounds_changed', 'center_changed', 'heading_changed', 'projection_changed', 'tilt_changed', 'zoom_changed'];\nconst mouseEventTypes = ['click', 'contextmenu', 'dblclick', 'mousemove', 'mouseout', 'mouseover'];\nconst eventPropNames = Object.keys(propNameToEventType);\n\nfunction useDeepCompareEffect(effect, deps) {\n  const ref = useRef(undefined);\n\n  if (!ref.current || !isDeepEqual(deps, ref.current)) {\n    ref.current = deps;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  useEffect(effect, ref.current);\n}\n\nconst mapOptionKeys = new Set(['backgroundColor', 'clickableIcons', 'controlSize', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor', 'draggingCursor', 'fullscreenControl', 'fullscreenControlOptions', 'gestureHandling', 'isFractionalZoomEnabled', 'keyboardShortcuts', 'mapTypeControl', 'mapTypeControlOptions', 'mapTypeId', 'maxZoom', 'minZoom', 'noClear', 'panControl', 'panControlOptions', 'restriction', 'rotateControl', 'rotateControlOptions', 'scaleControl', 'scaleControlOptions', 'scrollwheel', 'streetView', 'streetViewControl', 'streetViewControlOptions', 'styles', 'zoomControl', 'zoomControlOptions']);\n/**\n * Internal hook to update the map-options when props are changed.\n *\n * @param map the map instance\n * @param mapProps the props to update the map-instance with\n * @internal\n */\n\nfunction useMapOptions(map, mapProps) {\n  /* eslint-disable react-hooks/exhaustive-deps --\n   *\n   * The following effects aren't triggered when the map is changed.\n   * In that case, the values will be or have been passed to the map\n   * constructor via mapOptions.\n   */\n  const mapOptions = {};\n  const keys = Object.keys(mapProps);\n\n  for (const key of keys) {\n    if (!mapOptionKeys.has(key)) continue;\n    mapOptions[key] = mapProps[key];\n  } // update the map options when mapOptions is changed\n  // Note: due to the destructuring above, mapOptions will be seen as changed\n  //   with every re-render, so we're assuming the maps-api will properly\n  //   deal with unchanged option-values passed into setOptions.\n\n\n  useDeepCompareEffect(() => {\n    if (!map) return;\n    map.setOptions(mapOptions);\n  }, [mapOptions]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n}\n\nfunction useApiLoadingStatus() {\n  var _useContext;\n\n  return ((_useContext = useContext(APIProviderContext)) == null ? void 0 : _useContext.status) || APILoadingStatus.NOT_LOADED;\n}\n/**\n * Internal hook that updates the camera when deck.gl viewState changes.\n * @internal\n */\n\n\nfunction useDeckGLCameraUpdate(map, props) {\n  const {\n    viewport,\n    viewState\n  } = props;\n  const isDeckGlControlled = !!viewport;\n  useLayoutEffect(() => {\n    if (!map || !viewState) return;\n    const {\n      latitude,\n      longitude,\n      bearing: heading,\n      pitch: tilt,\n      zoom\n    } = viewState;\n    map.moveCamera({\n      center: {\n        lat: latitude,\n        lng: longitude\n      },\n      heading,\n      tilt,\n      zoom: zoom + 1\n    });\n  }, [map, viewState]);\n  return isDeckGlControlled;\n}\n\nfunction isLatLngLiteral(obj) {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('lat' in obj && 'lng' in obj)) return false;\n  return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);\n}\n\nfunction latLngEquals(a, b) {\n  if (!a || !b) return false;\n  const A = toLatLngLiteral(a);\n  const B = toLatLngLiteral(b);\n  if (A.lat !== B.lat || A.lng !== B.lng) return false;\n  return true;\n}\n\nfunction toLatLngLiteral(obj) {\n  if (isLatLngLiteral(obj)) return obj;\n  return obj.toJSON();\n}\n\nfunction useMapCameraParams(map, cameraStateRef, mapProps) {\n  const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;\n  let lat = null;\n  let lng = null;\n\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat;\n    lng = center.lng;\n  }\n\n  const zoom = Number.isFinite(mapProps.zoom) ? mapProps.zoom : null;\n  const heading = Number.isFinite(mapProps.heading) ? mapProps.heading : null;\n  const tilt = Number.isFinite(mapProps.tilt) ? mapProps.tilt : null; // the following effect runs for every render of the map component and checks\n  // if there are differences between the known state of the map instance\n  // (cameraStateRef, which is updated by all bounds_changed events) and the\n  // desired state in the props.\n\n  useLayoutEffect(() => {\n    if (!map) return;\n    const nextCamera = {};\n    let needsUpdate = false;\n\n    if (lat !== null && lng !== null && (cameraStateRef.current.center.lat !== lat || cameraStateRef.current.center.lng !== lng)) {\n      nextCamera.center = {\n        lat,\n        lng\n      };\n      needsUpdate = true;\n    }\n\n    if (zoom !== null && cameraStateRef.current.zoom !== zoom) {\n      nextCamera.zoom = zoom;\n      needsUpdate = true;\n    }\n\n    if (heading !== null && cameraStateRef.current.heading !== heading) {\n      nextCamera.heading = heading;\n      needsUpdate = true;\n    }\n\n    if (tilt !== null && cameraStateRef.current.tilt !== tilt) {\n      nextCamera.tilt = tilt;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      map.moveCamera(nextCamera);\n    }\n  });\n}\n\nconst AuthFailureMessage = () => {\n  const style = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    zIndex: 999,\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    textAlign: 'center',\n    justifyContent: 'center',\n    fontSize: '.8rem',\n    color: 'rgba(0,0,0,0.6)',\n    background: '#dddddd',\n    padding: '1rem 1.5rem'\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: style\n  }, /*#__PURE__*/React.createElement(\"h2\", null, \"Error: AuthFailure\"), /*#__PURE__*/React.createElement(\"p\", null, \"A problem with your API key prevents the map from rendering correctly. Please make sure the value of the \", /*#__PURE__*/React.createElement(\"code\", null, \"APIProvider.apiKey\"), \" prop is correct. Check the error-message in the console for further details.\"));\n};\n\nfunction useCallbackRef() {\n  const [el, setEl] = useState(null);\n  const ref = useCallback(value => setEl(value), [setEl]);\n  return [el, ref];\n}\n/**\n * Hook to check if the Google Maps API is loaded\n */\n\n\nfunction useApiIsLoaded() {\n  const status = useApiLoadingStatus();\n  return status === APILoadingStatus.LOADED;\n}\n\nfunction useForceUpdate() {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  return forceUpdate;\n}\n\nfunction handleBoundsChange(map, ref) {\n  const center = map.getCenter();\n  const zoom = map.getZoom();\n  const heading = map.getHeading() || 0;\n  const tilt = map.getTilt() || 0;\n  const bounds = map.getBounds();\n\n  if (!center || !bounds || !Number.isFinite(zoom)) {\n    console.warn('[useTrackedCameraState] at least one of the values from the map ' + 'returned undefined. This is not expected to happen. Please ' + 'report an issue at https://github.com/visgl/react-google-maps/issues/new');\n  } // fixme: do we need the `undefined` cases for the camera-params? When are they used in the maps API?\n\n\n  Object.assign(ref.current, {\n    center: (center == null ? void 0 : center.toJSON()) || {\n      lat: 0,\n      lng: 0\n    },\n    zoom: zoom || 0,\n    heading: heading,\n    tilt: tilt\n  });\n}\n/**\n * Creates a mutable ref object to track the last known state of the map camera.\n * This is used in `useMapCameraParams` to reduce stuttering in normal operation\n * by avoiding updates of the map camera with values that have already been processed.\n */\n\n\nfunction useTrackedCameraStateRef(map) {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef({\n    center: {\n      lat: 0,\n      lng: 0\n    },\n    heading: 0,\n    tilt: 0,\n    zoom: 0\n  }); // Record camera state with every bounds_changed event dispatched by the map.\n  // This data is used to prevent feeding these values back to the\n  // map-instance when a typical \"controlled component\" setup (state variable is\n  // fed into and updated by the map).\n\n  useEffect(() => {\n    if (!map) return;\n    const listener = google.maps.event.addListener(map, 'bounds_changed', () => {\n      handleBoundsChange(map, ref); // When an event is occured, we have to update during the next cycle.\n      // The application could decide to ignore the event and not update any\n      // camera props of the map, meaning that in that case we will have to\n      // 'undo' the change to the camera.\n\n      forceUpdate();\n    });\n    return () => listener.remove();\n  }, [map, forceUpdate]);\n  return ref;\n}\n\nconst _excluded$2 = [\"id\", \"defaultBounds\", \"defaultCenter\", \"defaultZoom\", \"defaultHeading\", \"defaultTilt\"];\n/**\n * The main hook takes care of creating map-instances and registering them in\n * the api-provider context.\n * @return a tuple of the map-instance created (or null) and the callback\n *   ref that will be used to pass the map-container into this hook.\n * @internal\n */\n\nfunction useMapInstance(props, context) {\n  const apiIsLoaded = useApiIsLoaded();\n  const [map, setMap] = useState(null);\n  const [container, containerRef] = useCallbackRef();\n  const cameraStateRef = useTrackedCameraStateRef(map);\n\n  const {\n    id,\n    defaultBounds,\n    defaultCenter,\n    defaultZoom,\n    defaultHeading,\n    defaultTilt\n  } = props,\n        mapOptions = _objectWithoutPropertiesLoose(props, _excluded$2); // apply default camera props if available and not overwritten by controlled props\n\n\n  if (!mapOptions.center && defaultCenter) mapOptions.center = defaultCenter;\n  if (!mapOptions.zoom && Number.isFinite(defaultZoom)) mapOptions.zoom = defaultZoom;\n  if (!mapOptions.heading && Number.isFinite(defaultHeading)) mapOptions.heading = defaultHeading;\n  if (!mapOptions.tilt && Number.isFinite(defaultTilt)) mapOptions.tilt = defaultTilt;\n\n  for (const key of Object.keys(mapOptions)) if (mapOptions[key] === undefined) delete mapOptions[key];\n\n  const savedMapStateRef = useRef(); // create the map instance and register it in the context\n\n  useEffect(() => {\n    if (!container || !apiIsLoaded) return;\n    const {\n      addMapInstance,\n      removeMapInstance\n    } = context;\n    const mapId = props.mapId;\n    const newMap = new google.maps.Map(container, mapOptions);\n    setMap(newMap);\n    addMapInstance(newMap, id);\n\n    if (defaultBounds) {\n      newMap.fitBounds(defaultBounds);\n    } // the savedMapState is used to restore the camera parameters when the mapId is changed\n\n\n    if (savedMapStateRef.current) {\n      const {\n        mapId: savedMapId,\n        cameraState: savedCameraState\n      } = savedMapStateRef.current;\n\n      if (savedMapId !== mapId) {\n        newMap.setOptions(savedCameraState);\n      }\n    }\n\n    return () => {\n      savedMapStateRef.current = {\n        mapId,\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        cameraState: cameraStateRef.current\n      }; // remove all event-listeners to minimize memory-leaks\n\n      google.maps.event.clearInstanceListeners(newMap);\n      setMap(null);\n      removeMapInstance(id);\n    };\n  }, // some dependencies are ignored in the list below:\n  //  - defaultBounds and the default* camera props will only be used once, and\n  //    changes should be ignored\n  //  - mapOptions has special hooks that take care of updating the options\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [container, apiIsLoaded, id, props.mapId]);\n  return [map, containerRef, cameraStateRef];\n}\n\nconst GoogleMapsContext = React.createContext(null);\n\nconst Map = props => {\n  const {\n    children,\n    id,\n    className,\n    style\n  } = props;\n  const context = useContext(APIProviderContext);\n  const loadingStatus = useApiLoadingStatus();\n\n  if (!context) {\n    throw new Error('<Map> can only be used inside an <ApiProvider> component.');\n  }\n\n  const [map, mapRef, cameraStateRef] = useMapInstance(props, context);\n  useMapCameraParams(map, cameraStateRef, props);\n  useMapEvents(map, props);\n  useMapOptions(map, props);\n  const isDeckGlControlled = useDeckGLCameraUpdate(map, props);\n  const isControlledExternally = !!props.controlled; // disable interactions with the map for externally controlled maps\n\n  useEffect(() => {\n    if (!map) return; // fixme: this doesn't seem to belong here (and it's mostly there for convenience anyway).\n    //   The reasoning is that a deck.gl canvas will be put on top of the map, rendering\n    //   any default map controls pretty much useless\n\n    if (isDeckGlControlled) {\n      map.setOptions({\n        disableDefaultUI: true\n      });\n    } // disable all control-inputs when the map is controlled externally\n\n\n    if (isDeckGlControlled || isControlledExternally) {\n      map.setOptions({\n        gestureHandling: 'none',\n        keyboardShortcuts: false\n      });\n    }\n\n    return () => {\n      map.setOptions({\n        gestureHandling: props.gestureHandling,\n        keyboardShortcuts: props.keyboardShortcuts\n      });\n    };\n  }, [map, isDeckGlControlled, isControlledExternally, props.gestureHandling, props.keyboardShortcuts]); // setup a stable cameraOptions object that can be used as dependency\n\n  const center = props.center ? toLatLngLiteral(props.center) : null;\n  let lat = null;\n  let lng = null;\n\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat;\n    lng = center.lng;\n  }\n\n  const cameraOptions = useMemo(() => {\n    var _lat, _lng, _props$zoom, _props$heading, _props$tilt;\n\n    return {\n      center: {\n        lat: (_lat = lat) != null ? _lat : 0,\n        lng: (_lng = lng) != null ? _lng : 0\n      },\n      zoom: (_props$zoom = props.zoom) != null ? _props$zoom : 0,\n      heading: (_props$heading = props.heading) != null ? _props$heading : 0,\n      tilt: (_props$tilt = props.tilt) != null ? _props$tilt : 0\n    };\n  }, [lat, lng, props.zoom, props.heading, props.tilt]); // externally controlled mode: reject all camera changes that don't correspond to changes in props\n\n  useLayoutEffect(() => {\n    if (!map || !isControlledExternally) return;\n    map.moveCamera(cameraOptions);\n    const listener = map.addListener('bounds_changed', () => {\n      map.moveCamera(cameraOptions);\n    });\n    return () => listener.remove();\n  }, [map, isControlledExternally, cameraOptions]);\n  const combinedStyle = useMemo(() => _extends({\n    width: '100%',\n    height: '100%',\n    // when using deckgl, the map should be sent to the back\n    zIndex: isDeckGlControlled ? -1 : 0\n  }, style), [style, isDeckGlControlled]);\n\n  if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: _extends({\n        position: 'relative'\n      }, className ? {} : combinedStyle),\n      className: className\n    }, /*#__PURE__*/React.createElement(AuthFailureMessage, null));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: mapRef,\n    \"data-testid\": 'map',\n    style: className ? undefined : combinedStyle,\n    className: className\n  }, id ? {\n    id\n  } : {}), map ? /*#__PURE__*/React.createElement(GoogleMapsContext.Provider, {\n    value: {\n      map\n    }\n  }, children) : null);\n};\n\nMap.deckGLViewProps = true;\n\nfunction useMapsLibrary(name) {\n  const apiIsLoaded = useApiIsLoaded();\n  const ctx = useContext(APIProviderContext);\n  useEffect(() => {\n    if (!apiIsLoaded || !ctx) return; // Trigger loading the libraries via our proxy-method.\n    // The returned promise is ignored, since importLibrary will update loadedLibraries\n    // list in the context, triggering a re-render.\n\n    void ctx.importLibrary(name);\n  }, [apiIsLoaded, ctx, name]);\n  return (ctx == null ? void 0 : ctx.loadedLibraries[name]) || null;\n}\n/* eslint-disable complexity */\n\n\nconst AdvancedMarkerContext = React.createContext(null);\n\nfunction useAdvancedMarker(props) {\n  var _useContext;\n\n  const [marker, setMarker] = useState(null);\n  const [contentContainer, setContentContainer] = useState(null);\n  const map = (_useContext = useContext(GoogleMapsContext)) == null ? void 0 : _useContext.map;\n  const markerLibrary = useMapsLibrary('marker');\n  const {\n    children,\n    className,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    collisionBehavior,\n    draggable,\n    position,\n    title,\n    zIndex\n  } = props;\n  const numChilds = Children.count(children); // create marker instance and add it to the map when map becomes available\n\n  useEffect(() => {\n    if (!map || !markerLibrary) return;\n    const newMarker = new markerLibrary.AdvancedMarkerElement();\n    newMarker.map = map;\n    setMarker(newMarker); // create container for marker content if there are children\n\n    if (numChilds > 0) {\n      const el = document.createElement('div');\n      if (className) el.className = className;\n      newMarker.content = el;\n      setContentContainer(el);\n    }\n\n    return () => {\n      newMarker.map = null;\n      setMarker(null);\n      setContentContainer(null);\n    }; // We do not want to re-render the whole marker when the className changes\n    // because that causes a short flickering of the marker.\n    // The className update is handled in the useEffect below.\n    // Excluding the className from the dependency array onm purpose here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, markerLibrary, numChilds]); // update className of advanced marker element\n\n  useEffect(() => {\n    if (!contentContainer) return;\n    contentContainer.className = className != null ? className : '';\n  }, [contentContainer, className]); // bind all marker events\n\n  useEffect(() => {\n    if (!marker) return;\n    const gme = google.maps.event;\n    if (onClick) gme.addListener(marker, 'click', onClick);\n    if (onDrag) gme.addListener(marker, 'drag', onDrag);\n    if (onDragStart) gme.addListener(marker, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(marker, 'dragend', onDragEnd);\n\n    if ((onDrag || onDragStart || onDragEnd) && !draggable) {\n      console.warn('You need to set the marker to draggable to listen to drag-events.');\n    }\n\n    const m = marker;\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [marker, draggable, onClick, onDragStart, onDrag, onDragEnd]); // update other marker props when changed\n\n  useEffect(() => {\n    if (!marker) return;\n    if (position !== undefined) marker.position = position;\n    if (draggable !== undefined) marker.gmpDraggable = draggable;\n    if (collisionBehavior !== undefined) marker.collisionBehavior = collisionBehavior;\n    if (zIndex !== undefined) marker.zIndex = zIndex;\n    if (typeof title === 'string') marker.title = title;\n  }, [marker, position, draggable, collisionBehavior, zIndex, title]);\n  return [marker, contentContainer];\n}\n\nconst AdvancedMarker = forwardRef((props, ref) => {\n  const {\n    children\n  } = props;\n  const [marker, contentContainer] = useAdvancedMarker(props);\n  useImperativeHandle(ref, () => marker, [marker]);\n\n  if (!marker) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(AdvancedMarkerContext.Provider, {\n    value: {\n      marker\n    }\n  }, contentContainer !== null && createPortal(children, contentContainer));\n});\n\nfunction useAdvancedMarkerRef() {\n  const [marker, setMarker] = useState(null);\n  const refCallback = useCallback(m => {\n    setMarker(m);\n  }, []);\n  return [refCallback, marker];\n}\n\nconst _excluded$1 = [\"children\", \"anchor\", \"onCloseClick\"];\n/**\n * Component to render a Google Maps Info Window\n */\n\nconst InfoWindow = props => {\n  var _useContext;\n\n  const {\n    children,\n    anchor,\n    onCloseClick\n  } = props,\n        infoWindowOptions = _objectWithoutPropertiesLoose(props, _excluded$1);\n\n  const map = (_useContext = useContext(GoogleMapsContext)) == null ? void 0 : _useContext.map;\n  const infoWindowRef = useRef(null);\n  const [contentContainer, setContentContainer] = useState(null); // create infowindow once map is available\n\n  useEffect(() => {\n    if (!map) return;\n    const newInfowindow = new google.maps.InfoWindow(infoWindowOptions); // Add content to info window\n\n    const el = document.createElement('div');\n    newInfowindow.setContent(el);\n    infoWindowRef.current = newInfowindow;\n    setContentContainer(el); // Cleanup info window and event listeners on unmount\n\n    return () => {\n      google.maps.event.clearInstanceListeners(newInfowindow);\n      newInfowindow.close();\n      el.remove();\n      setContentContainer(null);\n    }; // `infoWindowOptions` is missing from dependencies:\n    //\n    // we don't want to re-render a whole new infowindow\n    // when the options change to prevent flickering.\n    // Update of infoWindow options is handled in the useEffect below.\n    //\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, children]); // Update infoWindowOptions\n\n  useEffect(() => {\n    var _infoWindowRef$curren;\n\n    (_infoWindowRef$curren = infoWindowRef.current) == null || _infoWindowRef$curren.setOptions(infoWindowOptions);\n  }, [infoWindowOptions]); // Handle the close click callback\n\n  useEffect(() => {\n    if (!infoWindowRef.current) return;\n    let listener = null;\n\n    if (onCloseClick) {\n      listener = google.maps.event.addListener(infoWindowRef.current, 'closeclick', onCloseClick);\n    }\n\n    return () => {\n      if (listener) listener.remove();\n    };\n  }, [onCloseClick]); // Open info window after content container is set\n\n  useEffect(() => {\n    // anchor === null means an anchor is defined but not ready yet.\n    if (!contentContainer || !infoWindowRef.current || anchor === null) return;\n    const openOptions = {\n      map\n    };\n\n    if (anchor) {\n      openOptions.anchor = anchor;\n    }\n\n    infoWindowRef.current.open(openOptions);\n  }, [contentContainer, infoWindowRef, anchor, map]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, contentContainer !== null && createPortal(children, contentContainer));\n};\n\nconst shownMessages = new Set();\n\nfunction logErrorOnce() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const key = JSON.stringify(args);\n\n  if (!shownMessages.has(key)) {\n    shownMessages.add(key);\n    console.error(...args);\n  }\n}\n/**\n * Retrieves a map-instance from the context. This is either an instance\n * identified by id or the parent map instance if no id is specified.\n * Returns null if neither can be found.\n */\n\n\nconst useMap = function () {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  const ctx = useContext(APIProviderContext);\n  const {\n    map\n  } = useContext(GoogleMapsContext) || {};\n\n  if (ctx === null) {\n    logErrorOnce('useMap(): failed to retrieve APIProviderContext. ' + 'Make sure that the <APIProvider> component exists and that the ' + 'component you are calling `useMap()` from is a sibling of the ' + '<APIProvider>.');\n    return null;\n  }\n\n  const {\n    mapInstances\n  } = ctx; // if an id is specified, the corresponding map or null is returned\n\n  if (id !== null) return mapInstances[id] || null; // otherwise, return the closest ancestor\n\n  if (map) return map; // finally, return the default map instance\n\n  return mapInstances['default'] || null;\n};\n/**\n * Copy of the `google.maps.ControlPosition` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */\n\n\nconst ControlPosition = {\n  TOP_LEFT: 1,\n  TOP_CENTER: 2,\n  TOP: 2,\n  TOP_RIGHT: 3,\n  LEFT_CENTER: 4,\n  LEFT_TOP: 5,\n  LEFT: 5,\n  LEFT_BOTTOM: 6,\n  RIGHT_TOP: 7,\n  RIGHT: 7,\n  RIGHT_CENTER: 8,\n  RIGHT_BOTTOM: 9,\n  BOTTOM_LEFT: 10,\n  BOTTOM_CENTER: 11,\n  BOTTOM: 11,\n  BOTTOM_RIGHT: 12,\n  CENTER: 13,\n  BLOCK_START_INLINE_START: 14,\n  BLOCK_START_INLINE_CENTER: 15,\n  BLOCK_START_INLINE_END: 16,\n  INLINE_START_BLOCK_CENTER: 17,\n  INLINE_START_BLOCK_START: 18,\n  INLINE_START_BLOCK_END: 19,\n  INLINE_END_BLOCK_START: 20,\n  INLINE_END_BLOCK_CENTER: 21,\n  INLINE_END_BLOCK_END: 22,\n  BLOCK_END_INLINE_START: 23,\n  BLOCK_END_INLINE_CENTER: 24,\n  BLOCK_END_INLINE_END: 25\n};\n\nconst MapControl = _ref2 => {\n  let {\n    children,\n    position\n  } = _ref2;\n  const controlContainer = useMemo(() => document.createElement('div'), []);\n  const map = useMap();\n  useEffect(() => {\n    if (!map) return;\n    const controls = map.controls[position];\n    controls.push(controlContainer);\n    return () => {\n      const index = controls.getArray().indexOf(controlContainer);\n      controls.removeAt(index);\n    };\n  }, [controlContainer, map, position]);\n  return createPortal(children, controlContainer);\n};\n\nconst _excluded = [\"onClick\", \"onDrag\", \"onDragStart\", \"onDragEnd\", \"onMouseOver\", \"onMouseOut\"];\n\nfunction useMarker(props) {\n  var _useContext;\n\n  const [marker, setMarker] = useState(null);\n  const map = (_useContext = useContext(GoogleMapsContext)) == null ? void 0 : _useContext.map;\n\n  const {\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut\n  } = props,\n        markerOptions = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    position,\n    draggable\n  } = markerOptions; // create marker instance and add to the map once the map is available\n\n  useEffect(() => {\n    if (!map) {\n      if (map === undefined) console.error('<Marker> has to be inside a Map component.');\n      return;\n    }\n\n    const newMarker = new google.maps.Marker(markerOptions);\n    newMarker.setMap(map);\n    setMarker(newMarker);\n    return () => {\n      newMarker.setMap(null);\n      setMarker(null);\n    }; // We do not want to re-render the whole marker when the options change.\n    // Marker options update is handled in a useEffect below.\n    // Excluding markerOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]); // attach and re-attach event-handlers when any of the properties change\n\n  useEffect(() => {\n    if (!marker) return;\n    const m = marker; // Add event listeners\n\n    const gme = google.maps.event;\n    if (onClick) gme.addListener(m, 'click', onClick);\n    if (onDrag) gme.addListener(m, 'drag', onDrag);\n    if (onDragStart) gme.addListener(m, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(m, 'dragend', onDragEnd);\n    if (onMouseOver) gme.addListener(m, 'mouseover', onMouseOver);\n    if (onMouseOut) gme.addListener(m, 'mouseout', onMouseOut);\n    marker.setDraggable(Boolean(draggable));\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [marker, draggable, onClick, onDrag, onDragStart, onDragEnd, onMouseOver, onMouseOut]); // update markerOptions (note the dependencies aren't properly checked\n  // here, we just assume that setOptions is smart enough to not waste a\n  // lot of time updating values that didn't change)\n\n  useEffect(() => {\n    if (!marker) return;\n    if (markerOptions) marker.setOptions(markerOptions);\n  }, [marker, markerOptions]); // update position when changed\n\n  useEffect(() => {\n    // Should not update position when draggable\n    if (draggable || !position || !marker) return;\n    marker.setPosition(position);\n  }, [draggable, position, marker]);\n  return marker;\n}\n/**\n * Component to render a Google Maps Marker on a map\n */\n\n\nconst Marker = forwardRef((props, ref) => {\n  const marker = useMarker(props);\n  useImperativeHandle(ref, () => marker, [marker]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n});\n\nfunction useMarkerRef() {\n  const [marker, setMarker] = useState(null);\n  const refCallback = useCallback(m => {\n    setMarker(m);\n  }, []);\n  return [refCallback, marker];\n}\n/**\n * Component to render a google maps marker Pin View\n */\n\n\nconst Pin = props => {\n  var _useContext;\n\n  const advancedMarker = (_useContext = useContext(AdvancedMarkerContext)) == null ? void 0 : _useContext.marker;\n  const glyphContainer = useMemo(() => document.createElement('div'), []); // Create Pin View instance\n\n  useEffect(() => {\n    if (!advancedMarker) {\n      if (advancedMarker === undefined) {\n        console.error('The <Pin> component can only be used inside <AdvancedMarker>.');\n      }\n\n      return;\n    }\n\n    if (props.glyph && props.children) {\n      logErrorOnce('The <Pin> component only uses children to render the glyph if both the glyph property and children are present.');\n    }\n\n    if (Children.count(props.children) > 1) {\n      logErrorOnce('Passing multiple children to the <Pin> component might lead to unexpected results.');\n    }\n\n    const pinViewOptions = _extends({}, props);\n\n    const pinElement = new google.maps.marker.PinElement(pinViewOptions); // Set glyph to glyph container if children are present (rendered via portal).\n    // If both props.glyph and props.children are present, props.children takes priority.\n\n    if (props.children) {\n      pinElement.glyph = glyphContainer;\n    } // Set content of Advanced Marker View to the Pin View element\n\n\n    advancedMarker.content = pinElement.element;\n  }, [advancedMarker, glyphContainer, props]);\n  return createPortal(props.children, glyphContainer);\n};\n\nconst mapLinear = (x, a1, a2, b1, b2) => b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\nconst getMapMaxTilt = zoom => {\n  if (zoom <= 10) {\n    return 30;\n  }\n\n  if (zoom >= 15.5) {\n    return 67.5;\n  } // range [10...14]\n\n\n  if (zoom <= 14) {\n    return mapLinear(zoom, 10, 14, 30, 45);\n  } // range [14...15.5]\n\n\n  return mapLinear(zoom, 14, 15.5, 45, 67.5);\n};\n/**\n * Function to limit the tilt range of the google maps map when updating the view state\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst limitTiltRange = _ref3 => {\n  let {\n    viewState\n  } = _ref3;\n  const pitch = viewState.pitch;\n  const gmZoom = viewState.zoom + 1;\n  const maxTilt = getMapMaxTilt(gmZoom);\n  return _extends({}, viewState, {\n    fovy: 25,\n    pitch: Math.min(maxTilt, pitch)\n  });\n};\n\nexport { APILoadingStatus, APIProvider, APIProviderContext, AdvancedMarker, AdvancedMarkerContext, ControlPosition, GoogleMapsContext, InfoWindow, Map, MapControl, Marker, Pin, isLatLngLiteral, latLngEquals, limitTiltRange, toLatLngLiteral, useAdvancedMarkerRef, useApiIsLoaded, useApiLoadingStatus, useMap, useMapsLibrary, useMarkerRef };","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/api-loading-status.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/google-maps-api-loader.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/api-provider.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/use-map-events.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/use-deep-compare-effect.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/use-map-options.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/hooks/use-api-loading-status.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/use-deckgl-camera-update.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/lat-lng-utils.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/use-map-camera-params.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/auth-failure-message.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/use-callback-ref.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/hooks/use-api-is-loaded.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/use-force-update.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/use-tracked-camera-state-ref.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/use-map-instance.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map/index.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/hooks/use-maps-library.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/advanced-marker.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/info-window.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/errors.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/hooks/use-map.ts","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/map-control.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/marker.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/components/pin.tsx","/home/brenomatheus/Documentos/Projeto advocacia/frontend/node_modules/@vis.gl/react-google-maps/src/libraries/limit-tilt-range.ts"],"names":["APILoadingStatus","NOT_LOADED","LOADING","LOADED","FAILED","AUTH_FAILURE","MAPS_API_BASE_URL","GoogleMapsApiLoader","loadingStatus","serializedApiParams","load","params","onLoadingStatusChange","libraries","split","serializedParams","serializeParams","window","google","maps","importLibrary","initImportLibrary","console","warn","lib","v","key","language","region","authReferrerPolicy","solutionChannel","join","apiPromise","loadApi","library","Promise","resolve","reject","scriptElement","document","createElement","urlParams","URLSearchParams","value","Object","entries","urlParamName","replace","t","toLowerCase","set","async","src","toString","__googleMapsCallback__","gm_authFailure","onerror","Error","nonce","querySelector","head","append","libraryName","then","APIProviderContext","React","createContext","useMapInstances","mapInstances","setMapInstances","useState","addMapInstance","mapInstance","id","instances","removeMapInstance","remaining","clearMapInstances","useGoogleMapsApiLoader","props","onLoad","apiKey","version","otherApiParams","status","setStatus","loadedLibraries","addLoadedLibrary","useReducer","action","name","librariesString","useMemo","JSON","stringify","useCallback","res","useEffect","length","error","APIProvider","children","loaderProps","Provider","map","propName","eventPropNames","handler","eventType","propNameToEventType","listener","event","addListener","ev","createMapEvent","remove","type","srcEvent","detail","stoppable","stop","cameraEventTypes","includes","camEvent","center","getCenter","zoom","getZoom","heading","getHeading","tilt","getTilt","bounds","getBounds","Number","isFinite","toJSON","lat","lng","north","east","south","west","mouseEventTypes","mouseEvent","domEvent","latLng","placeId","onBoundsChanged","onCenterChanged","onClick","onContextmenu","onDblclick","onDrag","onDragend","onDragstart","onHeadingChanged","onIdle","onIsFractionalZoomEnabledChanged","onMapCapabilitiesChanged","onMapTypeIdChanged","onMousemove","onMouseout","onMouseover","onProjectionChanged","onRenderingTypeChanged","onTilesLoaded","onTiltChanged","onZoomChanged","onCameraChanged","keys","effect","deps","ref","useRef","undefined","current","isDeepEqual","mapOptionKeys","Set","mapProps","mapOptions","has","useDeepCompareEffect","setOptions","useApiLoadingStatus","viewport","viewState","isDeckGlControlled","useLayoutEffect","latitude","longitude","bearing","pitch","moveCamera","isLatLngLiteral","obj","a","b","A","toLatLngLiteral","B","useMapCameraParams","cameraStateRef","nextCamera","needsUpdate","AuthFailureMessage","style","position","top","left","bottom","right","zIndex","display","flexFlow","textAlign","justifyContent","fontSize","color","background","padding","useCallbackRef","el","setEl","useApiIsLoaded","useForceUpdate","forceUpdate","x","handleBoundsChange","assign","useTrackedCameraStateRef","context","apiIsLoaded","setMap","container","containerRef","defaultBounds","defaultCenter","defaultZoom","defaultHeading","defaultTilt","savedMapStateRef","mapId","newMap","Map","fitBounds","savedMapId","cameraState","savedCameraState","clearInstanceListeners","GoogleMapsContext","className","useContext","mapRef","useMapInstance","useMapEvents","useMapOptions","useDeckGLCameraUpdate","isControlledExternally","controlled","disableDefaultUI","gestureHandling","keyboardShortcuts","cameraOptions","combinedStyle","width","height","deckGLViewProps","useMapsLibrary","ctx","AdvancedMarkerContext","useAdvancedMarker","marker","setMarker","contentContainer","setContentContainer","markerLibrary","onDragStart","onDragEnd","collisionBehavior","draggable","title","numChilds","Children","count","newMarker","AdvancedMarkerElement","content","gme","m","gmpDraggable","AdvancedMarker","forwardRef","useImperativeHandle","createPortal","useAdvancedMarkerRef","refCallback","InfoWindow","anchor","onCloseClick","infoWindowOptions","infoWindowRef","newInfowindow","setContent","close","openOptions","open","shownMessages","args","add","useMap","logErrorOnce","ControlPosition","TOP_LEFT","TOP_CENTER","TOP","TOP_RIGHT","LEFT_CENTER","LEFT_TOP","LEFT","LEFT_BOTTOM","RIGHT_TOP","RIGHT","RIGHT_CENTER","RIGHT_BOTTOM","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM","BOTTOM_RIGHT","CENTER","BLOCK_START_INLINE_START","BLOCK_START_INLINE_CENTER","BLOCK_START_INLINE_END","INLINE_START_BLOCK_CENTER","INLINE_START_BLOCK_START","INLINE_START_BLOCK_END","INLINE_END_BLOCK_START","INLINE_END_BLOCK_CENTER","INLINE_END_BLOCK_END","BLOCK_END_INLINE_START","BLOCK_END_INLINE_CENTER","BLOCK_END_INLINE_END","MapControl","controlContainer","controls","push","index","getArray","indexOf","removeAt","useMarker","onMouseOver","onMouseOut","markerOptions","Marker","setDraggable","Boolean","setPosition","useMarkerRef","Pin","advancedMarker","glyphContainer","glyph","pinViewOptions","pinElement","PinElement","element","mapLinear","a1","a2","b1","b2","getMapMaxTilt","limitTiltRange","gmZoom","maxTilt","fovy","Math","min"],"mappings":"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","sourcesContent":["export const APILoadingStatus = {\n  NOT_LOADED: 'NOT_LOADED',\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n  FAILED: 'FAILED',\n  AUTH_FAILURE: 'AUTH_FAILURE'\n};\nexport type APILoadingStatus =\n  (typeof APILoadingStatus)[keyof typeof APILoadingStatus];\n","import {APILoadingStatus} from './api-loading-status';\n\nexport type ApiParams = {\n  key: string;\n  v?: string;\n  language?: string;\n  region?: string;\n  libraries?: string;\n  solutionChannel?: string;\n  authReferrerPolicy?: string;\n};\n\n// Declare global maps callback function\ndeclare global {\n  interface Window {\n    __googleMapsCallback__?: () => void;\n    gm_authFailure?: () => void;\n  }\n}\n\nconst MAPS_API_BASE_URL = 'https://maps.googleapis.com/maps/api/js';\n\n/**\n * A GoogleMapsApiLoader to reliably load and unload the Google Maps JavaScript API.\n *\n * The actual loading and unloading is delayed into the microtask queue, to\n * allow using the API in an useEffect hook, without worrying about multiple API loads.\n */\nexport class GoogleMapsApiLoader {\n  public static loadingStatus: APILoadingStatus = APILoadingStatus.NOT_LOADED;\n  public static serializedApiParams?: string;\n\n  /**\n   * Loads the Google Maps API with the specified parameters.\n   * Since the Maps library can only be loaded once per page, this will\n   * produce a warning when called multiple times with different\n   * parameters.\n   *\n   * The returned promise resolves when loading completes\n   * and rejects in case of an error or when the loading was aborted.\n   */\n  static async load(\n    params: ApiParams,\n    onLoadingStatusChange: (status: APILoadingStatus) => void\n  ): Promise<void> {\n    const libraries = params.libraries ? params.libraries.split(',') : [];\n    const serializedParams = this.serializeParams(params);\n\n    // note: if google.maps.importLibrary was defined externally, the params\n    //   will be ignored. If it was defined by a previous call to this\n    //   method, we will check that the key and other parameters have not been\n    //   changed in between calls.\n    if (!window.google?.maps?.importLibrary) {\n      this.serializedApiParams = serializedParams;\n      this.initImportLibrary(params, onLoadingStatusChange);\n    } else {\n      // if serializedApiParams isn't defined the library was loaded externally\n      // and we can only assume that went alright.\n      if (!this.serializedApiParams) {\n        this.loadingStatus = APILoadingStatus.LOADED;\n      }\n\n      onLoadingStatusChange(this.loadingStatus);\n    }\n\n    if (\n      this.serializedApiParams &&\n      this.serializedApiParams !== serializedParams\n    ) {\n      console.warn(\n        `The maps API has already been loaded with different ` +\n          `parameters and will not be loaded again. Refresh the page for ` +\n          `new values to have effect.`\n      );\n    }\n\n    for (const lib of ['maps', ...libraries]) {\n      await google.maps.importLibrary(lib);\n    }\n  }\n\n  private static serializeParams(params: ApiParams): string {\n    return [\n      params.v,\n      params.key,\n      params.language,\n      params.region,\n      params.authReferrerPolicy,\n      params.solutionChannel\n    ].join('/');\n  }\n\n  private static initImportLibrary(\n    params: ApiParams,\n    onLoadingStatusChange: (status: APILoadingStatus) => void\n  ) {\n    if (!window.google) window.google = {} as never;\n    if (!window.google.maps) window.google.maps = {} as never;\n\n    if (window.google.maps['importLibrary']) {\n      console.warn('initImportLibrary can only be called once.', params);\n\n      return;\n    }\n\n    let apiPromise: Promise<void> | null = null;\n\n    const loadApi = (library: string) => {\n      if (apiPromise) return apiPromise;\n\n      apiPromise = new Promise((resolve, reject) => {\n        const scriptElement = document.createElement('script');\n        const urlParams = new URLSearchParams();\n\n        for (const [key, value] of Object.entries(params)) {\n          const urlParamName = key.replace(\n            /[A-Z]/g,\n            t => '_' + t[0].toLowerCase()\n          );\n          urlParams.set(urlParamName, value);\n        }\n        urlParams.set('libraries', library);\n        urlParams.set('loading', 'async');\n        urlParams.set('callback', '__googleMapsCallback__');\n\n        scriptElement.async = true;\n        scriptElement.src = MAPS_API_BASE_URL + `?` + urlParams.toString();\n\n        window.__googleMapsCallback__ = () => {\n          this.loadingStatus = APILoadingStatus.LOADED;\n          onLoadingStatusChange(this.loadingStatus);\n          resolve();\n        };\n\n        window.gm_authFailure = () => {\n          this.loadingStatus = APILoadingStatus.AUTH_FAILURE;\n          onLoadingStatusChange(this.loadingStatus);\n        };\n\n        scriptElement.onerror = () => {\n          this.loadingStatus = APILoadingStatus.FAILED;\n          onLoadingStatusChange(this.loadingStatus);\n          reject(new Error('The Google Maps JavaScript API could not load.'));\n        };\n\n        scriptElement.nonce =\n          (document.querySelector('script[nonce]') as HTMLScriptElement)\n            ?.nonce || '';\n\n        this.loadingStatus = APILoadingStatus.LOADING;\n        onLoadingStatusChange(this.loadingStatus);\n        document.head.append(scriptElement);\n      });\n\n      return apiPromise;\n    };\n\n    // for the first load, we declare an importLibrary function that will\n    // be overwritten once the api is loaded.\n    google.maps.importLibrary = libraryName =>\n      loadApi(libraryName).then(() => google.maps.importLibrary(libraryName));\n  }\n}\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState\n} from 'react';\n\nimport {\n  ApiParams,\n  GoogleMapsApiLoader\n} from '../libraries/google-maps-api-loader';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\ntype ImportLibraryFunction = typeof google.maps.importLibrary;\ntype GoogleMapsLibrary = Awaited<ReturnType<ImportLibraryFunction>>;\ntype LoadedLibraries = {[name: string]: GoogleMapsLibrary};\n\nexport interface APIProviderContextValue {\n  status: APILoadingStatus;\n  loadedLibraries: LoadedLibraries;\n  importLibrary: typeof google.maps.importLibrary;\n  mapInstances: Record<string, google.maps.Map>;\n  addMapInstance: (map: google.maps.Map, id?: string) => void;\n  removeMapInstance: (id?: string) => void;\n  clearMapInstances: () => void;\n}\n\nexport const APIProviderContext =\n  React.createContext<APIProviderContextValue | null>(null);\n\nexport type APIProviderProps = {\n  /**\n   * apiKey must be provided to load the Google Maps JavaScript API. To create an API key, see: https://developers.google.com/maps/documentation/javascript/get-api-key\n   * Part of:\n   */\n  apiKey: string;\n  /**\n   * A custom id to reference the script tag can be provided. The default is set to 'google-maps-api'\n   * @default 'google-maps-api'\n   */\n  libraries?: Array<string>;\n  /**\n   * A specific version of the Google Maps JavaScript API can be used.\n   * Read more about versioning: https://developers.google.com/maps/documentation/javascript/versions\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  version?: string;\n  /**\n   * Sets the map to a specific region.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  region?: string;\n  /**\n   * Use a specific language for the map.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  language?: string;\n  /**\n   * auth_referrer_policy can be set to 'origin'.\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  authReferrerPolicy?: string;\n  /**\n   * A function that can be used to execute code after the Google Maps JavaScript API has been loaded.\n   */\n  onLoad?: () => void;\n};\n\n/**\n * local hook to set up the map-instance management context.\n */\nfunction useMapInstances() {\n  const [mapInstances, setMapInstances] = useState<\n    Record<string, google.maps.Map>\n  >({});\n\n  const addMapInstance = (mapInstance: google.maps.Map, id = 'default') => {\n    setMapInstances(instances => ({...instances, [id]: mapInstance}));\n  };\n\n  const removeMapInstance = (id = 'default') => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMapInstances(({[id]: _, ...remaining}) => remaining);\n  };\n\n  const clearMapInstances = () => {\n    setMapInstances({});\n  };\n\n  return {mapInstances, addMapInstance, removeMapInstance, clearMapInstances};\n}\n\n/**\n * local hook to handle the loading of the maps API, returns the current loading status\n * @param props\n */\nfunction useGoogleMapsApiLoader(props: APIProviderProps) {\n  const {onLoad, apiKey, version, libraries = [], ...otherApiParams} = props;\n\n  const [status, setStatus] = useState<APILoadingStatus>(\n    GoogleMapsApiLoader.loadingStatus\n  );\n  const [loadedLibraries, addLoadedLibrary] = useReducer(\n    (\n      loadedLibraries: LoadedLibraries,\n      action: {name: keyof LoadedLibraries; value: LoadedLibraries[string]}\n    ) => {\n      return {...loadedLibraries, [action.name]: action.value};\n    },\n    {}\n  );\n\n  const librariesString = useMemo(() => libraries?.join(','), [libraries]);\n  const serializedParams = useMemo(\n    () => JSON.stringify({apiKey, version, ...otherApiParams}),\n    [apiKey, version, otherApiParams]\n  );\n\n  const importLibrary: typeof google.maps.importLibrary = useCallback(\n    async (name: string) => {\n      if (loadedLibraries[name]) {\n        return loadedLibraries[name];\n      }\n\n      if (!google?.maps?.importLibrary) {\n        throw new Error(\n          '[api-provider-internal] importLibrary was called before ' +\n            'google.maps.importLibrary was defined.'\n        );\n      }\n\n      const res = await window.google.maps.importLibrary(name);\n      addLoadedLibrary({name, value: res});\n\n      return res;\n    },\n    [loadedLibraries]\n  );\n\n  useEffect(\n    () => {\n      (async () => {\n        try {\n          const params: ApiParams = {key: apiKey, ...otherApiParams};\n          if (version) params.v = version;\n          if (librariesString?.length > 0) params.libraries = librariesString;\n\n          await GoogleMapsApiLoader.load(params, status => setStatus(status));\n\n          for (const name of ['core', 'maps', ...libraries]) {\n            await importLibrary(name);\n          }\n\n          if (onLoad) {\n            onLoad();\n          }\n        } catch (error) {\n          console.error('<ApiProvider> failed to load Google Maps API', error);\n        }\n      })();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [apiKey, librariesString, serializedParams]\n  );\n\n  return {\n    status,\n    loadedLibraries,\n    importLibrary\n  };\n}\n\n/**\n * Component to wrap the Google Maps React components and load the Google Maps JavaScript API\n */\nexport const APIProvider = (\n  props: PropsWithChildren<APIProviderProps>\n): ReactElement | null => {\n  const {children, ...loaderProps} = props;\n  const {mapInstances, addMapInstance, removeMapInstance, clearMapInstances} =\n    useMapInstances();\n\n  const {status, loadedLibraries, importLibrary} =\n    useGoogleMapsApiLoader(loaderProps);\n\n  return (\n    <APIProviderContext.Provider\n      value={{\n        mapInstances,\n        addMapInstance,\n        removeMapInstance,\n        clearMapInstances,\n        status,\n        loadedLibraries,\n        importLibrary\n      }}>\n      {children}\n    </APIProviderContext.Provider>\n  );\n};\n","import {useEffect} from 'react';\n\n/**\n * Handlers for all events that could be emitted by map-instances.\n */\nexport type MapEventProps = Partial<{\n  // map view state events\n  onBoundsChanged: (event: MapCameraChangedEvent) => void;\n  onCenterChanged: (event: MapCameraChangedEvent) => void;\n  onHeadingChanged: (event: MapCameraChangedEvent) => void;\n  onTiltChanged: (event: MapCameraChangedEvent) => void;\n  onZoomChanged: (event: MapCameraChangedEvent) => void;\n  onProjectionChanged: (event: MapCameraChangedEvent) => void;\n  onCameraChanged: (event: MapCameraChangedEvent) => void;\n\n  // mouse / touch / pointer events\n  onClick: (event: MapMouseEvent) => void;\n  onDblclick: (event: MapMouseEvent) => void;\n  onContextmenu: (event: MapMouseEvent) => void;\n  onMousemove: (event: MapMouseEvent) => void;\n  onMouseover: (event: MapMouseEvent) => void;\n  onMouseout: (event: MapMouseEvent) => void;\n  onDrag: (event: MapEvent) => void;\n  onDragend: (event: MapEvent) => void;\n  onDragstart: (event: MapEvent) => void;\n\n  // loading events\n  onTilesLoaded: (event: MapEvent) => void;\n  onIdle: (event: MapEvent) => void;\n\n  // configuration events\n  onIsFractionalZoomEnabledChanged: (event: MapEvent) => void;\n  onMapCapabilitiesChanged: (event: MapEvent) => void;\n  onMapTypeIdChanged: (event: MapEvent) => void;\n  onRenderingTypeChanged: (event: MapEvent) => void;\n}>;\n\n/**\n * Sets up effects to bind event-handlers for all event-props in MapEventProps.\n * @internal\n */\nexport function useMapEvents(\n  map: google.maps.Map | null,\n  props: MapEventProps\n) {\n  // note: calling a useEffect hook from within a loop is prohibited by the\n  // rules of hooks, but it's ok here since it's unconditional and the number\n  // and order of iterations is always strictly the same.\n  // (see https://legacy.reactjs.org/docs/hooks-rules.html)\n\n  for (const propName of eventPropNames) {\n    // fixme: this cast is essentially a 'trust me, bro' for typescript, but\n    //   a proper solution seems way too complicated right now\n    const handler = props[propName] as (ev: MapEvent) => void;\n    const eventType = propNameToEventType[propName];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (!map) return;\n      if (!handler) return;\n\n      const listener = google.maps.event.addListener(\n        map,\n        eventType,\n        (ev?: google.maps.MapMouseEvent | google.maps.IconMouseEvent) => {\n          handler(createMapEvent(eventType, map, ev));\n        }\n      );\n\n      return () => listener.remove();\n    }, [map, eventType, handler]);\n  }\n}\n\n/**\n * Create the wrapped map-events used for the event-props.\n * @param type the event type as it is specified to the maps api\n * @param map the map instance the event originates from\n * @param srcEvent the source-event if there is one.\n */\nfunction createMapEvent(\n  type: string,\n  map: google.maps.Map,\n  srcEvent?: google.maps.MapMouseEvent | google.maps.IconMouseEvent\n): MapEvent {\n  const ev: MapEvent = {\n    type,\n    map,\n    detail: {},\n    stoppable: false,\n    stop: () => {}\n  };\n\n  if (cameraEventTypes.includes(type)) {\n    const camEvent = ev as MapCameraChangedEvent;\n\n    const center = map.getCenter();\n    const zoom = map.getZoom();\n    const heading = map.getHeading() || 0;\n    const tilt = map.getTilt() || 0;\n    const bounds = map.getBounds();\n\n    if (!center || !bounds || !Number.isFinite(zoom)) {\n      console.warn(\n        '[createEvent] at least one of the values from the map ' +\n          'returned undefined. This is not expected to happen. Please ' +\n          'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n      );\n    }\n\n    camEvent.detail = {\n      center: center?.toJSON() || {lat: 0, lng: 0},\n      zoom: (zoom as number) || 0,\n      heading: heading as number,\n      tilt: tilt as number,\n      bounds: bounds?.toJSON() || {\n        north: 90,\n        east: 180,\n        south: -90,\n        west: -180\n      }\n    };\n\n    return camEvent;\n  } else if (mouseEventTypes.includes(type)) {\n    if (!srcEvent)\n      throw new Error('[createEvent] mouse events must provide a srcEvent');\n    const mouseEvent = ev as MapMouseEvent;\n\n    mouseEvent.domEvent = srcEvent.domEvent;\n    mouseEvent.stoppable = true;\n    mouseEvent.stop = () => srcEvent.stop();\n\n    mouseEvent.detail = {\n      latLng: srcEvent.latLng?.toJSON() || null,\n      placeId: (srcEvent as google.maps.IconMouseEvent).placeId\n    };\n\n    return mouseEvent;\n  }\n\n  return ev;\n}\n\n/**\n * maps the camelCased names of event-props to the corresponding event-types\n * used in the maps API.\n */\nconst propNameToEventType: {[prop in keyof Required<MapEventProps>]: string} = {\n  onBoundsChanged: 'bounds_changed',\n  onCenterChanged: 'center_changed',\n  onClick: 'click',\n  onContextmenu: 'contextmenu',\n  onDblclick: 'dblclick',\n  onDrag: 'drag',\n  onDragend: 'dragend',\n  onDragstart: 'dragstart',\n  onHeadingChanged: 'heading_changed',\n  onIdle: 'idle',\n  onIsFractionalZoomEnabledChanged: 'isfractionalzoomenabled_changed',\n  onMapCapabilitiesChanged: 'mapcapabilities_changed',\n  onMapTypeIdChanged: 'maptypeid_changed',\n  onMousemove: 'mousemove',\n  onMouseout: 'mouseout',\n  onMouseover: 'mouseover',\n  onProjectionChanged: 'projection_changed',\n  onRenderingTypeChanged: 'renderingtype_changed',\n  onTilesLoaded: 'tilesloaded',\n  onTiltChanged: 'tilt_changed',\n  onZoomChanged: 'zoom_changed',\n\n  // note: onCameraChanged is an alias for the bounds_changed event,\n  // since that is going to be fired in every situation where the camera is\n  // updated.\n  onCameraChanged: 'bounds_changed'\n} as const;\n\nconst cameraEventTypes = [\n  'bounds_changed',\n  'center_changed',\n  'heading_changed',\n  'projection_changed',\n  'tilt_changed',\n  'zoom_changed'\n];\n\nconst mouseEventTypes = [\n  'click',\n  'contextmenu',\n  'dblclick',\n  'mousemove',\n  'mouseout',\n  'mouseover'\n];\n\ntype MapEventPropName = keyof MapEventProps;\nconst eventPropNames = Object.keys(propNameToEventType) as MapEventPropName[];\n\nexport type MapEvent<T = unknown> = {\n  type: string;\n  map: google.maps.Map;\n  detail: T;\n\n  stoppable: boolean;\n  stop: () => void;\n  domEvent?: MouseEvent | TouchEvent | PointerEvent | KeyboardEvent | Event;\n};\n\nexport type MapMouseEvent = MapEvent<{\n  latLng: google.maps.LatLngLiteral | null;\n  placeId: string | null;\n}>;\n\nexport type MapCameraChangedEvent = MapEvent<{\n  center: google.maps.LatLngLiteral;\n  bounds: google.maps.LatLngBoundsLiteral;\n  zoom: number;\n  heading: number;\n  tilt: number;\n}>;\n","import {DependencyList, EffectCallback, useEffect, useRef} from 'react';\nimport isDeepEqual from 'fast-deep-equal';\n\nexport function useDeepCompareEffect(\n  effect: EffectCallback,\n  deps: DependencyList\n) {\n  const ref = useRef<DependencyList | undefined>(undefined);\n\n  if (!ref.current || !isDeepEqual(deps, ref.current)) {\n    ref.current = deps;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect, ref.current);\n}\n","import {MapProps} from '../map';\nimport {useDeepCompareEffect} from '../../libraries/use-deep-compare-effect';\n\nconst mapOptionKeys = new Set([\n  'backgroundColor',\n  'clickableIcons',\n  'controlSize',\n  'disableDefaultUI',\n  'disableDoubleClickZoom',\n  'draggable',\n  'draggableCursor',\n  'draggingCursor',\n  'fullscreenControl',\n  'fullscreenControlOptions',\n  'gestureHandling',\n  'isFractionalZoomEnabled',\n  'keyboardShortcuts',\n  'mapTypeControl',\n  'mapTypeControlOptions',\n  'mapTypeId',\n  'maxZoom',\n  'minZoom',\n  'noClear',\n  'panControl',\n  'panControlOptions',\n  'restriction',\n  'rotateControl',\n  'rotateControlOptions',\n  'scaleControl',\n  'scaleControlOptions',\n  'scrollwheel',\n  'streetView',\n  'streetViewControl',\n  'streetViewControlOptions',\n  'styles',\n  'zoomControl',\n  'zoomControlOptions'\n]);\n\n/**\n * Internal hook to update the map-options when props are changed.\n *\n * @param map the map instance\n * @param mapProps the props to update the map-instance with\n * @internal\n */\nexport function useMapOptions(map: google.maps.Map | null, mapProps: MapProps) {\n  /* eslint-disable react-hooks/exhaustive-deps --\n   *\n   * The following effects aren't triggered when the map is changed.\n   * In that case, the values will be or have been passed to the map\n   * constructor via mapOptions.\n   */\n\n  const mapOptions: google.maps.MapOptions = {};\n  const keys = Object.keys(mapProps) as (keyof google.maps.MapOptions)[];\n  for (const key of keys) {\n    if (!mapOptionKeys.has(key)) continue;\n\n    mapOptions[key] = mapProps[key] as never;\n  }\n\n  // update the map options when mapOptions is changed\n  // Note: due to the destructuring above, mapOptions will be seen as changed\n  //   with every re-render, so we're assuming the maps-api will properly\n  //   deal with unchanged option-values passed into setOptions.\n  useDeepCompareEffect(() => {\n    if (!map) return;\n\n    map.setOptions(mapOptions);\n  }, [mapOptions]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n}\n","import {useContext} from 'react';\nimport {APIProviderContext} from '../components/api-provider';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\nexport function useApiLoadingStatus(): APILoadingStatus {\n  return useContext(APIProviderContext)?.status || APILoadingStatus.NOT_LOADED;\n}\n","import {useLayoutEffect} from 'react';\n\nexport type DeckGlCompatProps = {\n  /**\n   * Viewport from deck.gl\n   */\n  viewport?: unknown;\n  /**\n   * View state from deck.gl\n   */\n  viewState?: Record<string, unknown>;\n  /**\n   * Initial View State from deck.gl\n   */\n  initialViewState?: Record<string, unknown>;\n};\n\n/**\n * Internal hook that updates the camera when deck.gl viewState changes.\n * @internal\n */\nexport function useDeckGLCameraUpdate(\n  map: google.maps.Map | null,\n  props: DeckGlCompatProps\n) {\n  const {viewport, viewState} = props;\n  const isDeckGlControlled = !!viewport;\n\n  useLayoutEffect(() => {\n    if (!map || !viewState) return;\n\n    const {\n      latitude,\n      longitude,\n      bearing: heading,\n      pitch: tilt,\n      zoom\n    } = viewState as Record<string, number>;\n\n    map.moveCamera({\n      center: {lat: latitude, lng: longitude},\n      heading,\n      tilt,\n      zoom: zoom + 1\n    });\n  }, [map, viewState]);\n\n  return isDeckGlControlled;\n}\n","export function isLatLngLiteral(\n  obj: unknown\n): obj is google.maps.LatLngLiteral {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('lat' in obj && 'lng' in obj)) return false;\n\n  return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);\n}\n\nexport function latLngEquals(\n  a: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null,\n  b: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null\n): boolean {\n  if (!a || !b) return false;\n  const A = toLatLngLiteral(a);\n  const B = toLatLngLiteral(b);\n  if (A.lat !== B.lat || A.lng !== B.lng) return false;\n  return true;\n}\n\nexport function toLatLngLiteral(\n  obj: google.maps.LatLngLiteral | google.maps.LatLng\n): google.maps.LatLngLiteral {\n  if (isLatLngLiteral(obj)) return obj;\n\n  return obj.toJSON();\n}\n","import {useLayoutEffect} from 'react';\nimport {CameraStateRef} from './use-tracked-camera-state-ref';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {MapProps} from '../map';\n\nexport function useMapCameraParams(\n  map: google.maps.Map | null,\n  cameraStateRef: CameraStateRef,\n  mapProps: MapProps\n) {\n  const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;\n\n  let lat: number | null = null;\n  let lng: number | null = null;\n\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const zoom: number | null = Number.isFinite(mapProps.zoom)\n    ? (mapProps.zoom as number)\n    : null;\n  const heading: number | null = Number.isFinite(mapProps.heading)\n    ? (mapProps.heading as number)\n    : null;\n  const tilt: number | null = Number.isFinite(mapProps.tilt)\n    ? (mapProps.tilt as number)\n    : null;\n\n  // the following effect runs for every render of the map component and checks\n  // if there are differences between the known state of the map instance\n  // (cameraStateRef, which is updated by all bounds_changed events) and the\n  // desired state in the props.\n\n  useLayoutEffect(() => {\n    if (!map) return;\n\n    const nextCamera: google.maps.CameraOptions = {};\n    let needsUpdate = false;\n\n    if (\n      lat !== null &&\n      lng !== null &&\n      (cameraStateRef.current.center.lat !== lat ||\n        cameraStateRef.current.center.lng !== lng)\n    ) {\n      nextCamera.center = {lat, lng};\n      needsUpdate = true;\n    }\n\n    if (zoom !== null && cameraStateRef.current.zoom !== zoom) {\n      nextCamera.zoom = zoom as number;\n      needsUpdate = true;\n    }\n\n    if (heading !== null && cameraStateRef.current.heading !== heading) {\n      nextCamera.heading = heading as number;\n      needsUpdate = true;\n    }\n\n    if (tilt !== null && cameraStateRef.current.tilt !== tilt) {\n      nextCamera.tilt = tilt as number;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      map.moveCamera(nextCamera);\n    }\n  });\n}\n","import React, {CSSProperties} from 'react';\n\nexport const AuthFailureMessage = () => {\n  const style: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    zIndex: 999,\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    textAlign: 'center',\n    justifyContent: 'center',\n    fontSize: '.8rem',\n    color: 'rgba(0,0,0,0.6)',\n    background: '#dddddd',\n    padding: '1rem 1.5rem'\n  };\n\n  return (\n    <div style={style}>\n      <h2>Error: AuthFailure</h2>\n      <p>\n        A problem with your API key prevents the map from rendering correctly.\n        Please make sure the value of the <code>APIProvider.apiKey</code> prop\n        is correct. Check the error-message in the console for further details.\n      </p>\n    </div>\n  );\n};\n","import {Ref, useCallback, useState} from 'react';\n\nexport function useCallbackRef<T>() {\n  const [el, setEl] = useState<T | null>(null);\n  const ref = useCallback((value: T) => setEl(value), [setEl]);\n\n  return [el, ref as Ref<T>] as const;\n}\n","import {useApiLoadingStatus} from './use-api-loading-status';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n/**\n * Hook to check if the Google Maps API is loaded\n */\nexport function useApiIsLoaded(): boolean {\n  const status = useApiLoadingStatus();\n\n  return status === APILoadingStatus.LOADED;\n}\n","import {useReducer} from 'react';\n\nexport function useForceUpdate(): () => void {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  return forceUpdate;\n}\n","import {MutableRefObject, useEffect, useRef} from 'react';\nimport {useForceUpdate} from '../../libraries/use-force-update';\n\nexport type CameraState = {\n  center: google.maps.LatLngLiteral;\n  heading: number;\n  tilt: number;\n  zoom: number;\n};\n\nexport type CameraStateRef = MutableRefObject<CameraState>;\n\nfunction handleBoundsChange(map: google.maps.Map, ref: CameraStateRef) {\n  const center = map.getCenter();\n  const zoom = map.getZoom();\n  const heading = map.getHeading() || 0;\n  const tilt = map.getTilt() || 0;\n  const bounds = map.getBounds();\n\n  if (!center || !bounds || !Number.isFinite(zoom)) {\n    console.warn(\n      '[useTrackedCameraState] at least one of the values from the map ' +\n        'returned undefined. This is not expected to happen. Please ' +\n        'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n    );\n  }\n\n  // fixme: do we need the `undefined` cases for the camera-params? When are they used in the maps API?\n  Object.assign(ref.current, {\n    center: center?.toJSON() || {lat: 0, lng: 0},\n    zoom: (zoom as number) || 0,\n    heading: heading as number,\n    tilt: tilt as number\n  });\n}\n\n/**\n * Creates a mutable ref object to track the last known state of the map camera.\n * This is used in `useMapCameraParams` to reduce stuttering in normal operation\n * by avoiding updates of the map camera with values that have already been processed.\n */\nexport function useTrackedCameraStateRef(\n  map: google.maps.Map | null\n): CameraStateRef {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef<CameraState>({\n    center: {lat: 0, lng: 0},\n    heading: 0,\n    tilt: 0,\n    zoom: 0\n  });\n\n  // Record camera state with every bounds_changed event dispatched by the map.\n  // This data is used to prevent feeding these values back to the\n  // map-instance when a typical \"controlled component\" setup (state variable is\n  // fed into and updated by the map).\n  useEffect(() => {\n    if (!map) return;\n\n    const listener = google.maps.event.addListener(\n      map,\n      'bounds_changed',\n      () => {\n        handleBoundsChange(map, ref);\n\n        // When an event is occured, we have to update during the next cycle.\n        // The application could decide to ignore the event and not update any\n        // camera props of the map, meaning that in that case we will have to\n        // 'undo' the change to the camera.\n        forceUpdate();\n      }\n    );\n\n    return () => listener.remove();\n  }, [map, forceUpdate]);\n\n  return ref;\n}\n","import {Ref, useEffect, useRef, useState} from 'react';\n\nimport {MapProps} from '../map';\nimport {APIProviderContextValue} from '../api-provider';\n\nimport {useCallbackRef} from '../../libraries/use-callback-ref';\nimport {useApiIsLoaded} from '../../hooks/use-api-is-loaded';\nimport {\n  CameraState,\n  CameraStateRef,\n  useTrackedCameraStateRef\n} from './use-tracked-camera-state-ref';\n\n/**\n * The main hook takes care of creating map-instances and registering them in\n * the api-provider context.\n * @return a tuple of the map-instance created (or null) and the callback\n *   ref that will be used to pass the map-container into this hook.\n * @internal\n */\nexport function useMapInstance(\n  props: MapProps,\n  context: APIProviderContextValue\n): readonly [\n  map: google.maps.Map | null,\n  containerRef: Ref<HTMLDivElement>,\n  cameraStateRef: CameraStateRef\n] {\n  const apiIsLoaded = useApiIsLoaded();\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [container, containerRef] = useCallbackRef<HTMLDivElement>();\n\n  const cameraStateRef = useTrackedCameraStateRef(map);\n\n  const {\n    id,\n    defaultBounds,\n    defaultCenter,\n    defaultZoom,\n    defaultHeading,\n    defaultTilt,\n\n    ...mapOptions\n  } = props;\n\n  // apply default camera props if available and not overwritten by controlled props\n  if (!mapOptions.center && defaultCenter) mapOptions.center = defaultCenter;\n  if (!mapOptions.zoom && Number.isFinite(defaultZoom))\n    mapOptions.zoom = defaultZoom;\n  if (!mapOptions.heading && Number.isFinite(defaultHeading))\n    mapOptions.heading = defaultHeading;\n  if (!mapOptions.tilt && Number.isFinite(defaultTilt))\n    mapOptions.tilt = defaultTilt;\n\n  for (const key of Object.keys(mapOptions) as (keyof typeof mapOptions)[])\n    if (mapOptions[key] === undefined) delete mapOptions[key];\n\n  const savedMapStateRef = useRef<{\n    mapId?: string | null;\n    cameraState: CameraState;\n  }>();\n\n  // create the map instance and register it in the context\n  useEffect(\n    () => {\n      if (!container || !apiIsLoaded) return;\n\n      const {addMapInstance, removeMapInstance} = context;\n      const mapId = props.mapId;\n      const newMap = new google.maps.Map(container, mapOptions);\n\n      setMap(newMap);\n      addMapInstance(newMap, id);\n\n      if (defaultBounds) {\n        newMap.fitBounds(defaultBounds);\n      }\n\n      // the savedMapState is used to restore the camera parameters when the mapId is changed\n      if (savedMapStateRef.current) {\n        const {mapId: savedMapId, cameraState: savedCameraState} =\n          savedMapStateRef.current;\n        if (savedMapId !== mapId) {\n          newMap.setOptions(savedCameraState);\n        }\n      }\n\n      return () => {\n        savedMapStateRef.current = {\n          mapId,\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          cameraState: cameraStateRef.current\n        };\n\n        // remove all event-listeners to minimize memory-leaks\n        google.maps.event.clearInstanceListeners(newMap);\n\n        setMap(null);\n        removeMapInstance(id);\n      };\n    },\n\n    // some dependencies are ignored in the list below:\n    //  - defaultBounds and the default* camera props will only be used once, and\n    //    changes should be ignored\n    //  - mapOptions has special hooks that take care of updating the options\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [container, apiIsLoaded, id, props.mapId]\n  );\n\n  return [map, containerRef, cameraStateRef] as const;\n}\n","/* eslint-disable complexity */\nimport React, {\n  CSSProperties,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo\n} from 'react';\n\nimport {APIProviderContext} from '../api-provider';\n\nimport {MapEventProps, useMapEvents} from './use-map-events';\nimport {useMapOptions} from './use-map-options';\nimport {useApiLoadingStatus} from '../../hooks/use-api-loading-status';\nimport {APILoadingStatus} from '../../libraries/api-loading-status';\nimport {\n  DeckGlCompatProps,\n  useDeckGLCameraUpdate\n} from './use-deckgl-camera-update';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {useMapCameraParams} from './use-map-camera-params';\nimport {AuthFailureMessage} from './auth-failure-message';\nimport {useMapInstance} from './use-map-instance';\n\nexport interface GoogleMapsContextValue {\n  map: google.maps.Map | null;\n}\nexport const GoogleMapsContext =\n  React.createContext<GoogleMapsContextValue | null>(null);\n\nexport type {\n  MapCameraChangedEvent,\n  MapEvent,\n  MapEventProps,\n  MapMouseEvent\n} from './use-map-events';\n\nexport type MapCameraProps = {\n  center: google.maps.LatLngLiteral;\n  zoom: number;\n  heading?: number;\n  tilt?: number;\n};\n\n/**\n * Props for the Google Maps Map Component\n */\nexport type MapProps = google.maps.MapOptions &\n  MapEventProps &\n  DeckGlCompatProps & {\n    /**\n     * An id for the map, this is required when multiple maps are present\n     * in the same APIProvider context.\n     */\n    id?: string;\n    /**\n     * Additional style rules to apply to the map dom-element.\n     */\n    style?: CSSProperties;\n    /**\n     * Additional css class-name to apply to the element containing the map.\n     */\n    className?: string;\n    /**\n     * Indicates that the map will be controlled externally. Disables all controls provided by the map itself.\n     */\n    controlled?: boolean;\n\n    defaultCenter?: google.maps.LatLngLiteral;\n    defaultZoom?: number;\n    defaultHeading?: number;\n    defaultTilt?: number;\n    /**\n     * Alternative way to specify the default camera props as a geographic region that should be fully visible\n     */\n    defaultBounds?: google.maps.LatLngBoundsLiteral;\n  };\n\nexport const Map = (props: PropsWithChildren<MapProps>) => {\n  const {children, id, className, style} = props;\n  const context = useContext(APIProviderContext);\n  const loadingStatus = useApiLoadingStatus();\n\n  if (!context) {\n    throw new Error(\n      '<Map> can only be used inside an <ApiProvider> component.'\n    );\n  }\n\n  const [map, mapRef, cameraStateRef] = useMapInstance(props, context);\n\n  useMapCameraParams(map, cameraStateRef, props);\n  useMapEvents(map, props);\n  useMapOptions(map, props);\n\n  const isDeckGlControlled = useDeckGLCameraUpdate(map, props);\n  const isControlledExternally = !!props.controlled;\n\n  // disable interactions with the map for externally controlled maps\n  useEffect(() => {\n    if (!map) return;\n\n    // fixme: this doesn't seem to belong here (and it's mostly there for convenience anyway).\n    //   The reasoning is that a deck.gl canvas will be put on top of the map, rendering\n    //   any default map controls pretty much useless\n    if (isDeckGlControlled) {\n      map.setOptions({disableDefaultUI: true});\n    }\n\n    // disable all control-inputs when the map is controlled externally\n    if (isDeckGlControlled || isControlledExternally) {\n      map.setOptions({\n        gestureHandling: 'none',\n        keyboardShortcuts: false\n      });\n    }\n\n    return () => {\n      map.setOptions({\n        gestureHandling: props.gestureHandling,\n        keyboardShortcuts: props.keyboardShortcuts\n      });\n    };\n  }, [\n    map,\n    isDeckGlControlled,\n    isControlledExternally,\n    props.gestureHandling,\n    props.keyboardShortcuts\n  ]);\n\n  // setup a stable cameraOptions object that can be used as dependency\n  const center = props.center ? toLatLngLiteral(props.center) : null;\n  let lat: number | null = null;\n  let lng: number | null = null;\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const cameraOptions: google.maps.CameraOptions = useMemo(() => {\n    return {\n      center: {lat: lat ?? 0, lng: lng ?? 0},\n      zoom: props.zoom ?? 0,\n      heading: props.heading ?? 0,\n      tilt: props.tilt ?? 0\n    };\n  }, [lat, lng, props.zoom, props.heading, props.tilt]);\n\n  // externally controlled mode: reject all camera changes that don't correspond to changes in props\n  useLayoutEffect(() => {\n    if (!map || !isControlledExternally) return;\n\n    map.moveCamera(cameraOptions);\n    const listener = map.addListener('bounds_changed', () => {\n      map.moveCamera(cameraOptions);\n    });\n\n    return () => listener.remove();\n  }, [map, isControlledExternally, cameraOptions]);\n\n  const combinedStyle: CSSProperties = useMemo(\n    () => ({\n      width: '100%',\n      height: '100%',\n      // when using deckgl, the map should be sent to the back\n      zIndex: isDeckGlControlled ? -1 : 0,\n\n      ...style\n    }),\n    [style, isDeckGlControlled]\n  );\n\n  if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {\n    return (\n      <div\n        style={{position: 'relative', ...(className ? {} : combinedStyle)}}\n        className={className}>\n        <AuthFailureMessage />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={mapRef}\n      data-testid={'map'}\n      style={className ? undefined : combinedStyle}\n      className={className}\n      {...(id ? {id} : {})}>\n      {map ? (\n        <GoogleMapsContext.Provider value={{map}}>\n          {children}\n        </GoogleMapsContext.Provider>\n      ) : null}\n    </div>\n  );\n};\nMap.deckGLViewProps = true;\n","import {useContext, useEffect} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {useApiIsLoaded} from './use-api-is-loaded';\n\ninterface ApiLibraries {\n  core: google.maps.CoreLibrary;\n  maps: google.maps.MapsLibrary;\n  places: google.maps.PlacesLibrary;\n  geocoding: google.maps.GeocodingLibrary;\n  routes: google.maps.RoutesLibrary;\n  marker: google.maps.MarkerLibrary;\n  geometry: google.maps.GeometryLibrary;\n  elevation: google.maps.ElevationLibrary;\n  streetView: google.maps.StreetViewLibrary;\n  journeySharing: google.maps.JourneySharingLibrary;\n  drawing: google.maps.DrawingLibrary;\n  visualization: google.maps.VisualizationLibrary;\n}\n\nexport function useMapsLibrary<\n  K extends keyof ApiLibraries,\n  V extends ApiLibraries[K]\n>(name: K): V | null;\n\nexport function useMapsLibrary(name: string) {\n  const apiIsLoaded = useApiIsLoaded();\n  const ctx = useContext(APIProviderContext);\n\n  useEffect(() => {\n    if (!apiIsLoaded || !ctx) return;\n\n    // Trigger loading the libraries via our proxy-method.\n    // The returned promise is ignored, since importLibrary will update loadedLibraries\n    // list in the context, triggering a re-render.\n    void ctx.importLibrary(name);\n  }, [apiIsLoaded, ctx, name]);\n\n  return ctx?.loadedLibraries[name] || null;\n}\n","/* eslint-disable complexity */\nimport React, {\n  Children,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useState\n} from 'react';\n\nimport {createPortal} from 'react-dom';\nimport {GoogleMapsContext} from './map';\n\nimport type {Ref, PropsWithChildren} from 'react';\nimport {useMapsLibrary} from '../hooks/use-maps-library';\n\nexport interface AdvancedMarkerContextValue {\n  marker: google.maps.marker.AdvancedMarkerElement;\n}\n\nexport const AdvancedMarkerContext =\n  React.createContext<AdvancedMarkerContextValue | null>(null);\n\ntype AdvancedMarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type AdvancedMarkerProps = PropsWithChildren<\n  Omit<google.maps.marker.AdvancedMarkerElementOptions, 'gmpDraggable'> &\n    AdvancedMarkerEventProps & {\n      /**\n       * className to add a class to the advanced marker element\n       * Can only be used with HTML Marker content\n       */\n      className?: string;\n      draggable?: boolean;\n    }\n>;\n\nexport type AdvancedMarkerRef = google.maps.marker.AdvancedMarkerElement | null;\nfunction useAdvancedMarker(props: AdvancedMarkerProps) {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n  const [contentContainer, setContentContainer] =\n    useState<HTMLDivElement | null>(null);\n\n  const map = useContext(GoogleMapsContext)?.map;\n  const markerLibrary = useMapsLibrary('marker');\n\n  const {\n    children,\n    className,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    collisionBehavior,\n    draggable,\n    position,\n    title,\n    zIndex\n  } = props;\n\n  const numChilds = Children.count(children);\n\n  // create marker instance and add it to the map when map becomes available\n  useEffect(() => {\n    if (!map || !markerLibrary) return;\n\n    const newMarker = new markerLibrary.AdvancedMarkerElement();\n    newMarker.map = map;\n\n    setMarker(newMarker);\n\n    // create container for marker content if there are children\n    if (numChilds > 0) {\n      const el = document.createElement('div');\n      if (className) el.className = className;\n\n      newMarker.content = el;\n\n      setContentContainer(el);\n    }\n\n    return () => {\n      newMarker.map = null;\n      setMarker(null);\n      setContentContainer(null);\n    };\n    // We do not want to re-render the whole marker when the className changes\n    // because that causes a short flickering of the marker.\n    // The className update is handled in the useEffect below.\n    // Excluding the className from the dependency array onm purpose here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, markerLibrary, numChilds]);\n\n  // update className of advanced marker element\n  useEffect(() => {\n    if (!contentContainer) return;\n    contentContainer.className = className ?? '';\n  }, [contentContainer, className]);\n\n  // bind all marker events\n  useEffect(() => {\n    if (!marker) return;\n\n    const gme = google.maps.event;\n\n    if (onClick) gme.addListener(marker, 'click', onClick);\n    if (onDrag) gme.addListener(marker, 'drag', onDrag);\n    if (onDragStart) gme.addListener(marker, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(marker, 'dragend', onDragEnd);\n\n    if ((onDrag || onDragStart || onDragEnd) && !draggable) {\n      console.warn(\n        'You need to set the marker to draggable to listen to drag-events.'\n      );\n    }\n\n    const m = marker;\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [marker, draggable, onClick, onDragStart, onDrag, onDragEnd]);\n\n  // update other marker props when changed\n  useEffect(() => {\n    if (!marker) return;\n\n    if (position !== undefined) marker.position = position;\n    if (draggable !== undefined) marker.gmpDraggable = draggable;\n    if (collisionBehavior !== undefined)\n      marker.collisionBehavior = collisionBehavior;\n    if (zIndex !== undefined) marker.zIndex = zIndex;\n    if (typeof title === 'string') marker.title = title;\n  }, [marker, position, draggable, collisionBehavior, zIndex, title]);\n\n  return [marker, contentContainer] as const;\n}\n\nexport const AdvancedMarker = forwardRef(\n  (props: AdvancedMarkerProps, ref: Ref<AdvancedMarkerRef>) => {\n    const {children} = props;\n    const [marker, contentContainer] = useAdvancedMarker(props);\n\n    useImperativeHandle(ref, () => marker, [marker]);\n\n    if (!marker) {\n      return null;\n    }\n\n    return (\n      <AdvancedMarkerContext.Provider value={{marker}}>\n        {contentContainer !== null && createPortal(children, contentContainer)}\n      </AdvancedMarkerContext.Provider>\n    );\n  }\n);\n\nexport function useAdvancedMarkerRef() {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n\n  const refCallback = useCallback((m: AdvancedMarkerRef | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n","/* eslint-disable complexity */\nimport React, {\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport {createPortal} from 'react-dom';\n\nimport {GoogleMapsContext} from './map';\n\n/**\n * Props for the Info Window Component\n */\nexport type InfoWindowProps = google.maps.InfoWindowOptions & {\n  onCloseClick?: () => void;\n  anchor?: google.maps.Marker | google.maps.marker.AdvancedMarkerElement | null;\n};\n\n/**\n * Component to render a Google Maps Info Window\n */\nexport const InfoWindow = (props: PropsWithChildren<InfoWindowProps>) => {\n  const {children, anchor, onCloseClick, ...infoWindowOptions} = props;\n  const map = useContext(GoogleMapsContext)?.map;\n\n  const infoWindowRef = useRef<google.maps.InfoWindow | null>(null);\n  const [contentContainer, setContentContainer] =\n    useState<HTMLDivElement | null>(null);\n\n  // create infowindow once map is available\n  useEffect(() => {\n    if (!map) return;\n\n    const newInfowindow = new google.maps.InfoWindow(infoWindowOptions);\n\n    // Add content to info window\n    const el = document.createElement('div');\n    newInfowindow.setContent(el);\n\n    infoWindowRef.current = newInfowindow;\n    setContentContainer(el);\n\n    // Cleanup info window and event listeners on unmount\n    return () => {\n      google.maps.event.clearInstanceListeners(newInfowindow);\n\n      newInfowindow.close();\n      el.remove();\n\n      setContentContainer(null);\n    };\n\n    // `infoWindowOptions` is missing from dependencies:\n    //\n    // we don't want to re-render a whole new infowindow\n    // when the options change to prevent flickering.\n    // Update of infoWindow options is handled in the useEffect below.\n    //\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, children]);\n\n  // Update infoWindowOptions\n  useEffect(() => {\n    infoWindowRef.current?.setOptions(infoWindowOptions);\n  }, [infoWindowOptions]);\n\n  // Handle the close click callback\n  useEffect(() => {\n    if (!infoWindowRef.current) return;\n\n    let listener: google.maps.MapsEventListener | null = null;\n\n    if (onCloseClick) {\n      listener = google.maps.event.addListener(\n        infoWindowRef.current,\n        'closeclick',\n        onCloseClick\n      );\n    }\n\n    return () => {\n      if (listener) listener.remove();\n    };\n  }, [onCloseClick]);\n\n  // Open info window after content container is set\n  useEffect(() => {\n    // anchor === null means an anchor is defined but not ready yet.\n    if (!contentContainer || !infoWindowRef.current || anchor === null) return;\n\n    const openOptions: google.maps.InfoWindowOpenOptions = {map};\n\n    if (anchor) {\n      openOptions.anchor = anchor;\n    }\n\n    infoWindowRef.current.open(openOptions);\n  }, [contentContainer, infoWindowRef, anchor, map]);\n\n  return (\n    <>{contentContainer !== null && createPortal(children, contentContainer)}</>\n  );\n};\n","const shownMessages = new Set();\n\nexport function logErrorOnce(...args: Parameters<typeof console.error>) {\n  const key = JSON.stringify(args);\n\n  if (!shownMessages.has(key)) {\n    shownMessages.add(key);\n\n    console.error(...args);\n  }\n}\n","import {useContext} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {GoogleMapsContext} from '../components/map';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Retrieves a map-instance from the context. This is either an instance\n * identified by id or the parent map instance if no id is specified.\n * Returns null if neither can be found.\n */\nexport const useMap = (id: string | null = null): google.maps.Map | null => {\n  const ctx = useContext(APIProviderContext);\n  const {map} = useContext(GoogleMapsContext) || {};\n\n  if (ctx === null) {\n    logErrorOnce(\n      'useMap(): failed to retrieve APIProviderContext. ' +\n        'Make sure that the <APIProvider> component exists and that the ' +\n        'component you are calling `useMap()` from is a sibling of the ' +\n        '<APIProvider>.'\n    );\n\n    return null;\n  }\n\n  const {mapInstances} = ctx;\n\n  // if an id is specified, the corresponding map or null is returned\n  if (id !== null) return mapInstances[id] || null;\n\n  // otherwise, return the closest ancestor\n  if (map) return map;\n\n  // finally, return the default map instance\n  return mapInstances['default'] || null;\n};\n","import {useEffect, useMemo} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useMap} from '../hooks/use-map';\n\nimport type {PropsWithChildren} from 'react';\n\ntype MapControlProps = PropsWithChildren<{\n  position: ControlPosition;\n}>;\n\n/**\n * Copy of the `google.maps.ControlPosition` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */\nexport const ControlPosition = {\n  TOP_LEFT: 1,\n  TOP_CENTER: 2,\n  TOP: 2,\n  TOP_RIGHT: 3,\n  LEFT_CENTER: 4,\n  LEFT_TOP: 5,\n  LEFT: 5,\n  LEFT_BOTTOM: 6,\n  RIGHT_TOP: 7,\n  RIGHT: 7,\n  RIGHT_CENTER: 8,\n  RIGHT_BOTTOM: 9,\n  BOTTOM_LEFT: 10,\n  BOTTOM_CENTER: 11,\n  BOTTOM: 11,\n  BOTTOM_RIGHT: 12,\n  CENTER: 13,\n  BLOCK_START_INLINE_START: 14,\n  BLOCK_START_INLINE_CENTER: 15,\n  BLOCK_START_INLINE_END: 16,\n  INLINE_START_BLOCK_CENTER: 17,\n  INLINE_START_BLOCK_START: 18,\n  INLINE_START_BLOCK_END: 19,\n  INLINE_END_BLOCK_START: 20,\n  INLINE_END_BLOCK_CENTER: 21,\n  INLINE_END_BLOCK_END: 22,\n  BLOCK_END_INLINE_START: 23,\n  BLOCK_END_INLINE_CENTER: 24,\n  BLOCK_END_INLINE_END: 25\n} as const;\nexport type ControlPosition =\n  (typeof ControlPosition)[keyof typeof ControlPosition];\n\nexport const MapControl = ({children, position}: MapControlProps) => {\n  const controlContainer = useMemo(() => document.createElement('div'), []);\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) return;\n\n    const controls = map.controls[position];\n\n    controls.push(controlContainer);\n\n    return () => {\n      const index = controls.getArray().indexOf(controlContainer);\n      controls.removeAt(index);\n    };\n  }, [controlContainer, map, position]);\n\n  return createPortal(children, controlContainer);\n};\n","/* eslint-disable complexity */\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useState\n} from 'react';\n\nimport {GoogleMapsContext} from './map';\n\nimport type {Ref} from 'react';\n\ntype MarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type MarkerProps = google.maps.MarkerOptions & MarkerEventProps;\n\nexport type MarkerRef = Ref<google.maps.Marker | null>;\n\nfunction useMarker(props: MarkerProps) {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n  const map = useContext(GoogleMapsContext)?.map;\n\n  const {\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut,\n    ...markerOptions\n  } = props;\n\n  const {position, draggable} = markerOptions;\n\n  // create marker instance and add to the map once the map is available\n  useEffect(() => {\n    if (!map) {\n      if (map === undefined)\n        console.error('<Marker> has to be inside a Map component.');\n\n      return;\n    }\n\n    const newMarker = new google.maps.Marker(markerOptions);\n    newMarker.setMap(map);\n    setMarker(newMarker);\n\n    return () => {\n      newMarker.setMap(null);\n      setMarker(null);\n    };\n    // We do not want to re-render the whole marker when the options change.\n    // Marker options update is handled in a useEffect below.\n    // Excluding markerOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  // attach and re-attach event-handlers when any of the properties change\n  useEffect(() => {\n    if (!marker) return;\n\n    const m = marker;\n\n    // Add event listeners\n    const gme = google.maps.event;\n\n    if (onClick) gme.addListener(m, 'click', onClick);\n    if (onDrag) gme.addListener(m, 'drag', onDrag);\n    if (onDragStart) gme.addListener(m, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(m, 'dragend', onDragEnd);\n    if (onMouseOver) gme.addListener(m, 'mouseover', onMouseOver);\n    if (onMouseOut) gme.addListener(m, 'mouseout', onMouseOut);\n\n    marker.setDraggable(Boolean(draggable));\n\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [\n    marker,\n    draggable,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut\n  ]);\n\n  // update markerOptions (note the dependencies aren't properly checked\n  // here, we just assume that setOptions is smart enough to not waste a\n  // lot of time updating values that didn't change)\n  useEffect(() => {\n    if (!marker) return;\n    if (markerOptions) marker.setOptions(markerOptions);\n  }, [marker, markerOptions]);\n\n  // update position when changed\n  useEffect(() => {\n    // Should not update position when draggable\n    if (draggable || !position || !marker) return;\n\n    marker.setPosition(position);\n  }, [draggable, position, marker]);\n\n  return marker;\n}\n\n/**\n * Component to render a Google Maps Marker on a map\n */\nexport const Marker = forwardRef((props: MarkerProps, ref: MarkerRef) => {\n  const marker = useMarker(props);\n\n  useImperativeHandle(ref, () => marker, [marker]);\n\n  return <></>;\n});\n\nexport function useMarkerRef() {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n\n  const refCallback = useCallback((m: google.maps.Marker | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n","import {\n  Children,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo\n} from 'react';\nimport {AdvancedMarkerContext} from './advanced-marker';\nimport {createPortal} from 'react-dom';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Props for the Pin component\n */\nexport type PinProps = google.maps.marker.PinElementOptions;\n\n/**\n * Component to render a google maps marker Pin View\n */\nexport const Pin = (props: PropsWithChildren<PinProps>) => {\n  const advancedMarker = useContext(AdvancedMarkerContext)?.marker;\n  const glyphContainer = useMemo(() => document.createElement('div'), []);\n\n  // Create Pin View instance\n  useEffect(() => {\n    if (!advancedMarker) {\n      if (advancedMarker === undefined) {\n        console.error(\n          'The <Pin> component can only be used inside <AdvancedMarker>.'\n        );\n      }\n\n      return;\n    }\n\n    if (props.glyph && props.children) {\n      logErrorOnce(\n        'The <Pin> component only uses children to render the glyph if both the glyph property and children are present.'\n      );\n    }\n\n    if (Children.count(props.children) > 1) {\n      logErrorOnce(\n        'Passing multiple children to the <Pin> component might lead to unexpected results.'\n      );\n    }\n\n    const pinViewOptions: google.maps.marker.PinElementOptions = {\n      ...props\n    };\n\n    const pinElement = new google.maps.marker.PinElement(pinViewOptions);\n\n    // Set glyph to glyph container if children are present (rendered via portal).\n    // If both props.glyph and props.children are present, props.children takes priority.\n    if (props.children) {\n      pinElement.glyph = glyphContainer;\n    }\n\n    // Set content of Advanced Marker View to the Pin View element\n    advancedMarker.content = pinElement.element;\n  }, [advancedMarker, glyphContainer, props]);\n\n  return createPortal(props.children, glyphContainer);\n};\n","const mapLinear = (x: number, a1: number, a2: number, b1: number, b2: number) =>\n  b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n\nconst getMapMaxTilt = (zoom: number) => {\n  if (zoom <= 10) {\n    return 30;\n  }\n  if (zoom >= 15.5) {\n    return 67.5;\n  }\n\n  // range [10...14]\n  if (zoom <= 14) {\n    return mapLinear(zoom, 10, 14, 30, 45);\n  }\n\n  // range [14...15.5]\n  return mapLinear(zoom, 14, 15.5, 45, 67.5);\n};\n\n/**\n * Function to limit the tilt range of the google maps map when updating the view state\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const limitTiltRange = ({viewState}: any) => {\n  const pitch = viewState.pitch;\n  const gmZoom = viewState.zoom + 1;\n  const maxTilt = getMapMaxTilt(gmZoom);\n\n  return {...viewState, fovy: 25, pitch: Math.min(maxTilt, pitch)};\n};\n"]},"metadata":{},"sourceType":"module"}