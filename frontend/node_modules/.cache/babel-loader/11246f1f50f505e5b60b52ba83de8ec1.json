{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/Site Node-Type-React/frontend/src/shared/forms/VSelect.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { TextField } from '@mui/material';\nimport { useField } from '@unform/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VSelect = _ref => {\n  _s();\n\n  let {\n    name,\n    ...rest\n  } = _ref;\n  const {\n    fieldName,\n    registerField,\n    defaultValue,\n    error,\n    clearError\n  } = useField(name);\n  const [value, setValue] = useState(defaultValue || '');\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, newValue) => setValue(newValue)\n    });\n  }, [registerField, fieldName, value]);\n  return /*#__PURE__*/_jsxDEV(TextField, { ...rest,\n    select: true,\n    error: !!error,\n    helperText: error,\n    defaultValue: defaultValue,\n    value: value || '',\n    onKeyDown: e => {\n      var _rest$onKeyDown;\n\n      error && clearError();\n      (_rest$onKeyDown = rest.onKeyDown) === null || _rest$onKeyDown === void 0 ? void 0 : _rest$onKeyDown.call(rest, e);\n    },\n    onChange: e => {\n      var _rest$onChange;\n\n      setValue(e.target.value);\n      (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, e);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VSelect, \"owBrfhUGdoiVp/+3K0eVqLkXVQg=\", false, function () {\n  return [useField];\n});\n\n_c = VSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"VSelect\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Site Node-Type-React/frontend/src/shared/forms/VSelect.tsx"],"names":["useEffect","useState","TextField","useField","VSelect","name","rest","fieldName","registerField","defaultValue","error","clearError","value","setValue","getValue","_","newValue","e","onKeyDown","target","onChange"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0C,eAA1C;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAMA,OAAO,MAAMC,OAAgC,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAAsB;AACrE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA,YAA5B;AAA0CC,IAAAA,KAA1C;AAAiDC,IAAAA;AAAjD,MAAgER,QAAQ,CAACE,IAAD,CAA9E;AAEA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACQ,YAAY,IAAI,EAAjB,CAAlC;AAGAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,aAAa,CAAC;AACZH,MAAAA,IAAI,EAAEE,SADM;AAEZO,MAAAA,QAAQ,EAAE,MAAMF,KAFJ;AAGZC,MAAAA,QAAQ,EAAE,CAACE,CAAD,EAAIC,QAAJ,KAAiBH,QAAQ,CAACG,QAAD;AAHvB,KAAD,CAAb;AAKD,GANQ,EAMN,CAACR,aAAD,EAAgBD,SAAhB,EAA2BK,KAA3B,CANM,CAAT;AASA,sBACE,QAAC,SAAD,OACMN,IADN;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,KAAK,EAAE,CAAC,CAACI,KAJX;AAKE,IAAA,UAAU,EAAEA,KALd;AAME,IAAA,YAAY,EAAED,YANhB;AAQE,IAAA,KAAK,EAAEG,KAAK,IAAI,EARlB;AASE,IAAA,SAAS,EAAEK,CAAC,IAAI;AAAA;;AAAEP,MAAAA,KAAK,IAAIC,UAAU,EAAnB;AAAuB,yBAAAL,IAAI,CAACY,SAAL,yEAAAZ,IAAI,EAAaW,CAAb,CAAJ;AAAsB,KATjE;AAUE,IAAA,QAAQ,EAAEA,CAAC,IAAI;AAAA;;AAAEJ,MAAAA,QAAQ,CAACI,CAAC,CAACE,MAAF,CAASP,KAAV,CAAR;AAA0B,wBAAAN,IAAI,CAACc,QAAL,uEAAAd,IAAI,EAAYW,CAAZ,CAAJ;AAAqB;AAVlE;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA7BM;;GAAMb,O;UAC2DD,Q;;;KAD3DC,O","sourcesContent":["import { useEffect, useState } from 'react';\nimport { TextField, TextFieldProps } from '@mui/material';\nimport { useField } from '@unform/core';\n\n\ntype TVSelectProps = TextFieldProps & {\n  name: string;\n}\nexport const VSelect: React.FC<TVSelectProps> = ({ name, ...rest }) => {\n  const { fieldName, registerField, defaultValue, error, clearError } = useField(name);\n\n  const [value, setValue] = useState(defaultValue || '');\n\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, newValue) => setValue(newValue),\n    });\n  }, [registerField, fieldName, value]);\n\n\n  return (\n    <TextField\n      {...rest}\n\n      select\n      error={!!error}\n      helperText={error}\n      defaultValue={defaultValue}\n\n      value={value || ''}\n      onKeyDown={e => { error && clearError(); rest.onKeyDown?.(e); }}\n      onChange={e => { setValue(e.target.value); rest.onChange?.(e); }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}