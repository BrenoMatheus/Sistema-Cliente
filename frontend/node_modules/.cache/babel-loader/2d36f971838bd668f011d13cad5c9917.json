{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/list.tsx\";\nimport React, { useState } from 'react';\nimport './styles.css';\nimport { Grid, TextField } from '@mui/material';\nimport { formValidationSchema } from './DetailItemofLines';\nimport { ItemofLinesService } from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { VForm, useVForm } from '../../../../shared/forms';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AutoCompleteItem } from './AutoCompleteItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [changedAmount, setChangedAmount] = useState(0);\nconst [changedTotal, setChangedTotal] = useState(0);\nexport const [changedItemID, setChangedItemID] = useState(0);\nconst [newdata, setNewData] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst {\n  formRef,\n  isSaveAndClose\n} = useVForm();\nconst {\n  id = 'nova'\n} = useParams();\nconst navigate = useNavigate();\nconst [rows, setRows] = useState([]);\nconst [totalCount, setTotalCount] = useState(0);\n/* async function handleSave(e, notes) {\n        e.style.cursor = 'default';\n        e.style.boxShadow = 'none';\n        if (changedNote && changedNote !== notes) {\n            await api.post(`/contents/${data._id}`, {\n                notes: changedNote,\n            });\n        }\n    } */\n\nexport const upgrade = dados => {\n  console.log(changedItemID);\n};\nconsole.log(changedAmount);\nexport const handleSave = dados => {\n  formValidationSchema.validate(dados, {\n    abortEarly: false\n  }).then(dadosValidados => {\n    setIsLoading(true);\n\n    if (changedAmount !== dados.amount || changedTotal !== dados.total || changedItemID !== dados.itemID) {\n      ItemofLinesService.updateById(Number(id), {\n        id: Number(id),\n        ...dadosValidados,\n        amount: changedAmount,\n        total: changedTotal,\n        itemID: changedItemID\n      }).then(result => {\n        setIsLoading(false);\n\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          if (isSaveAndClose()) {\n            navigate('/itemofLines');\n          }\n        }\n      });\n    }\n  }).catch(errors => {\n    var _formRef$current;\n\n    const validationErrors = {};\n    errors.inner.forEach(error => {\n      if (!error.path) return;\n      validationErrors[error.path] = error.message;\n    });\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors(validationErrors);\n  });\n};\n\nconst handleDelete = id => {\n  if (confirm('Realmente deseja apagar?')) {\n    ItemofLinesService.deleteById(id).then(result => {\n      if (result instanceof Error) {\n        alert(result.message);\n      } else {\n        alert('Registro apagado com sucesso!');\n        navigate('/itemofLines');\n      }\n    });\n  }\n};\n/* async function handleEdit(e, priority) {\n    e.style.cursor = 'text';\n    e.style.borderRadius = '5px';\n    if (priority) {\n      e.style.boxShadow = '0 0 5px white';\n    } else {\n      e.style.boxShadow = '0 0 5px gray';\n    }\n  } */\n\n\nexport const Notes = _ref => {\n  let {\n    data\n  } = _ref;\n  setChangedAmount(data.amount);\n  setChangedItemID(data.itemID);\n  setChangedTotal(data.total);\n  return /*#__PURE__*/_jsxDEV(VForm, {\n    ref: formRef,\n    onSubmit: handleSave,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      borderBottom: 1,\n      spacing: {\n        xs: 0,\n        md: 0\n      },\n      columns: {\n        xs: 3,\n        sm: 6,\n        md: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 4,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(AutoCompleteItem, {\n          isExternalLoading: isLoading,\n          itemID: data.itemID,\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 4,\n        md: 2,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"standard\",\n          defaultValue: data.amount\n          /* onClick={(e) => handleEdit(e.target, data.priority)} */\n          ,\n          onChange: e => setChangedAmount(Number(e.target.value)),\n          onBlur: e => handleSave(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 4,\n        md: 2,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"standard\",\n          defaultValue: data.total\n          /* onClick={(e) => handleEdit(e.target, data.priority)} */\n          ,\n          onChange: e => setChangedTotal(Number(e.target.value))\n          /*  onBlur={(e) => handleSave(e.target, data.total)} */\n          ,\n          onBlur: e => handleSave(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, data.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/list.tsx"],"names":["React","useState","Grid","TextField","formValidationSchema","ItemofLinesService","VForm","useVForm","useNavigate","useParams","AutoCompleteItem","changedAmount","setChangedAmount","changedTotal","setChangedTotal","changedItemID","setChangedItemID","newdata","setNewData","isLoading","setIsLoading","formRef","isSaveAndClose","id","navigate","rows","setRows","totalCount","setTotalCount","upgrade","dados","console","log","handleSave","validate","abortEarly","then","dadosValidados","amount","total","itemID","updateById","Number","result","Error","alert","message","catch","errors","validationErrors","inner","forEach","error","path","current","setErrors","handleDelete","confirm","deleteById","Notes","data","xs","md","sm","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './styles.css';\n\nimport { Grid, TextField, TextFieldProps } from '@mui/material';\nimport * as yup from 'yup';\nimport { formValidationSchema } from './DetailItemofLines';\nimport {\n  IListItemofLine,\n  ItemofLinesService,\n} from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport {\n  IVFormErrors,\n  VForm,\n  VTextField,\n  useVForm,\n} from '../../../../shared/forms';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AutoCompleteItem } from './AutoCompleteItem';\n\ntype TVTextFieldProps = {\n  name: string;\n  data: IListItemofLine;\n};\n\nexport interface IFormData {\n  orderID: number;\n  itemID: number;\n  amount: number;\n  total: number;\n}\n\nconst [changedAmount, setChangedAmount] = useState(0);\nconst [changedTotal, setChangedTotal] = useState(0);\nexport const [changedItemID, setChangedItemID] = useState(0);\nconst [newdata, setNewData] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst { formRef, isSaveAndClose } = useVForm();\nconst { id = 'nova' } = useParams<'id'>();\nconst navigate = useNavigate();\nconst [rows, setRows] = useState<IListItemofLine[]>([]);\nconst [totalCount, setTotalCount] = useState(0);\n\n/* async function handleSave(e, notes) {\n        e.style.cursor = 'default';\n        e.style.boxShadow = 'none';\n        if (changedNote && changedNote !== notes) {\n            await api.post(`/contents/${data._id}`, {\n                notes: changedNote,\n            });\n        }\n    } */\nexport const upgrade = (dados: IFormData) => {\n  console.log(changedItemID);\n};\nconsole.log(changedAmount);\n\nexport const handleSave = (dados: IFormData) => {\n  formValidationSchema\n    .validate(dados, { abortEarly: false })\n    .then((dadosValidados) => {\n      setIsLoading(true);\n      if (\n        changedAmount !== dados.amount ||\n        changedTotal !== dados.total ||\n        changedItemID !== dados.itemID\n      ) {\n        ItemofLinesService.updateById(Number(id), {\n          id: Number(id),\n          ...dadosValidados,\n          amount: changedAmount,\n          total: changedTotal,\n          itemID: changedItemID,\n        }).then((result) => {\n          setIsLoading(false);\n\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            if (isSaveAndClose()) {\n              navigate('/itemofLines');\n            }\n          }\n        });\n      }\n    })\n    .catch((errors: yup.ValidationError) => {\n      const validationErrors: IVFormErrors = {};\n\n      errors.inner.forEach((error) => {\n        if (!error.path) return;\n\n        validationErrors[error.path] = error.message;\n      });\n\n      formRef.current?.setErrors(validationErrors);\n    });\n};\n\nconst handleDelete = (id: number) => {\n  if (confirm('Realmente deseja apagar?')) {\n    ItemofLinesService.deleteById(id).then((result) => {\n      if (result instanceof Error) {\n        alert(result.message);\n      } else {\n        alert('Registro apagado com sucesso!');\n        navigate('/itemofLines');\n      }\n    });\n  }\n};\n\n/* async function handleEdit(e, priority) {\n    e.style.cursor = 'text';\n    e.style.borderRadius = '5px';\n    if (priority) {\n      e.style.boxShadow = '0 0 5px white';\n    } else {\n      e.style.boxShadow = '0 0 5px gray';\n    }\n  } */\nexport const Notes: React.FC<TVTextFieldProps> = ({ data }) => {\n  setChangedAmount(data.amount);\n  setChangedItemID(data.itemID);\n  setChangedTotal(data.total);\n  return (\n    <VForm key={data.id} ref={formRef} onSubmit={handleSave}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        borderBottom={1}\n        spacing={{ xs: 0, md: 0 }}\n        columns={{ xs: 3, sm: 6, md: 8 }}\n      >\n        <Grid item xs={2} sm={4} md={3}>\n          <AutoCompleteItem\n            isExternalLoading={isLoading}\n            itemID={data.itemID}\n            data={data}\n          />\n        </Grid>\n\n        <Grid item xs={2} sm={4} md={2}>\n          <TextField\n            variant=\"standard\"\n            defaultValue={data.amount}\n            /* onClick={(e) => handleEdit(e.target, data.priority)} */\n            onChange={(e) => setChangedAmount(Number(e.target.value))}\n            onBlur={(e) => handleSave(data)}\n          />\n        </Grid>\n        <Grid item xs={2} sm={4} md={2}>\n          <TextField\n            variant=\"standard\"\n            defaultValue={data.total}\n            /* onClick={(e) => handleEdit(e.target, data.priority)} */\n            onChange={(e) => setChangedTotal(Number(e.target.value))}\n            /*  onBlur={(e) => handleSave(e.target, data.total)} */\n            onBlur={(e) => handleSave(data)}\n          />\n        </Grid>\n      </Grid>\n    </VForm>\n  );\n};\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}