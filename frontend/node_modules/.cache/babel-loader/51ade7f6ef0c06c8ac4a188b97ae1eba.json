{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/equipment/components/AutoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Autocomplete, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AutoComplete = _ref => {\n  _s();\n\n  let {\n    isExternalLoading = false\n  } = _ref;\n  const [opcoes, setOpcoes] = useState([]);\n  const [busca, setBusca] = useState('');\n  const data = [{\n    id: 1,\n    label: 'Combustão'\n  }, {\n    id: 2,\n    label: 'Eletrica'\n  }, {\n    id: 2,\n    label: 'Retratil'\n  }];\n  setOpcoes(data);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    openText: \"Abrir\",\n    closeText: \"Fechar\",\n    noOptionsText: \"Sem op\\xE7\\xF5es\",\n    loadingText: \"Carregando...\",\n    disablePortal: true,\n    options: opcoes,\n    disabled: isExternalLoading,\n    value: data.id,\n    onInputChange: (_, newValue) => setBusca(newValue),\n    onChange: (_, newValue) => {\n      setSelectedId(newValue === null || newValue === void 0 ? void 0 : newValue.id);\n      setBusca('');\n      clearError();\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Type\",\n      error: !!error,\n      helperText: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoComplete, \"NqMZ5ThzqH92o9eMErTD/TTBOHg=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/equipment/components/AutoComplete.tsx"],"names":["useState","Autocomplete","TextField","AutoComplete","isExternalLoading","opcoes","setOpcoes","busca","setBusca","data","id","label","_","newValue","setSelectedId","clearError","params","error"],"mappings":";;;AAAA,SAA6BA,QAA7B,QAA6C,OAA7C;AACA,SAASC,YAAT,EAAyCC,SAAzC,QAA0D,eAA1D;;AAcA,OAAO,MAAMC,YAA0C,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,iBAAiB,GAAG;AAAtB,GAAkC;AAG3F,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAwB,EAAxB,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMS,IAAI,GAAG,CAAC;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GAAD,EAAgC;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GAAhC,EAA8D;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GAA9D,CAAb;AACAL,EAAAA,SAAS,CAACG,IAAD,CAAT;AAGA,sBACE,QAAC,YAAD;AACE,IAAA,QAAQ,EAAC,OADX;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,aAAa,EAAC,kBAHhB;AAIE,IAAA,WAAW,EAAC,eAJd;AAME,IAAA,aAAa,MANf;AAQE,IAAA,OAAO,EAAEJ,MARX;AASE,IAAA,QAAQ,EAAED,iBATZ;AAUE,IAAA,KAAK,EAAGK,IAAI,CAACC,EAVf;AAWE,IAAA,aAAa,EAAE,CAACE,CAAD,EAAIC,QAAJ,KAAiBL,QAAQ,CAACK,QAAD,CAX1C;AAYE,IAAA,QAAQ,EAAE,CAACD,CAAD,EAAIC,QAAJ,KAAiB;AAAEC,MAAAA,aAAa,CAACD,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEH,EAAX,CAAb;AAA6BF,MAAAA,QAAQ,CAAC,EAAD,CAAR;AAAcO,MAAAA,UAAU;AAAK,KAZzF;AAaE,IAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,KAAK,EAAE,CAAC,CAACC,KAJX;AAKE,MAAA,UAAU,EAAEA;AALd;AAAA;AAAA;AAAA;AAAA;AAdJ;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAlCM;;GAAMd,Y;;KAAAA,Y","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { Autocomplete, CircularProgress, TextField } from '@mui/material';\n\nimport { useDebounce } from '../../../shared/hooks';\nimport { useField } from '@unform/core';\n\n\ntype TAutoCompleteOption = {\n  id: number;\n  label: string;\n}\n\ninterface IAutoCompleteProps {\n  isExternalLoading?: boolean;\n}\nexport const AutoComplete: React.FC<IAutoCompleteProps> = ({ isExternalLoading = false }) => {\n\n\n  const [opcoes, setOpcoes] = useState<TAutoCompleteOption[]>([]);\n  const [busca, setBusca] = useState('');\n  const data = [{ id: 1, label: 'Combustão' }, { id: 2, label: 'Eletrica' }, { id: 2, label: 'Retratil' }];\n  setOpcoes(data);\n\n\n  return (\n    <Autocomplete\n      openText='Abrir'\n      closeText='Fechar'\n      noOptionsText='Sem opções'\n      loadingText='Carregando...'\n\n      disablePortal\n\n      options={opcoes}\n      disabled={isExternalLoading}\n      value= {data.id}\n      onInputChange={(_, newValue) => setBusca(newValue)}\n      onChange={(_, newValue) => { setSelectedId(newValue?.id); setBusca(''); clearError(); }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n\n          label=\"Type\"\n          error={!!error}\n          helperText={error}\n        />\n      )}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}