{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"sx\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useViews } from '../useViews';\nimport { isTimeView } from '../../utils/time-utils';\n/**\n * Props used to handle the views that are common to all pickers.\n */\n\n/**\n * Props used to handle the views of the pickers.\n */\n\n/**\n * Props used to handle the value of the pickers.\n */\n\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\n\nexport const usePickerViews = _ref => {\n  let {\n    props,\n    propsFromPickerValue,\n    additionalViewProps,\n    inputRef,\n    autoFocusView\n  } = _ref;\n  const {\n    onChange,\n    open,\n    onSelectedSectionsChange,\n    onClose\n  } = propsFromPickerValue;\n  const {\n    views,\n    openTo,\n    onViewChange,\n    disableOpenPicker,\n    viewRenderers,\n    timezone\n  } = props;\n\n  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    view,\n    setView,\n    defaultView,\n    focusedView,\n    setFocusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: undefined,\n    views,\n    openTo,\n    onChange,\n    onViewChange,\n    autoFocus: autoFocusView\n  });\n  const {\n    hasUIView,\n    viewModeLookup\n  } = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    let viewMode;\n\n    if (disableOpenPicker) {\n      viewMode = 'field';\n    } else if (viewRenderers[viewForReduce] != null) {\n      viewMode = 'UI';\n    } else {\n      viewMode = 'field';\n    }\n\n    acc.viewModeLookup[viewForReduce] = viewMode;\n\n    if (viewMode === 'UI') {\n      acc.hasUIView = true;\n    }\n\n    return acc;\n  }, {\n    hasUIView: false,\n    viewModeLookup: {}\n  }), [disableOpenPicker, viewRenderers, views]);\n  const timeViewsCount = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {\n      return acc + 1;\n    }\n\n    return acc;\n  }, 0), [viewRenderers, views]);\n  const currentViewMode = viewModeLookup[view];\n  const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');\n  const [popperView, setPopperView] = React.useState(currentViewMode === 'UI' ? view : null);\n\n  if (popperView !== view && viewModeLookup[view] === 'UI') {\n    setPopperView(view);\n  }\n\n  useEnhancedEffect(() => {\n    // Handle case of `DateTimePicker` without time renderers\n    if (currentViewMode === 'field' && open) {\n      onClose();\n      setTimeout(() => {\n        // focusing the input before the range selection is done\n        // calling `onSelectedSectionsChange` outside of timeout results in an inconsistent behavior between Safari And Chrome\n        inputRef == null || inputRef.current.focus();\n        onSelectedSectionsChange(view);\n      });\n    }\n  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEnhancedEffect(() => {\n    if (!open) {\n      return;\n    }\n\n    let newView = view; // If the current view is a field view, go to the last popper view\n\n    if (currentViewMode === 'field' && popperView != null) {\n      newView = popperView;\n    } // If the current view is not the default view and both are UI views\n\n\n    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {\n      newView = defaultView;\n    }\n\n    if (newView !== view) {\n      setView(newView);\n    }\n\n    setFocusedView(newView, true);\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const layoutProps = {\n    views,\n    view: popperView,\n    onViewChange: setView\n  };\n  return {\n    hasUIView,\n    shouldRestoreFocus,\n    layoutProps,\n    renderCurrentView: () => {\n      if (popperView == null) {\n        return null;\n      }\n\n      const renderer = viewRenderers[popperView];\n\n      if (renderer == null) {\n        return null;\n      }\n\n      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {\n        views,\n        timezone,\n        onChange: setValueAndGoToNextView,\n        view: popperView,\n        onViewChange: setView,\n        focusedView,\n        onFocusedViewChange: setFocusedView,\n        showViewSwitcher: timeViewsCount > 1,\n        timeViewsCount\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useViews","isTimeView","usePickerViews","props","propsFromPickerValue","additionalViewProps","inputRef","autoFocusView","onChange","open","onSelectedSectionsChange","onClose","views","openTo","onViewChange","disableOpenPicker","viewRenderers","timezone","propsToForwardToView","view","setView","defaultView","focusedView","setFocusedView","setValueAndGoToNextView","undefined","autoFocus","hasUIView","viewModeLookup","useMemo","reduce","acc","viewForReduce","viewMode","timeViewsCount","currentViewMode","shouldRestoreFocus","popperView","setPopperView","useState","setTimeout","current","focus","newView","layoutProps","renderCurrentView","renderer","onFocusedViewChange","showViewSwitcher"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"sx\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useViews } from '../useViews';\nimport { isTimeView } from '../../utils/time-utils';\n\n/**\n * Props used to handle the views that are common to all pickers.\n */\n\n/**\n * Props used to handle the views of the pickers.\n */\n\n/**\n * Props used to handle the value of the pickers.\n */\n\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\nexport const usePickerViews = ({\n  props,\n  propsFromPickerValue,\n  additionalViewProps,\n  inputRef,\n  autoFocusView\n}) => {\n  const {\n    onChange,\n    open,\n    onSelectedSectionsChange,\n    onClose\n  } = propsFromPickerValue;\n  const {\n    views,\n    openTo,\n    onViewChange,\n    disableOpenPicker,\n    viewRenderers,\n    timezone\n  } = props;\n  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    view,\n    setView,\n    defaultView,\n    focusedView,\n    setFocusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: undefined,\n    views,\n    openTo,\n    onChange,\n    onViewChange,\n    autoFocus: autoFocusView\n  });\n  const {\n    hasUIView,\n    viewModeLookup\n  } = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    let viewMode;\n    if (disableOpenPicker) {\n      viewMode = 'field';\n    } else if (viewRenderers[viewForReduce] != null) {\n      viewMode = 'UI';\n    } else {\n      viewMode = 'field';\n    }\n    acc.viewModeLookup[viewForReduce] = viewMode;\n    if (viewMode === 'UI') {\n      acc.hasUIView = true;\n    }\n    return acc;\n  }, {\n    hasUIView: false,\n    viewModeLookup: {}\n  }), [disableOpenPicker, viewRenderers, views]);\n  const timeViewsCount = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0), [viewRenderers, views]);\n  const currentViewMode = viewModeLookup[view];\n  const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');\n  const [popperView, setPopperView] = React.useState(currentViewMode === 'UI' ? view : null);\n  if (popperView !== view && viewModeLookup[view] === 'UI') {\n    setPopperView(view);\n  }\n  useEnhancedEffect(() => {\n    // Handle case of `DateTimePicker` without time renderers\n    if (currentViewMode === 'field' && open) {\n      onClose();\n      setTimeout(() => {\n        // focusing the input before the range selection is done\n        // calling `onSelectedSectionsChange` outside of timeout results in an inconsistent behavior between Safari And Chrome\n        inputRef == null || inputRef.current.focus();\n        onSelectedSectionsChange(view);\n      });\n    }\n  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEnhancedEffect(() => {\n    if (!open) {\n      return;\n    }\n    let newView = view;\n\n    // If the current view is a field view, go to the last popper view\n    if (currentViewMode === 'field' && popperView != null) {\n      newView = popperView;\n    }\n\n    // If the current view is not the default view and both are UI views\n    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {\n      newView = defaultView;\n    }\n    if (newView !== view) {\n      setView(newView);\n    }\n    setFocusedView(newView, true);\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const layoutProps = {\n    views,\n    view: popperView,\n    onViewChange: setView\n  };\n  return {\n    hasUIView,\n    shouldRestoreFocus,\n    layoutProps,\n    renderCurrentView: () => {\n      if (popperView == null) {\n        return null;\n      }\n      const renderer = viewRenderers[popperView];\n      if (renderer == null) {\n        return null;\n      }\n      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {\n        views,\n        timezone,\n        onChange: setValueAndGoToNextView,\n        view: popperView,\n        onViewChange: setView,\n        focusedView,\n        onFocusedViewChange: setFocusedView,\n        showViewSwitcher: timeViewsCount > 1,\n        timeViewsCount\n      }));\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}