{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\n\nexport const useValueWithTimezone = _ref3 => {\n  let {\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  } = _ref3;\n\n  var _ref, _ref2;\n\n  const utils = useUtils();\n  const firstDefaultValue = React.useRef(defaultValue);\n  const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;\n  const inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);\n  const setInputTimezone = useEventCallback(newValue => {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';\n  const valueWithTimezoneToRender = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);\n  const handleValueChange = useEventCallback(function (newValue) {\n    const newValueWithInputTimezone = setInputTimezone(newValue);\n\n    for (var _len = arguments.length, otherParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      otherParams[_key - 1] = arguments[_key];\n    }\n\n    onChange == null || onChange(newValueWithInputTimezone, ...otherParams);\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\n\nexport const useControlledValueWithTimezone = _ref4 => {\n  let {\n    name,\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    valueManager\n  } = _ref4;\n  const [valueWithInputTimezone, setValue] = useControlled({\n    name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : valueManager.emptyValue\n  });\n  const onChange = useEventCallback(function (newValue) {\n    setValue(newValue);\n\n    for (var _len2 = arguments.length, otherParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      otherParams[_key2 - 1] = arguments[_key2];\n    }\n\n    onChangeProp == null || onChangeProp(newValue, ...otherParams);\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange,\n    valueManager\n  });\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.js"],"names":["React","useEventCallback","useControlled","useUtils","useValueWithTimezone","timezone","timezoneProp","value","valueProp","defaultValue","onChange","valueManager","_ref","_ref2","utils","firstDefaultValue","useRef","inputValue","current","emptyValue","inputTimezone","useMemo","getTimezone","setInputTimezone","newValue","setTimezone","timezoneToRender","valueWithTimezoneToRender","handleValueChange","newValueWithInputTimezone","otherParams","useControlledValueWithTimezone","name","onChangeProp","valueWithInputTimezone","setValue","state","controlled","default","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\nexport const useValueWithTimezone = ({\n  timezone: timezoneProp,\n  value: valueProp,\n  defaultValue,\n  onChange,\n  valueManager\n}) => {\n  var _ref, _ref2;\n  const utils = useUtils();\n  const firstDefaultValue = React.useRef(defaultValue);\n  const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;\n  const inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);\n  const setInputTimezone = useEventCallback(newValue => {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';\n  const valueWithTimezoneToRender = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);\n  const handleValueChange = useEventCallback((newValue, ...otherParams) => {\n    const newValueWithInputTimezone = setInputTimezone(newValue);\n    onChange == null || onChange(newValueWithInputTimezone, ...otherParams);\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\nexport const useControlledValueWithTimezone = ({\n  name,\n  timezone: timezoneProp,\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  valueManager\n}) => {\n  const [valueWithInputTimezone, setValue] = useControlled({\n    name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : valueManager.emptyValue\n  });\n  const onChange = useEventCallback((newValue, ...otherParams) => {\n    setValue(newValue);\n    onChangeProp == null || onChangeProp(newValue, ...otherParams);\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange,\n    valueManager\n  });\n};"]},"metadata":{},"sourceType":"module"}