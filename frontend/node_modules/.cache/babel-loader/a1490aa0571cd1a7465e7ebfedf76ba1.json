{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useThemeProps } from '@mui/material/styles';\nimport { refType } from '@mui/utils';\nimport { DesktopTimePicker } from '../DesktopTimePicker';\nimport { MobileTimePicker } from '../MobileTimePicker';\nimport { DEFAULT_DESKTOP_MODE_MEDIA_QUERY } from '../internals/utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [TimePicker API](https://mui.com/x/api/date-pickers/time-picker/)\n */\n\nconst TimePicker = /*#__PURE__*/React.forwardRef(function TimePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTimePicker'\n  });\n\n  const {\n    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopTimePicker, _extends({\n      ref: ref\n    }, other));\n  }\n\n  return /*#__PURE__*/_jsx(MobileTimePicker, _extends({\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport { TimePicker };","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/TimePicker/TimePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useMediaQuery","useThemeProps","refType","DesktopTimePicker","MobileTimePicker","DEFAULT_DESKTOP_MODE_MEDIA_QUERY","jsx","_jsx","TimePicker","forwardRef","inProps","ref","props","name","desktopModeMediaQuery","other","isDesktop","defaultMatches","process","env","NODE_ENV","propTypes","ampm","bool","ampmInClock","autoFocus","className","string","closeOnSelect","components","object","componentsProps","defaultValue","any","disabled","disableFuture","disableIgnoringDatePartForTimeValidation","disableOpenPicker","disablePast","format","formatDensity","oneOf","inputRef","label","node","localeText","maxTime","minTime","minutesStep","number","onAccept","func","onChange","onClose","onError","onOpen","onSelectedSectionsChange","onViewChange","open","openTo","orientation","readOnly","reduceAnimations","referenceDate","selectedSections","oneOfType","shape","endIndex","isRequired","startIndex","shouldDisableClock","shouldDisableTime","skipDisabled","slotProps","slots","sx","arrayOf","thresholdToRenderTimeInASingleColumn","timeSteps","hours","minutes","seconds","timezone","value","view","viewRenderers","meridiem","views"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useThemeProps } from '@mui/material/styles';\nimport { refType } from '@mui/utils';\nimport { DesktopTimePicker } from '../DesktopTimePicker';\nimport { MobileTimePicker } from '../MobileTimePicker';\nimport { DEFAULT_DESKTOP_MODE_MEDIA_QUERY } from '../internals/utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [TimePicker API](https://mui.com/x/api/date-pickers/time-picker/)\n */\nconst TimePicker = /*#__PURE__*/React.forwardRef(function TimePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTimePicker'\n  });\n  const {\n      desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopTimePicker, _extends({\n      ref: ref\n    }, other));\n  }\n  return /*#__PURE__*/_jsx(MobileTimePicker, _extends({\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport { TimePicker };"]},"metadata":{},"sourceType":"module"}