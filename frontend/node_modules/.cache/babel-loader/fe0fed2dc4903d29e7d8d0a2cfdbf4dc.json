{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/dashboard/components/ListOrders.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { Grid, Icon, IconButton, LinearProgress, Pagination, Paper, Table, TableBody, TableCell, TableContainer, TableFooter, TableHead, TableRow } from '@mui/material';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { OrdersService } from '../../../shared/services/api/orders/OrdersService';\nimport { Environment } from '../../../shared/environment';\nimport { useDebounce } from '../../../shared/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ListOrdersDashboard = () => {\n  _s();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const {\n    debounce\n  } = useDebounce();\n  const navigate = useNavigate();\n  const [rows, setRows] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState(0);\n  const search = useMemo(() => {\n    return searchParams.get('search') || '';\n  }, [searchParams]);\n  const page = useMemo(() => {\n    return Number(searchParams.get('page') || '1');\n  }, [searchParams]);\n  useEffect(() => {\n    setIsLoading(true);\n    debounce(() => {\n      OrdersService.getAll(page, search).then(result => {\n        setIsLoading(false);\n\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          setTotalCount(result.totalCount);\n          setRows(result.data);\n\n          if (rows.filter(row => row.status = true)) {\n            console.log('Aberta');\n          }\n        }\n      });\n    });\n  }, [search, page]);\n\n  const handleDelete = id => {\n    if (confirm('Realmente deseja apagar?')) {\n      OrdersService.deleteById(id).then(result => {\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          setRows(oldRows => [...oldRows.filter(oldRow => oldRow.id !== id)]);\n          alert('Registro apagado com sucesso!');\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      marginTop: 2,\n      component: Paper,\n      variant: \"outlined\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        marginLeft: 2,\n        children: !isLoading && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Ordens: \", totalCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      marginTop: 2,\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        variant: \"outlined\",\n        sx: {\n          width: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                width: 100,\n                children: \"A\\xE7\\xF5es\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Tipo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Defeito\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                  size: \"small\",\n                  onClick: () => handleDelete(row.id),\n                  children: /*#__PURE__*/_jsxDEV(Icon, {\n                    children: \"delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  size: \"small\",\n                  onClick: () => navigate(`/orders/detail/${row.id}`),\n                  children: /*#__PURE__*/_jsxDEV(Icon, {\n                    children: \"edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: row.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: row.defect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: row.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: row.status == 1 ? 'sim' : 'nao'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this)]\n            }, row.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), totalCount === 0 && !isLoading && /*#__PURE__*/_jsxDEV(\"caption\", {\n            children: Environment.EMPTY_LISTING\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableFooter, {\n            children: [isLoading && /*#__PURE__*/_jsxDEV(TableRow, {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: 3,\n                children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n                  variant: \"indeterminate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), totalCount > 0 && totalCount > Environment.LIMITE_DE_LINHAS && /*#__PURE__*/_jsxDEV(TableRow, {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: 3,\n                children: /*#__PURE__*/_jsxDEV(Pagination, {\n                  page: page,\n                  count: Math.ceil(totalCount / Environment.LIMITE_DE_LINHAS),\n                  onChange: (_, newPage) => setSearchParams({\n                    search,\n                    page: newPage.toString()\n                  }, {\n                    replace: true\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ListOrdersDashboard, \"owXZ6K3DvZBlsTShgC7QRVLCdDo=\", false, function () {\n  return [useSearchParams, useDebounce, useNavigate];\n});\n\n_c = ListOrdersDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListOrdersDashboard\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/dashboard/components/ListOrders.tsx"],"names":["useEffect","useMemo","useState","Grid","Icon","IconButton","LinearProgress","Pagination","Paper","Table","TableBody","TableCell","TableContainer","TableFooter","TableHead","TableRow","useNavigate","useSearchParams","OrdersService","Environment","useDebounce","ListOrdersDashboard","searchParams","setSearchParams","debounce","navigate","rows","setRows","isLoading","setIsLoading","totalCount","setTotalCount","search","get","page","Number","getAll","then","result","Error","alert","message","data","filter","row","status","console","log","handleDelete","id","confirm","deleteById","oldRows","oldRow","width","map","type","defect","EMPTY_LISTING","LIMITE_DE_LINHAS","Math","ceil","_","newPage","toString","replace"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { Grid, Icon, IconButton, LinearProgress, Pagination, Paper, Table, TableBody, TableCell, TableContainer, TableFooter, TableHead, TableRow } from '@mui/material';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nimport { IListOrders, OrdersService, } from '../../../shared/services/api/orders/OrdersService';\nimport { Environment } from '../../../shared/environment';\nimport { useDebounce } from '../../../shared/hooks';\n\n\nexport const ListOrdersDashboard: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { debounce } = useDebounce();\n  const navigate = useNavigate();\n\n  const [rows, setRows] = useState<IListOrders[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState(0);\n\n\n  const search = useMemo(() => {\n    return searchParams.get('search') || '';\n  }, [searchParams]);\n\n  const page = useMemo(() => {\n    return Number(searchParams.get('page') || '1');\n  }, [searchParams]);\n\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    debounce(() => {\n      OrdersService.getAll(page, search)\n        .then((result) => {\n          setIsLoading(false);\n\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            setTotalCount(result.totalCount);\n            setRows(result.data);\n\n            if (rows.filter((row) => row.status = true)) {\n              console.log('Aberta');\n            }\n\n          }\n        });\n    });\n  }, [search, page]);\n\n  const handleDelete = (id: number) => {\n    if (confirm('Realmente deseja apagar?')) {\n      OrdersService.deleteById(id)\n        .then(result => {\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            setRows(oldRows => [\n              ...oldRows.filter(oldRow => oldRow.id !== id),\n            ]);\n            alert('Registro apagado com sucesso!');\n          }\n        });\n    }\n  };\n\n\n  return (\n    <>\n      <Grid container item xs={12} marginTop={2} component={Paper} variant=\"outlined\" >\n        <Grid item xs={4} marginLeft={2}>\n          {!isLoading && (\n            <h4>Ordens: {totalCount}</h4>\n          )}\n        </Grid>\n      </Grid>\n      <Grid item xs={12} marginTop={2}>\n        <TableContainer component={Paper} variant=\"outlined\" sx={{ width: 'auto' }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell width={100}>Ações</TableCell>\n                <TableCell>Tipo</TableCell>\n                <TableCell>Defeito</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(row => (\n                \n                <TableRow key={row.id}>\n                  <TableCell>\n                    <IconButton size=\"small\" onClick={() => handleDelete(row.id)}>\n                      <Icon>delete</Icon>\n                    </IconButton>\n                    <IconButton size=\"small\" onClick={() => navigate(`/orders/detail/${row.id}`)}>\n                      <Icon>edit</Icon>\n                    </IconButton>\n                  </TableCell>\n                  <TableCell>{row.type}</TableCell>\n                  <TableCell>{row.defect}</TableCell>\n                  <TableCell>{row.status}</TableCell>\n                  <TableCell>{row.status == 1 ? 'sim':'nao'}</TableCell>\n\n                </TableRow>\n              )\n              )}\n            </TableBody>\n\n            {totalCount === 0 && !isLoading && (\n              <caption>{Environment.EMPTY_LISTING}</caption>\n            )}\n\n            <TableFooter>\n              {isLoading && (\n                <TableRow>\n                  <TableCell colSpan={3}>\n                    <LinearProgress variant='indeterminate' />\n                  </TableCell>\n                </TableRow>\n              )}\n              {(totalCount > 0 && totalCount > Environment.LIMITE_DE_LINHAS) && (\n                <TableRow>\n                  <TableCell colSpan={3}>\n                    <Pagination\n                      page={page}\n                      count={Math.ceil(totalCount / Environment.LIMITE_DE_LINHAS)}\n                      onChange={(_, newPage) => setSearchParams({ search, page: newPage.toString() }, { replace: true })}\n                    />\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </Grid>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}