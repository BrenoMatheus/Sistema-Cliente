{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/ListItemofLines.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Grid, Icon, IconButton } from '@mui/material';\nimport { useParams } from 'react-router-dom';\nimport { ItemofLinesService } from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { Environment } from '../../../../shared/environment';\nimport { useDebounce } from '../../../../shared/hooks';\nimport { AutoCompleteItem } from './AutoCompleteItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ListItemofLines = () => {\n  _s();\n\n  const {\n    debounce\n  } = useDebounce();\n  const [rows, setRows] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState(0);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    setIsLoading(true);\n    debounce(() => {\n      ItemofLinesService.getAll(1, id).then(result => {\n        setIsLoading(false);\n\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          setTotalCount(result.totalCount);\n          setRows(result.data);\n        }\n      });\n    });\n  }, [id]);\n\n  const handleDelete = id => {\n    if (confirm('Realmente deseja apagar?')) {\n      ItemofLinesService.deleteById(id).then(result => {\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          setRows(oldRows => [...oldRows.filter(oldRow => oldRow.id !== id)]);\n          alert('Registro apagado com sucesso!');\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        sm: 6,\n        md: 4,\n        children: \"Nome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 3,\n        md: 2,\n        children: \"Quantidade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 3,\n        md: 2,\n        children: \"Total\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), rows.map(row => /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: () => handleDelete(row.id),\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            children: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 3,\n        md: 2,\n        children: /*#__PURE__*/_jsxDEV(AutoCompleteItem, {\n          isExternalLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 3,\n        md: 2,\n        children: row.amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 3,\n        md: 2,\n        children: row.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, row.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)), totalCount === 0 && !isLoading && /*#__PURE__*/_jsxDEV(\"caption\", {\n      children: Environment.EMPTY_LISTING\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ListItemofLines, \"Upm3pRd7ae6UPQsza6lZddZZSec=\", false, function () {\n  return [useDebounce, useParams];\n});\n\n_c = ListItemofLines;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListItemofLines\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/ListItemofLines.tsx"],"names":["useEffect","useState","Grid","Icon","IconButton","useParams","ItemofLinesService","Environment","useDebounce","AutoCompleteItem","ListItemofLines","debounce","rows","setRows","isLoading","setIsLoading","totalCount","setTotalCount","id","getAll","then","result","Error","alert","message","data","handleDelete","confirm","deleteById","oldRows","filter","oldRow","map","row","amount","total","EMPTY_LISTING"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Grid, Icon, IconButton, TextFieldProps } from '@mui/material';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { IListItemofLine, ItemofLinesService, } from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { Environment } from '../../../../shared/environment';\nimport { useDebounce } from '../../../../shared/hooks';\nimport { AutoCompleteItem } from './AutoCompleteItem';\n\ntype TVTextFieldProps = TextFieldProps & {\n  name: string;\n}\n\nexport const ListItemofLines: React.FC<TVTextFieldProps> = () => {\n\n  const { debounce } = useDebounce();\n\n  const [rows, setRows] = useState<IListItemofLine[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const { id } = useParams<'id'>();\n\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    debounce(() => {\n      ItemofLinesService.getAll(1, id)\n        .then((result) => {\n          setIsLoading(false);\n\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n\n            setTotalCount(result.totalCount);\n            setRows(result.data);\n          }\n        });\n    });\n  }, [id]);\n\n  const handleDelete = (id: number) => {\n    if (confirm('Realmente deseja apagar?')) {\n      ItemofLinesService.deleteById(id)\n        .then(result => {\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            setRows(oldRows => [\n              ...oldRows.filter(oldRow => oldRow.id !== id),\n            ]);\n            alert('Registro apagado com sucesso!');\n          }\n        });\n    }\n  };\n  return (\n    <>\n      <Grid container item xs={12} spacing={3}>\n        <Grid item xs={4} sm={6} md={4}>\n          Nome\n        </Grid>\n        <Grid item xs={2} sm={3} md={2}>\n          Quantidade\n        </Grid>\n        <Grid item xs={2} sm={3} md={2}>\n          Total\n        </Grid>\n      </Grid>\n      {rows.map(row => (\n        <Grid container item xs={12} spacing={3} key={row.id}>\n\n          <Grid item xs={4} sm={6} md={4}>\n            <IconButton size=\"small\" onClick={() => handleDelete(row.id)}>\n              <Icon>delete</Icon>\n            </IconButton>\n          </Grid>\n          <Grid item xs={2} sm={3} md={2}>\n            <AutoCompleteItem isExternalLoading={isLoading} />\n          </Grid>\n         {/*  <Grid item xs={4} sm={6} md={4}>\n            {row.itemID}\n          </Grid> */}\n          <Grid item xs={2} sm={3} md={2}>\n            {row.amount}\n          </Grid>\n          <Grid item xs={2} sm={3} md={2}>\n            {row.total}\n          </Grid>\n        </Grid>\n      ))}\n\n      {totalCount === 0 && !isLoading && (\n        <caption>{Environment.EMPTY_LISTING}</caption>\n      )}\n\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}