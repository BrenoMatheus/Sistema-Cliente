{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { ClockIcon } from '../icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\nimport { resolveTimeViewsResponse } from '../internals/utils/date-time-utils';\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)\n */\n\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;\n\n  const localeText = useLocaleText();\n  const utils = useUtils(); // Props with the default values common to all time pickers\n\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const {\n    shouldRenderTimeInASingleColumn,\n    views: resolvedViews,\n    timeSteps\n  } = resolveTimeViewsResponse(defaultizedProps);\n  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;\n\n  const viewRenderers = _extends({\n    hours: renderTimeView,\n    minutes: renderTimeView,\n    seconds: renderTimeView,\n    meridiem: renderTimeView\n  }, defaultizedProps.viewRenderers);\n\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept']; // Need to avoid adding the `meridiem` view when unexpected renderer is specified\n\n  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;\n  const views = !shouldHoursRendererContainMeridiemView ? resolvedViews.filter(view => view !== 'meridiem') : resolvedViews; // Props with the default values specific to the desktop variant\n\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    timeSteps,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    // Setting only `hours` time view in case of single column time picker\n    // Allows for easy view lifecycle management\n    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: ClockIcon\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),\n      actionBar: _extends({\n        actions: actionBarActions\n      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)\n    })\n  });\n\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.js"],"names":["_extends","React","PropTypes","resolveComponentProps","refType","singleItemValueManager","TimeField","useTimePickerDefaultizedProps","useLocaleText","useUtils","validateTime","ClockIcon","useDesktopPicker","extractValidationProps","renderDigitalClockTimeView","renderMultiSectionDigitalClockTimeView","resolveTimeFormat","resolveTimeViewsResponse","DesktopTimePicker","forwardRef","inProps","ref","_defaultizedProps$amp","_viewRenderers$hours","_defaultizedProps$slo2","_defaultizedProps$slo3","_props$localeText$ope","_props$localeText","localeText","utils","defaultizedProps","shouldRenderTimeInASingleColumn","views","resolvedViews","timeSteps","renderTimeView","viewRenderers","hours","minutes","seconds","meridiem","ampmInClock","actionBarActions","shouldHoursRendererContainMeridiemView","name","filter","view","props","format","slots","field","openPickerIcon","slotProps","ownerState","_defaultizedProps$slo","toolbar","hidden","actionBar","actions","renderPicker","valueManager","valueType","getOpenDialogAriaText","openTimePickerDialogue","validator","propTypes","ampm","bool","autoFocus","className","string","closeOnSelect","components","object","componentsProps","defaultValue","any","disabled","disableFuture","disableIgnoringDatePartForTimeValidation","disableOpenPicker","disablePast","formatDensity","oneOf","inputRef","label","node","maxTime","minTime","minutesStep","number","onAccept","func","onChange","onClose","onError","onOpen","onSelectedSectionsChange","onViewChange","open","openTo","orientation","readOnly","reduceAnimations","referenceDate","selectedSections","oneOfType","shape","endIndex","isRequired","startIndex","shouldDisableClock","shouldDisableTime","skipDisabled","sx","arrayOf","thresholdToRenderTimeInASingleColumn","timezone","value"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { ClockIcon } from '../icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\nimport { resolveTimeViewsResponse } from '../internals/utils/date-time-utils';\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)\n */\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const {\n    shouldRenderTimeInASingleColumn,\n    views: resolvedViews,\n    timeSteps\n  } = resolveTimeViewsResponse(defaultizedProps);\n  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;\n  const viewRenderers = _extends({\n    hours: renderTimeView,\n    minutes: renderTimeView,\n    seconds: renderTimeView,\n    meridiem: renderTimeView\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];\n  // Need to avoid adding the `meridiem` view when unexpected renderer is specified\n  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;\n  const views = !shouldHoursRendererContainMeridiemView ? resolvedViews.filter(view => view !== 'meridiem') : resolvedViews;\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    timeSteps,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    // Setting only `hours` time view in case of single column time picker\n    // Allows for easy view lifecycle management\n    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: ClockIcon\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),\n      actionBar: _extends({\n        actions: actionBarActions\n      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default true on desktop, false on mobile\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Amount of time options below or at which the single column time renderer is used.\n   * @default 24\n   */\n  thresholdToRenderTimeInASingleColumn: PropTypes.number,\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * When single column time renderer is used, only `timeStep.minutes` will be used.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    meridiem: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };"]},"metadata":{},"sourceType":"module"}