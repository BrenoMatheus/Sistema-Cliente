{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/Projeto advocacia/frontend/src/pages/dashboard/components/Maps.tsx\",\n    _s = $RefreshSig$();\n\nimport { APIProvider, Map, useMap, useMapsLibrary } from '@vis.gl/react-google-maps';\nimport { Environment } from '../../../shared/environment';\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MapsDashboard = () => {\n  const position = {\n    lat: 43.6532,\n    lng: -79.3832\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(APIProvider, {\n      apiKey: Environment.API_KEY,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        center: position,\n        defaultZoom: 9,\n        mapId: Environment.ID_MAP,\n        fullscreenControl: false,\n        children: /*#__PURE__*/_jsxDEV(Directions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = MapsDashboard;\n\nfunction Directions() {\n  _s();\n\n  var _leg$distance, _leg$duration;\n\n  const map = useMap();\n  const routesLibrary = useMapsLibrary('routes');\n  const [directionsService, setDirectionsService] = useState();\n  const [directionsRenderer, setDirectionsRenderer] = useState();\n  const [routes, setRoutes] = useState([]);\n  const [routeIndex, setRouteIndex] = useState(0);\n  const selected = routes[routeIndex];\n  const leg = selected === null || selected === void 0 ? void 0 : selected.legs[0];\n  useEffect(() => {\n    if (!routesLibrary || !map) return;\n    setDirectionsService(new routesLibrary.DirectionsService());\n    setDirectionsRenderer(new routesLibrary.DirectionsRenderer({\n      map\n    }));\n  }, [routesLibrary, map]);\n  useEffect(() => {\n    if (!directionsService || !directionsRenderer) return;\n    directionsService.route({\n      origin: '100 Front St, Toronto ON',\n      destination: '500 College St, Toronto ON',\n      travelMode: google.maps.TravelMode.DRIVING,\n      provideRouteAlternatives: true\n    }).then(response => {\n      directionsRenderer.setDirections(response);\n      setRoutes(response.routes);\n    });\n  }, [directionsService, directionsRenderer]);\n  useEffect(() => {\n    if (!directionsRenderer) return;\n    directionsRenderer.setRouteIndex(routeIndex);\n  }, [routeIndex, directionsRenderer]);\n  if (!leg) return null;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      position: 'fixed',\n      // Fixa o Card no topo da página\n      top: 0,\n      // 0px do topo da página\n      left: 0,\n      // Alinhado à esquerda da página\n      width: '100%',\n      // Faz o Card ter 100% da largura da tela\n      zIndex: 1000 // Garante que esteja acima de todos os outros elementos\n\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          fontSize: 14\n        },\n        color: \"text.secondary\",\n        gutterBottom: true,\n        children: \"Word of the Day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selected.summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [leg.start_address.split(',')[0], \" para \", leg.end_address.split(',')[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distancia: \", (_leg$distance = leg.distance) === null || _leg$distance === void 0 ? void 0 : _leg$distance.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Dura\\xE7\\xE3o: \", (_leg$duration = leg.duration) === null || _leg$duration === void 0 ? void 0 : _leg$duration.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Outras rotas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: routes.map((route, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setRouteIndex(index),\n            children: route.summary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, route.summary, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Directions, \"tN9xR8n20dAjhQgDzlfll9ur9dE=\", false, function () {\n  return [useMap, useMapsLibrary];\n});\n\n_c2 = Directions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapsDashboard\");\n$RefreshReg$(_c2, \"Directions\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/Projeto advocacia/frontend/src/pages/dashboard/components/Maps.tsx"],"names":["APIProvider","Map","useMap","useMapsLibrary","Environment","useEffect","useState","Card","CardContent","Typography","MapsDashboard","position","lat","lng","height","width","API_KEY","ID_MAP","Directions","map","routesLibrary","directionsService","setDirectionsService","directionsRenderer","setDirectionsRenderer","routes","setRoutes","routeIndex","setRouteIndex","selected","leg","legs","DirectionsService","DirectionsRenderer","route","origin","destination","travelMode","google","maps","TravelMode","DRIVING","provideRouteAlternatives","then","response","setDirections","top","left","zIndex","fontSize","summary","start_address","split","end_address","distance","text","duration","index"],"mappings":"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","sourcesContent":["import {\n  APIProvider,\n  Map,\n  useMap,\n  useMapsLibrary,\n} from '@vis.gl/react-google-maps';\nimport { Environment } from '../../../shared/environment';\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, Typography } from '@mui/material';\n\nexport const MapsDashboard: React.FC = () => {\n  const position = { lat: 43.6532, lng: -79.3832 };\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <APIProvider apiKey={Environment.API_KEY}>\n        <Map\n          center={position}\n          defaultZoom={9}\n          mapId={Environment.ID_MAP}\n          fullscreenControl={false}\n        >\n          <Directions />\n        </Map>\n      </APIProvider>\n    </div>\n  );\n};\n\nfunction Directions() {\n  const map = useMap();\n  const routesLibrary = useMapsLibrary('routes');\n  const [directionsService, setDirectionsService] =\n    useState<google.maps.DirectionsService>();\n  const [directionsRenderer, setDirectionsRenderer] =\n    useState<google.maps.DirectionsRenderer>();\n  const [routes, setRoutes] = useState<google.maps.DirectionsRoute[]>([]);\n  const [routeIndex, setRouteIndex] = useState(0);\n  const selected = routes[routeIndex];\n  const leg = selected?.legs[0];\n\n  useEffect(() => {\n    if (!routesLibrary || !map) return;\n    setDirectionsService(new routesLibrary.DirectionsService());\n    setDirectionsRenderer(new routesLibrary.DirectionsRenderer({ map }));\n  }, [routesLibrary, map]);\n\n  useEffect(() => {\n    if (!directionsService || !directionsRenderer) return;\n    directionsService\n      .route({\n        origin: '100 Front St, Toronto ON',\n        destination: '500 College St, Toronto ON',\n        travelMode: google.maps.TravelMode.DRIVING,\n        provideRouteAlternatives: true,\n      })\n      .then((response) => {\n        directionsRenderer.setDirections(response);\n        setRoutes(response.routes);\n      });\n  }, [directionsService, directionsRenderer]);\n\n  useEffect(() => {\n    if (!directionsRenderer) return;\n    directionsRenderer.setRouteIndex(routeIndex);\n  }, [routeIndex, directionsRenderer]);\n\n  if (!leg) return null;\n\n  return (\n    <Card\n      sx={{\n        position: 'fixed', // Fixa o Card no topo da página\n        top: 0, // 0px do topo da página\n        left: 0, // Alinhado à esquerda da página\n        width: '100%', // Faz o Card ter 100% da largura da tela\n        zIndex: 1000, // Garante que esteja acima de todos os outros elementos\n      }}\n    >\n      <CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          Word of the Day\n        </Typography>\n        <h2>{selected.summary}</h2>\n        <p>\n          {leg.start_address.split(',')[0]} para {leg.end_address.split(',')[0]}\n        </p>\n        <p>Distancia: {leg.distance?.text}</p>\n        <p>Duração: {leg.duration?.text}</p>\n\n        <h2>Outras rotas:</h2>\n        <ul>\n          {routes.map((route, index) => (\n            <li key={route.summary}>\n              <button onClick={() => setRouteIndex(index)}>\n                {route.summary}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </CardContent>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}