{"ast":null,"code":"import _slicedToArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from './useIsDateDisabled';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { SECTION_TYPE_GRANULARITY } from '../internals/utils/getDefaultReferenceDate';\nexport var createCalendarStateReducer = function createCalendarStateReducer(reduceAnimations, disableSwitchToMonthOnDayFocus, utils) {\n  return function (state, action) {\n    switch (action.type) {\n      case 'changeMonth':\n        return _extends({}, state, {\n          slideDirection: action.direction,\n          currentMonth: action.newMonth,\n          isMonthSwitchingAnimating: !reduceAnimations\n        });\n\n      case 'finishMonthSwitchingAnimation':\n        return _extends({}, state, {\n          isMonthSwitchingAnimating: false\n        });\n\n      case 'changeFocusedDay':\n        {\n          if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n            return state;\n          }\n\n          var needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n          return _extends({}, state, {\n            focusedDay: action.focusedDay,\n            isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n            currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n            slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n          });\n        }\n\n      default:\n        throw new Error('missing support');\n    }\n  };\n};\nexport var useCalendarState = function useCalendarState(params) {\n  var value = params.value,\n      referenceDateProp = params.referenceDate,\n      defaultCalendarMonth = params.defaultCalendarMonth,\n      disableFuture = params.disableFuture,\n      disablePast = params.disablePast,\n      _params$disableSwitch = params.disableSwitchToMonthOnDayFocus,\n      disableSwitchToMonthOnDayFocus = _params$disableSwitch === void 0 ? false : _params$disableSwitch,\n      maxDate = params.maxDate,\n      minDate = params.minDate,\n      onMonthChange = params.onMonthChange,\n      reduceAnimations = params.reduceAnimations,\n      shouldDisableDate = params.shouldDisableDate,\n      timezone = params.timezone;\n  var now = useNow(timezone);\n  var utils = useUtils();\n  var reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  var referenceDate = React.useMemo(function () {\n    var externalReferenceDate = null;\n\n    if (referenceDateProp) {\n      externalReferenceDate = referenceDateProp;\n    } else if (defaultCalendarMonth) {\n      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.\n      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);\n    }\n\n    return singleItemValueManager.getInitialReferenceValue({\n      value: value,\n      utils: utils,\n      timezone: timezone,\n      props: params,\n      referenceDate: externalReferenceDate,\n      granularity: SECTION_TYPE_GRANULARITY.day\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var _React$useReducer = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: utils.isValid(value) ? value : now,\n    currentMonth: utils.startOfMonth(referenceDate),\n    slideDirection: 'left'\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      calendarState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var handleChangeMonth = React.useCallback(function (payload) {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  var changeMonth = React.useCallback(function (newDate) {\n    var newDateRequested = newDate;\n\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  var isDateDisabled = useIsDateDisabled({\n    shouldDisableDate: shouldDisableDate,\n    minDate: minDate,\n    maxDate: maxDate,\n    disableFuture: disableFuture,\n    disablePast: disablePast,\n    timezone: timezone\n  });\n  var onMonthSwitchingAnimationEnd = React.useCallback(function () {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  var changeFocusedDay = useEventCallback(function (newFocusedDate, withoutMonthSwitchingAnimation) {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation: withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    referenceDate: referenceDate,\n    calendarState: calendarState,\n    changeMonth: changeMonth,\n    changeFocusedDay: changeFocusedDay,\n    isDateDisabled: isDateDisabled,\n    onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,\n    handleChangeMonth: handleChangeMonth\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js"],"names":["_extends","React","useEventCallback","useIsDateDisabled","useUtils","useNow","singleItemValueManager","SECTION_TYPE_GRANULARITY","createCalendarStateReducer","reduceAnimations","disableSwitchToMonthOnDayFocus","utils","state","action","type","slideDirection","direction","currentMonth","newMonth","isMonthSwitchingAnimating","focusedDay","isSameDay","needMonthSwitch","isSameMonth","withoutMonthSwitchingAnimation","startOfMonth","isAfterDay","Error","useCalendarState","params","value","referenceDateProp","referenceDate","defaultCalendarMonth","disableFuture","disablePast","maxDate","minDate","onMonthChange","shouldDisableDate","timezone","now","reducerFn","useRef","Boolean","current","useMemo","externalReferenceDate","getInitialReferenceValue","props","granularity","day","useReducer","isValid","calendarState","dispatch","handleChangeMonth","useCallback","payload","changeMonth","newDate","newDateRequested","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","newFocusedDate"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from './useIsDateDisabled';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { SECTION_TYPE_GRANULARITY } from '../internals/utils/getDefaultReferenceDate';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = params => {\n  const {\n    value,\n    referenceDate: referenceDateProp,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus = false,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate,\n    timezone\n  } = params;\n  const now = useNow(timezone);\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const referenceDate = React.useMemo(() => {\n    let externalReferenceDate = null;\n    if (referenceDateProp) {\n      externalReferenceDate = referenceDateProp;\n    } else if (defaultCalendarMonth) {\n      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.\n      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);\n    }\n    return singleItemValueManager.getInitialReferenceValue({\n      value,\n      utils,\n      timezone,\n      props: params,\n      referenceDate: externalReferenceDate,\n      granularity: SECTION_TYPE_GRANULARITY.day\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: utils.isValid(value) ? value : now,\n    currentMonth: utils.startOfMonth(referenceDate),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate;\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  const isDateDisabled = useIsDateDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast,\n    timezone\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    referenceDate,\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};"]},"metadata":{},"sourceType":"module"}