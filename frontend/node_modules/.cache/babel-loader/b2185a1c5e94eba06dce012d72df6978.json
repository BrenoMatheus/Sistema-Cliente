{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"ampm\", \"ampmInClock\", \"autoFocus\", \"components\", \"componentsProps\", \"slots\", \"slotProps\", \"value\", \"defaultValue\", \"referenceDate\", \"disableIgnoringDatePartForTimeValidation\", \"maxTime\", \"minTime\", \"disableFuture\", \"disablePast\", \"minutesStep\", \"shouldDisableClock\", \"shouldDisableTime\", \"showViewSwitcher\", \"onChange\", \"view\", \"views\", \"openTo\", \"onViewChange\", \"focusedView\", \"onFocusedViewChange\", \"className\", \"disabled\", \"readOnly\", \"timezone\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, unstable_useId as useId } from '@mui/utils';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { PickersArrowSwitcher } from '../internals/components/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { getTimeClockUtilityClass } from './timeClockClasses';\nimport { Clock } from './Clock';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport { useControlledValueWithTimezone } from '../internals/hooks/useValueWithTimezone';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { uncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { useClockReferenceDate } from '../internals/hooks/useClockReferenceDate';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root'],\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getTimeClockUtilityClass, classes);\n};\n\nvar TimeClockRoot = styled(PickerViewRoot, {\n  name: 'MuiTimeClock',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'flex',\n  flexDirection: 'column',\n  position: 'relative'\n});\nvar TimeClockArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiTimeClock',\n  slot: 'ArrowSwitcher',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.arrowSwitcher;\n  }\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\nvar TIME_CLOCK_DEFAULT_VIEWS = ['hours', 'minutes'];\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [TimeClock](https://mui.com/x/react-date-pickers/time-clock/)\n *\n * API:\n *\n * - [TimeClock API](https://mui.com/x/api/date-pickers/time-clock/)\n */\n\nexport var TimeClock = /*#__PURE__*/React.forwardRef(function TimeClock(inProps, ref) {\n  var utils = useUtils();\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiTimeClock'\n  });\n\n  var _props$ampm = props.ampm,\n      ampm = _props$ampm === void 0 ? utils.is12HourCycleInCurrentLocale() : _props$ampm,\n      _props$ampmInClock = props.ampmInClock,\n      ampmInClock = _props$ampmInClock === void 0 ? false : _props$ampmInClock,\n      autoFocus = props.autoFocus,\n      components = props.components,\n      componentsProps = props.componentsProps,\n      innerSlots = props.slots,\n      innerSlotProps = props.slotProps,\n      valueProp = props.value,\n      defaultValue = props.defaultValue,\n      referenceDateProp = props.referenceDate,\n      _props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation,\n      disableIgnoringDatePartForTimeValidation = _props$disableIgnorin === void 0 ? false : _props$disableIgnorin,\n      maxTime = props.maxTime,\n      minTime = props.minTime,\n      disableFuture = props.disableFuture,\n      disablePast = props.disablePast,\n      _props$minutesStep = props.minutesStep,\n      minutesStep = _props$minutesStep === void 0 ? 1 : _props$minutesStep,\n      shouldDisableClock = props.shouldDisableClock,\n      shouldDisableTime = props.shouldDisableTime,\n      showViewSwitcher = props.showViewSwitcher,\n      onChange = props.onChange,\n      inView = props.view,\n      _props$views = props.views,\n      views = _props$views === void 0 ? TIME_CLOCK_DEFAULT_VIEWS : _props$views,\n      openTo = props.openTo,\n      onViewChange = props.onViewChange,\n      focusedView = props.focusedView,\n      onFocusedViewChange = props.onFocusedViewChange,\n      className = props.className,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      timezoneProp = props.timezone,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);\n  var slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;\n\n  var _useControlledValueWi = useControlledValueWithTimezone({\n    name: 'TimeClock',\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue: defaultValue,\n    onChange: onChange,\n    valueManager: singleItemValueManager\n  }),\n      value = _useControlledValueWi.value,\n      handleValueChange = _useControlledValueWi.handleValueChange,\n      timezone = _useControlledValueWi.timezone;\n\n  var valueOrReferenceDate = useClockReferenceDate({\n    value: value,\n    referenceDate: referenceDateProp,\n    utils: utils,\n    props: props,\n    timezone: timezone\n  });\n  var localeText = useLocaleText();\n  var now = useNow(timezone);\n\n  var _useViews = useViews({\n    view: inView,\n    views: views,\n    openTo: openTo,\n    onViewChange: onViewChange,\n    onChange: handleValueChange,\n    focusedView: focusedView,\n    onFocusedViewChange: onFocusedViewChange\n  }),\n      view = _useViews.view,\n      setView = _useViews.setView,\n      previousView = _useViews.previousView,\n      nextView = _useViews.nextView,\n      setValueAndGoToNextView = _useViews.setValueAndGoToNextView;\n\n  var _useMeridiemMode = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView),\n      meridiemMode = _useMeridiemMode.meridiemMode,\n      handleMeridiemChange = _useMeridiemMode.handleMeridiemChange;\n\n  var isTimeDisabled = React.useCallback(function (rawValue, viewType) {\n    var isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    var shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');\n\n    var containsValidTime = function containsValidTime(_ref) {\n      var start = _ref.start,\n          end = _ref.end;\n\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n\n      if (disableFuture && isAfter(start, now)) {\n        return false;\n      }\n\n      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    var isValidValue = function isValidValue(timeValue) {\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (timeValue % step !== 0) {\n        return false;\n      }\n\n      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {\n        return false;\n      }\n\n      if (shouldDisableTime) {\n        switch (viewType) {\n          case 'hours':\n            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');\n\n          case 'minutes':\n            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');\n\n          case 'seconds':\n            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');\n\n          default:\n            return false;\n        }\n      }\n\n      return true;\n    };\n\n    switch (viewType) {\n      case 'hours':\n        {\n          var valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          var dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);\n          var start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          var end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start: start,\n            end: end\n          }) || !isValidValue(valueWithMeridiem);\n        }\n\n      case 'minutes':\n        {\n          var dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);\n\n          var _start = utils.setSeconds(dateWithNewMinutes, 0);\n\n          var _end = utils.setSeconds(dateWithNewMinutes, 59);\n\n          return !containsValidTime({\n            start: _start,\n            end: _end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n\n      case 'seconds':\n        {\n          var dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);\n          var _start2 = dateWithNewSeconds;\n          var _end2 = dateWithNewSeconds;\n          return !containsValidTime({\n            start: _start2,\n            end: _end2\n          }) || !isValidValue(rawValue);\n        }\n\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);\n  var selectedId = useId();\n  var viewProps = React.useMemo(function () {\n    switch (view) {\n      case 'hours':\n        {\n          var handleHoursChange = function handleHoursChange(hourValue, isFinish) {\n            var valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);\n            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish);\n          };\n\n          return {\n            onChange: handleHoursChange,\n            viewValue: utils.getHours(valueOrReferenceDate),\n            children: getHourNumbers({\n              value: value,\n              utils: utils,\n              ampm: ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: localeText.hoursClockNumberText,\n              isDisabled: function isDisabled(hourValue) {\n                return disabled || isTimeDisabled(hourValue, 'hours');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n\n      case 'minutes':\n        {\n          var minutesValue = utils.getMinutes(valueOrReferenceDate);\n\n          var handleMinutesChange = function handleMinutesChange(minuteValue, isFinish) {\n            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish);\n          };\n\n          return {\n            viewValue: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils: utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: localeText.minutesClockNumberText,\n              isDisabled: function isDisabled(minuteValue) {\n                return disabled || isTimeDisabled(minuteValue, 'minutes');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n\n      case 'seconds':\n        {\n          var secondsValue = utils.getSeconds(valueOrReferenceDate);\n\n          var handleSecondsChange = function handleSecondsChange(secondValue, isFinish) {\n            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish);\n          };\n\n          return {\n            viewValue: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils: utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: localeText.secondsClockNumberText,\n              isDisabled: function isDisabled(secondValue) {\n                return disabled || isTimeDisabled(secondValue, 'seconds');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);\n  var ownerState = props;\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(TimeClockRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other, {\n    children: [/*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus != null ? autoFocus : !!focusedView,\n      ampmInClock: ampmInClock && views.includes('hours'),\n      value: value,\n      type: view,\n      ampm: ampm,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId,\n      disabled: disabled,\n      readOnly: readOnly\n    }, viewProps)), showViewSwitcher && /*#__PURE__*/_jsx(TimeClockArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      slots: slots,\n      slotProps: slotProps,\n      onGoToPrevious: function onGoToPrevious() {\n        return setView(previousView);\n      },\n      isPreviousDisabled: !previousView,\n      previousLabel: localeText.openPreviousView,\n      onGoToNext: function onGoToNext() {\n        return setView(nextView);\n      },\n      isNextDisabled: !nextView,\n      nextLabel: localeText.openNextView,\n      ownerState: ownerState\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TimeClock.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the picker views and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TView The view type. Will be one of date or time views.\n   * @param {TValue} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired on focused view change.\n   * @template TView\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * If `true`, the picker views and text field are read-only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  showViewSwitcher: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","clsx","PropTypes","styled","useThemeProps","unstable_composeClasses","composeClasses","unstable_useId","useId","useUtils","useNow","useLocaleText","PickersArrowSwitcher","convertValueToMeridiem","createIsAfterIgnoreDatePart","useViews","useMeridiemMode","PickerViewRoot","getTimeClockUtilityClass","Clock","getHourNumbers","getMinutesNumbers","useControlledValueWithTimezone","singleItemValueManager","uncapitalizeObjectKeys","useClockReferenceDate","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","slots","root","arrowSwitcher","TimeClockRoot","name","slot","overridesResolver","props","styles","display","flexDirection","position","TimeClockArrowSwitcher","right","top","TIME_CLOCK_DEFAULT_VIEWS","TimeClock","forwardRef","inProps","ref","utils","ampm","is12HourCycleInCurrentLocale","ampmInClock","autoFocus","components","componentsProps","innerSlots","innerSlotProps","slotProps","valueProp","value","defaultValue","referenceDateProp","referenceDate","disableIgnoringDatePartForTimeValidation","maxTime","minTime","disableFuture","disablePast","minutesStep","shouldDisableClock","shouldDisableTime","showViewSwitcher","onChange","inView","view","views","openTo","onViewChange","focusedView","onFocusedViewChange","className","disabled","readOnly","timezoneProp","timezone","other","valueManager","handleValueChange","valueOrReferenceDate","localeText","now","setView","previousView","nextView","setValueAndGoToNextView","meridiemMode","handleMeridiemChange","isTimeDisabled","useCallback","rawValue","viewType","isAfter","shouldCheckPastEnd","includes","containsValidTime","start","end","isValidValue","timeValue","step","setHours","setMinutes","setSeconds","valueWithMeridiem","dateWithNewHours","dateWithNewMinutes","dateWithNewSeconds","Error","selectedId","viewProps","useMemo","handleHoursChange","hourValue","isFinish","viewValue","getHours","children","getClockNumberText","hoursClockNumberText","isDisabled","minutesValue","getMinutes","handleMinutesChange","minuteValue","minutesClockNumberText","secondsValue","getSeconds","handleSecondsChange","secondValue","secondsClockNumberText","type","onGoToPrevious","isPreviousDisabled","previousLabel","openPreviousView","onGoToNext","isNextDisabled","nextLabel","openNextView","process","env","NODE_ENV","propTypes","bool","object","string","any","oneOf","number","func","sx","oneOfType","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"ampmInClock\", \"autoFocus\", \"components\", \"componentsProps\", \"slots\", \"slotProps\", \"value\", \"defaultValue\", \"referenceDate\", \"disableIgnoringDatePartForTimeValidation\", \"maxTime\", \"minTime\", \"disableFuture\", \"disablePast\", \"minutesStep\", \"shouldDisableClock\", \"shouldDisableTime\", \"showViewSwitcher\", \"onChange\", \"view\", \"views\", \"openTo\", \"onViewChange\", \"focusedView\", \"onFocusedViewChange\", \"className\", \"disabled\", \"readOnly\", \"timezone\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, unstable_useId as useId } from '@mui/utils';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { PickersArrowSwitcher } from '../internals/components/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { getTimeClockUtilityClass } from './timeClockClasses';\nimport { Clock } from './Clock';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport { useControlledValueWithTimezone } from '../internals/hooks/useValueWithTimezone';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { uncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { useClockReferenceDate } from '../internals/hooks/useClockReferenceDate';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getTimeClockUtilityClass, classes);\n};\nconst TimeClockRoot = styled(PickerViewRoot, {\n  name: 'MuiTimeClock',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'flex',\n  flexDirection: 'column',\n  position: 'relative'\n});\nconst TimeClockArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiTimeClock',\n  slot: 'ArrowSwitcher',\n  overridesResolver: (props, styles) => styles.arrowSwitcher\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\nconst TIME_CLOCK_DEFAULT_VIEWS = ['hours', 'minutes'];\n\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [TimeClock](https://mui.com/x/react-date-pickers/time-clock/)\n *\n * API:\n *\n * - [TimeClock API](https://mui.com/x/api/date-pickers/time-clock/)\n */\nexport const TimeClock = /*#__PURE__*/React.forwardRef(function TimeClock(inProps, ref) {\n  const utils = useUtils();\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTimeClock'\n  });\n  const {\n      ampm = utils.is12HourCycleInCurrentLocale(),\n      ampmInClock = false,\n      autoFocus,\n      components,\n      componentsProps,\n      slots: innerSlots,\n      slotProps: innerSlotProps,\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      disableIgnoringDatePartForTimeValidation = false,\n      maxTime,\n      minTime,\n      disableFuture,\n      disablePast,\n      minutesStep = 1,\n      shouldDisableClock,\n      shouldDisableTime,\n      showViewSwitcher,\n      onChange,\n      view: inView,\n      views = TIME_CLOCK_DEFAULT_VIEWS,\n      openTo,\n      onViewChange,\n      focusedView,\n      onFocusedViewChange,\n      className,\n      disabled,\n      readOnly,\n      timezone: timezoneProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);\n  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;\n  const {\n    value,\n    handleValueChange,\n    timezone\n  } = useControlledValueWithTimezone({\n    name: 'TimeClock',\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager: singleItemValueManager\n  });\n  const valueOrReferenceDate = useClockReferenceDate({\n    value,\n    referenceDate: referenceDateProp,\n    utils,\n    props,\n    timezone\n  });\n  const localeText = useLocaleText();\n  const now = useNow(timezone);\n  const {\n    view,\n    setView,\n    previousView,\n    nextView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    onChange: handleValueChange,\n    focusedView,\n    onFocusedViewChange\n  });\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView);\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');\n    const containsValidTime = ({\n      start,\n      end\n    }) => {\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n      if (disableFuture && isAfter(start, now)) {\n        return false;\n      }\n      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {\n        return false;\n      }\n      return true;\n    };\n    const isValidValue = (timeValue, step = 1) => {\n      if (timeValue % step !== 0) {\n        return false;\n      }\n      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {\n        return false;\n      }\n      if (shouldDisableTime) {\n        switch (viewType) {\n          case 'hours':\n            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');\n          case 'minutes':\n            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');\n          case 'seconds':\n            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');\n          default:\n            return false;\n        }\n      }\n      return true;\n    };\n    switch (viewType) {\n      case 'hours':\n        {\n          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);\n          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(valueWithMeridiem);\n        }\n      case 'minutes':\n        {\n          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);\n          const start = utils.setSeconds(dateWithNewMinutes, 0);\n          const end = utils.setSeconds(dateWithNewMinutes, 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n      case 'seconds':\n        {\n          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);\n          const start = dateWithNewSeconds;\n          const end = dateWithNewSeconds;\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue);\n        }\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);\n  const selectedId = useId();\n  const viewProps = React.useMemo(() => {\n    switch (view) {\n      case 'hours':\n        {\n          const handleHoursChange = (hourValue, isFinish) => {\n            const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);\n            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish);\n          };\n          return {\n            onChange: handleHoursChange,\n            viewValue: utils.getHours(valueOrReferenceDate),\n            children: getHourNumbers({\n              value,\n              utils,\n              ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: localeText.hoursClockNumberText,\n              isDisabled: hourValue => disabled || isTimeDisabled(hourValue, 'hours'),\n              selectedId\n            })\n          };\n        }\n      case 'minutes':\n        {\n          const minutesValue = utils.getMinutes(valueOrReferenceDate);\n          const handleMinutesChange = (minuteValue, isFinish) => {\n            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish);\n          };\n          return {\n            viewValue: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: localeText.minutesClockNumberText,\n              isDisabled: minuteValue => disabled || isTimeDisabled(minuteValue, 'minutes'),\n              selectedId\n            })\n          };\n        }\n      case 'seconds':\n        {\n          const secondsValue = utils.getSeconds(valueOrReferenceDate);\n          const handleSecondsChange = (secondValue, isFinish) => {\n            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish);\n          };\n          return {\n            viewValue: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: localeText.secondsClockNumberText,\n              isDisabled: secondValue => disabled || isTimeDisabled(secondValue, 'seconds'),\n              selectedId\n            })\n          };\n        }\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(TimeClockRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other, {\n    children: [/*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus != null ? autoFocus : !!focusedView,\n      ampmInClock: ampmInClock && views.includes('hours'),\n      value: value,\n      type: view,\n      ampm: ampm,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId,\n      disabled: disabled,\n      readOnly: readOnly\n    }, viewProps)), showViewSwitcher && /*#__PURE__*/_jsx(TimeClockArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      slots: slots,\n      slotProps: slotProps,\n      onGoToPrevious: () => setView(previousView),\n      isPreviousDisabled: !previousView,\n      previousLabel: localeText.openPreviousView,\n      onGoToNext: () => setView(nextView),\n      isNextDisabled: !nextView,\n      nextLabel: localeText.openNextView,\n      ownerState: ownerState\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TimeClock.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker views and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TView The view type. Will be one of date or time views.\n   * @param {TValue} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired on focused view change.\n   * @template TView\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * If `true`, the picker views and text field are read-only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  showViewSwitcher: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;"]},"metadata":{},"sourceType":"module"}