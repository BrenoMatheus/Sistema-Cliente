{"ast":null,"code":"var _jsxFileName = \"/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/list.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { formValidationSchema } from './DetailItemofLines';\nimport { ItemofLinesService } from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { useVForm } from '../../../../shared/forms';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Notes = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const [changedNote, setChangedNote] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    formRef,\n    save,\n    saveAndClose,\n    isSaveAndClose\n  } = useVForm();\n  const {\n    id = 'nova'\n  } = useParams();\n  const navigate = useNavigate();\n  const [rows, setRows] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const handleSave = dados => {\n    formValidationSchema.validate(dados, {\n      abortEarly: false\n    }).then(dadosValidados => {\n      setIsLoading(true);\n\n      if (id === 'nova') {\n        ItemofLinesService.create(dadosValidados).then(result => {\n          setIsLoading(false);\n\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            if (isSaveAndClose()) {\n              navigate('/itemofLines');\n            } else {\n              navigate(`/itemofLines/detail/${result}`);\n            }\n          }\n        });\n      } else {\n        ItemofLinesService.updateById(Number(id), {\n          id: Number(id),\n          ...dadosValidados\n        }).then(result => {\n          setIsLoading(false);\n\n          if (result instanceof Error) {\n            alert(result.message);\n          } else {\n            if (isSaveAndClose()) {\n              navigate('/itemofLines');\n            }\n          }\n        });\n      }\n    }).catch(errors => {\n      var _formRef$current;\n\n      const validationErrors = {};\n      errors.inner.forEach(error => {\n        if (!error.path) return;\n        validationErrors[error.path] = error.message;\n      });\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors(validationErrors);\n    });\n  };\n\n  const handleDelete = id => {\n    if (confirm('Realmente deseja apagar?')) {\n      ItemofLinesService.deleteById(id).then(result => {\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          alert('Registro apagado com sucesso!');\n          navigate('/itemofLines');\n        }\n      });\n    }\n  };\n  /* async function handleSave(e, notes) {\n        e.style.cursor = 'default';\n        e.style.boxShadow = 'none';\n        if (changedNote && changedNote !== notes) {\n            await api.post(`/contents/${data._id}`, {\n                notes: changedNote,\n            });\n        }\n    } */\n\n  /* async function handleEdit(e, priority) {\n    e.style.cursor = 'text';\n    e.style.borderRadius = '5px';\n    if (priority) {\n      e.style.boxShadow = '0 0 5px white';\n    } else {\n      e.style.boxShadow = '0 0 5px gray';\n    }\n  } */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: data.amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        defaultValue: data.amount\n        /* onClick={(e) => handleEdit(e.target, data.priority)} */\n        ,\n        onChange: e => setChangedNote(e.target.value)\n        /*  onBlur={(e) => handleSave(e.target, data.total)} */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Notes, \"Bgv8QpWH+qefdJWrBFtWrpLGHB8=\", false, function () {\n  return [useVForm, useParams, useNavigate];\n});\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/pages/orders/components/itemofLines/list.tsx"],"names":["React","useState","formValidationSchema","ItemofLinesService","useVForm","useNavigate","useParams","Notes","data","changedNote","setChangedNote","isLoading","setIsLoading","formRef","save","saveAndClose","isSaveAndClose","id","navigate","rows","setRows","totalCount","setTotalCount","handleSave","dados","validate","abortEarly","then","dadosValidados","create","result","Error","alert","message","updateById","Number","catch","errors","validationErrors","inner","forEach","error","path","current","setErrors","handleDelete","confirm","deleteById","amount","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { TextField, TextFieldProps } from '@mui/material';\nimport * as yup from 'yup';\nimport { formValidationSchema } from './DetailItemofLines';\nimport { IListItemofLine, ItemofLinesService } from '../../../../shared/services/api/itemofLines/ItemofLinesService';\nimport { IVFormErrors, useVForm } from '../../../../shared/forms';\nimport { useNavigate, useParams } from 'react-router-dom';\n\ntype TVTextFieldProps = {\n  name: string;\n  data: IListItemofLine;\n};\n\ninterface IFormData {\n  orderID: number;\n  itemID: number;\n  amount: number;\n  total: number;\n}\n\nexport const Notes: React.FC<TVTextFieldProps> = ({ data }) => {\n  const [changedNote, setChangedNote] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { formRef, save, saveAndClose, isSaveAndClose } = useVForm();\n  const { id = 'nova' } = useParams<'id'>();\n  const navigate = useNavigate();\n  const [rows, setRows] = useState<IListItemofLine[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const handleSave = (dados: IFormData) => {\n    formValidationSchema\n      .validate(dados, { abortEarly: false })\n      .then((dadosValidados) => {\n        setIsLoading(true);\n\n        if (id === 'nova') {\n          ItemofLinesService.create(dadosValidados).then((result) => {\n            setIsLoading(false);\n\n            if (result instanceof Error) {\n              alert(result.message);\n            } else {\n              if (isSaveAndClose()) {\n                navigate('/itemofLines');\n              } else {\n                navigate(`/itemofLines/detail/${result}`);\n              }\n            }\n          });\n        } else {\n          ItemofLinesService.updateById(Number(id), {\n            id: Number(id),\n            ...dadosValidados,\n          }).then((result) => {\n            setIsLoading(false);\n\n            if (result instanceof Error) {\n              alert(result.message);\n            } else {\n              if (isSaveAndClose()) {\n                navigate('/itemofLines');\n              }\n            }\n          });\n        }\n      })\n      .catch((errors: yup.ValidationError) => {\n        const validationErrors: IVFormErrors = {};\n\n        errors.inner.forEach((error) => {\n          if (!error.path) return;\n\n          validationErrors[error.path] = error.message;\n        });\n\n        formRef.current?.setErrors(validationErrors);\n      });\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm('Realmente deseja apagar?')) {\n      ItemofLinesService.deleteById(id).then((result) => {\n        if (result instanceof Error) {\n          alert(result.message);\n        } else {\n          alert('Registro apagado com sucesso!');\n          navigate('/itemofLines');\n        }\n      });\n    }\n  };\n\n  /* async function handleSave(e, notes) {\n        e.style.cursor = 'default';\n        e.style.boxShadow = 'none';\n        if (changedNote && changedNote !== notes) {\n            await api.post(`/contents/${data._id}`, {\n                notes: changedNote,\n            });\n        }\n    } */\n\n  /* async function handleEdit(e, priority) {\n    e.style.cursor = 'text';\n    e.style.borderRadius = '5px';\n    if (priority) {\n      e.style.boxShadow = '0 0 5px white';\n    } else {\n      e.style.boxShadow = '0 0 5px gray';\n    }\n  } */\n\n  return (\n    <>\n      <li\n        /* className={data.priority ? 'notepad-infos-priority' : 'notepad-infos'} */\n      >\n        <div>\n          <strong>{data.amount}</strong>\n          <div>\n            {/* <FaTrashAlt size=\"20\" onClick={() => handleDelete(data._id)} /> */}\n          </div>\n        </div>\n        <textarea\n          defaultValue={data.amount}\n          /* onClick={(e) => handleEdit(e.target, data.priority)} */\n          onChange={(e) => setChangedNote(e.target.value)}\n          /*  onBlur={(e) => handleSave(e.target, data.total)} */\n        />\n        <span>\n          {/* <FaExclamationCircle\n            size=\"20\"\n            // onClick={() => handleChangePriority(data._id)}\n          /> */}\n        </span>\n      </li>\n    </>\n  );\n};\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}