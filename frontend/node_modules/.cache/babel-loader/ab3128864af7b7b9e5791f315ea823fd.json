{"ast":null,"code":"import _objectSpread from\"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectWithoutProperties from\"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"name\",\"onValueChange\"];import React,{useEffect,useState}from'react';import{TextField}from'@mui/material';import{NumericFormat}from'react-number-format';import{useField}from'@unform/core';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * - Para resgatar o valor numérico no correto use o `onValueChange`\n * - Para eventos normais use o `onChange`\n *\n * Para como customizar a formatação verifique a documentação original do `react-number-format` [nesse link](https://www.npmjs.com/package/react-number-format) ou [nesse link](https://s-yadav.github.io/react-number-format/docs/intro/)\n */export var VNumericFormat=function VNumericFormat(_ref){var name=_ref.name,onValueChange=_ref.onValueChange,rest=_objectWithoutProperties(_ref,_excluded);var _useField=useField(name),fieldName=_useField.fieldName,defaultValue=_useField.defaultValue,registerField=_useField.registerField,error=_useField.error;var _useState=useState(defaultValue),_useState2=_slicedToArray(_useState,2),value=_useState2[0],_setValue=_useState2[1];useEffect(function(){registerField({name:fieldName,getValue:function getValue(){return value;},setValue:function setValue(_,value){return _setValue(value);}});},[fieldName,value,registerField]);var handleChange=function handleChange(value){_setValue(value);onValueChange&&onValueChange(value);};return/*#__PURE__*/_jsx(NumericFormat,_objectSpread(_objectSpread({},rest),{},{customInput:TextField,value:value,error:!!error,helperText:error,onValueChange:function onValueChange(_ref2){var value=_ref2.value;return handleChange(value);}}));};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/src/shared/forms/VNumericFormat.tsx"],"names":["React","useEffect","useState","TextField","NumericFormat","useField","VNumericFormat","name","onValueChange","rest","fieldName","defaultValue","registerField","error","value","setValue","getValue","_","handleChange"],"mappings":"8aAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,SAAT,KAA0C,eAA1C,CACA,OAA6BC,aAA7B,KAAkD,qBAAlD,CACA,OAASC,QAAT,KAAyB,cAAzB,C,2CAQA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAA0C,CAAG,QAA7CA,CAAAA,cAA6C,MAAsC,IAAnCC,CAAAA,IAAmC,MAAnCA,IAAmC,CAA7BC,aAA6B,MAA7BA,aAA6B,CAAXC,IAAW,0CAC9F,cAA0DJ,QAAQ,CAACE,IAAD,CAAlE,CAAQG,SAAR,WAAQA,SAAR,CAAmBC,YAAnB,WAAmBA,YAAnB,CAAiCC,aAAjC,WAAiCA,aAAjC,CAAgDC,KAAhD,WAAgDA,KAAhD,CACA,cAA0BX,QAAQ,CAASS,YAAT,CAAlC,wCAAOG,KAAP,eAAcC,SAAd,eAGAd,SAAS,CAAC,UAAM,CACdW,aAAa,CAAC,CACZL,IAAI,CAAEG,SADM,CAEZM,QAAQ,CAAE,0BAAMF,CAAAA,KAAN,EAFE,CAGZC,QAAQ,CAAE,kBAACE,CAAD,CAAIH,KAAJ,QAAcC,CAAAA,SAAQ,CAACD,KAAD,CAAtB,EAHE,CAAD,CAAb,CAKD,CANQ,CAMN,CAACJ,SAAD,CAAYI,KAAZ,CAAmBF,aAAnB,CANM,CAAT,CASA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACJ,KAAD,CAAmB,CACtCC,SAAQ,CAACD,KAAD,CAAR,CACAN,aAAa,EAAIA,aAAa,CAACM,KAAD,CAA9B,CACD,CAHD,CAMA,mBACE,KAAC,aAAD,gCACML,IADN,MAGE,WAAW,CAAEN,SAHf,CAIE,KAAK,CAAEW,KAJT,CAKE,KAAK,CAAE,CAAC,CAACD,KALX,CAME,UAAU,CAAEA,KANd,CAOE,aAAa,CAAE,iCAAGC,CAAAA,KAAH,OAAGA,KAAH,OAAeI,CAAAA,YAAY,CAACJ,KAAD,CAA3B,EAPjB,GADF,CAWD,CA/BM","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TextField, TextFieldProps } from '@mui/material';\nimport { NumericFormatProps, NumericFormat } from 'react-number-format';\nimport { useField } from '@unform/core';\n\n\ntype TVTextFieldProps = Omit<NumericFormatProps, 'value'> & Omit<TextFieldProps, 'value'> & {\n  name: string;\n\n  onValueChange?: (value: string) => void;\n}\n/**\n * - Para resgatar o valor numérico no correto use o `onValueChange`\n * - Para eventos normais use o `onChange`\n *\n * Para como customizar a formatação verifique a documentação original do `react-number-format` [nesse link](https://www.npmjs.com/package/react-number-format) ou [nesse link](https://s-yadav.github.io/react-number-format/docs/intro/)\n */\nexport const VNumericFormat: React.FC<TVTextFieldProps> = ({ name, onValueChange, ...rest }) => {\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n  const [value, setValue] = useState<string>(defaultValue);\n\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      getValue: () => value,\n      setValue: (_, value) => setValue(value),\n    });\n  }, [fieldName, value, registerField]);\n\n\n  const handleChange = (value: string) => {\n    setValue(value);\n    onValueChange && onValueChange(value);\n  };\n\n\n  return (\n    <NumericFormat\n      {...rest as any}\n\n      customInput={TextField}\n      value={value}\n      error={!!error}\n      helperText={error}\n      onValueChange={({ value }) => handleChange(value)}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}