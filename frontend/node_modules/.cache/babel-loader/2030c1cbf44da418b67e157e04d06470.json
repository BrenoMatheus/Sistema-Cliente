{"ast":null,"code":"import { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStartTime, leftEndTime] = [+toDate(intervalLeft.start), +toDate(intervalLeft.end)].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [+toDate(intervalRight.start), +toDate(intervalRight.end)].sort((a, b) => a - b);\n  const isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  const overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  const overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  const differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / millisecondsInDay);\n} // Fallback for modularized imports:\n\nexport default getOverlappingDaysInIntervals;","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/date-fns/getOverlappingDaysInIntervals.mjs"],"names":["millisecondsInDay","toDate","getOverlappingDaysInIntervals","intervalLeft","intervalRight","leftStartTime","leftEndTime","start","end","sort","a","b","rightStartTime","rightEndTime","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","Math","ceil"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,iBAAlC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,6BAAT,CAAuCC,YAAvC,EAAqDC,aAArD,EAAoE;AACzE,QAAM,CAACC,aAAD,EAAgBC,WAAhB,IAA+B,CACnC,CAACL,MAAM,CAACE,YAAY,CAACI,KAAd,CAD4B,EAEnC,CAACN,MAAM,CAACE,YAAY,CAACK,GAAd,CAF4B,EAGnCC,IAHmC,CAG9B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHgB,CAArC;AAIA,QAAM,CAACC,cAAD,EAAiBC,YAAjB,IAAiC,CACrC,CAACZ,MAAM,CAACG,aAAa,CAACG,KAAf,CAD8B,EAErC,CAACN,MAAM,CAACG,aAAa,CAACI,GAAf,CAF8B,EAGrCC,IAHqC,CAGhC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHkB,CAAvC;AAKA,QAAMG,aAAa,GACjBT,aAAa,GAAGQ,YAAhB,IAAgCD,cAAc,GAAGN,WADnD;;AAGA,MAAI,CAACQ,aAAL,EAAoB;AAClB,WAAO,CAAP;AACD;;AAED,QAAMC,gBAAgB,GACpBH,cAAc,GAAGP,aAAjB,GAAiCA,aAAjC,GAAiDO,cADnD;AAGA,QAAMI,cAAc,GAClBH,YAAY,GAAGP,WAAf,GAA6BA,WAA7B,GAA2CO,YAD7C;AAGA,QAAMI,cAAc,GAAGD,cAAc,GAAGD,gBAAxC;AAEA,SAAOG,IAAI,CAACC,IAAL,CAAUF,cAAc,GAAGjB,iBAA3B,CAAP;AACD,C,CAED;;AACA,eAAeE,6BAAf","sourcesContent":["import { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStartTime, leftEndTime] = [\n    +toDate(intervalLeft.start),\n    +toDate(intervalLeft.end),\n  ].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [\n    +toDate(intervalRight.start),\n    +toDate(intervalRight.end),\n  ].sort((a, b) => a - b);\n\n  const isOverlapping =\n    leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  const overlapStartDate =\n    rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n\n  const overlapEndDate =\n    rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n\n  const differenceInMs = overlapEndDate - overlapStartDate;\n\n  return Math.ceil(differenceInMs / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default getOverlappingDaysInIntervals;\n"]},"metadata":{},"sourceType":"module"}