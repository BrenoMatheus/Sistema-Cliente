{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { useLocaleText, useUtils, validateDate } from '../internals';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { CalendarIcon } from '../icons';\nimport { DateField } from '../DateField';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDateViewCalendar } from '../dateViewRenderers';\nimport { resolveDateFormat } from '../internals/utils/date-utils';\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)\n */\n\nvar DesktopDatePicker = /*#__PURE__*/React.forwardRef(function DesktopDatePicker(inProps, ref) {\n  var _defaultizedProps$yea, _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;\n\n  var localeText = useLocaleText();\n  var utils = useUtils(); // Props with the default values common to all date pickers\n\n  var defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiDesktopDatePicker');\n\n  var viewRenderers = _extends({\n    day: renderDateViewCalendar,\n    month: renderDateViewCalendar,\n    year: renderDateViewCalendar\n  }, defaultizedProps.viewRenderers); // Props with the default values specific to the desktop variant\n\n\n  var props = _extends({}, defaultizedProps, {\n    viewRenderers: viewRenderers,\n    format: resolveDateFormat(utils, defaultizedProps, false),\n    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,\n    slots: _extends({\n      openPickerIcon: CalendarIcon,\n      field: DateField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: function field(ownerState) {\n        var _defaultizedProps$slo;\n\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref: ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\n    })\n  });\n\n  var _useDesktopPicker = useDesktopPicker({\n    props: props,\n    valueManager: singleItemValueManager,\n    valueType: 'date',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,\n    validator: validateDate\n  }),\n      renderPicker = _useDesktopPicker.renderPicker;\n\n  return renderPicker();\n});\nDesktopDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value` and `defaultValue` are empty.\n   * @deprecated Consider using `referenceDate` instead.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Months rendered per row.\n   * @default 3\n   */\n  monthsPerRow: PropTypes.oneOf([3, 4]),\n\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback fired on year change.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} If `true` the date will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific month.\n   * @template TDate\n   * @param {TDate} month The month to test.\n   * @returns {boolean} If `true`, the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific year.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} If `true`, the year will be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func,\n    month: PropTypes.func,\n    year: PropTypes.func\n  }),\n\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),\n\n  /**\n   * Years rendered per row.\n   * @default 4\n   */\n  yearsPerRow: PropTypes.oneOf([3, 4])\n};\nexport { DesktopDatePicker };","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js"],"names":["_extends","React","PropTypes","resolveComponentProps","refType","singleItemValueManager","useDatePickerDefaultizedProps","useLocaleText","useUtils","validateDate","useDesktopPicker","CalendarIcon","DateField","extractValidationProps","renderDateViewCalendar","resolveDateFormat","DesktopDatePicker","forwardRef","inProps","ref","_defaultizedProps$yea","_defaultizedProps$slo2","_props$localeText$ope","_props$localeText","localeText","utils","defaultizedProps","viewRenderers","day","month","year","props","format","yearsPerRow","slots","openPickerIcon","field","slotProps","ownerState","_defaultizedProps$slo","toolbar","hidden","valueManager","valueType","getOpenDialogAriaText","openDatePickerDialogue","validator","renderPicker","propTypes","autoFocus","bool","className","string","closeOnSelect","components","object","componentsProps","dayOfWeekFormatter","func","defaultCalendarMonth","any","defaultValue","disabled","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","fixedWeekNumber","number","formatDensity","oneOf","inputRef","label","node","loading","maxDate","minDate","monthsPerRow","name","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onSelectedSectionsChange","onViewChange","onYearChange","open","openTo","orientation","readOnly","reduceAnimations","referenceDate","renderLoading","selectedSections","oneOfType","shape","endIndex","isRequired","startIndex","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","sx","arrayOf","timezone","value","view","views"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { useLocaleText, useUtils, validateDate } from '../internals';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { CalendarIcon } from '../icons';\nimport { DateField } from '../DateField';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderDateViewCalendar } from '../dateViewRenderers';\nimport { resolveDateFormat } from '../internals/utils/date-utils';\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)\n */\nconst DesktopDatePicker = /*#__PURE__*/React.forwardRef(function DesktopDatePicker(inProps, ref) {\n  var _defaultizedProps$yea, _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all date pickers\n  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiDesktopDatePicker');\n  const viewRenderers = _extends({\n    day: renderDateViewCalendar,\n    month: renderDateViewCalendar,\n    year: renderDateViewCalendar\n  }, defaultizedProps.viewRenderers);\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    viewRenderers,\n    format: resolveDateFormat(utils, defaultizedProps, false),\n    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,\n    slots: _extends({\n      openPickerIcon: CalendarIcon,\n      field: DateField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: true\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'date',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,\n    validator: validateDate\n  });\n  return renderPicker();\n});\nDesktopDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n   * @param {TDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value` and `defaultValue` are empty.\n   * @deprecated Consider using `referenceDate` instead.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n  /**\n   * Months rendered per row.\n   * @default 3\n   */\n  monthsPerRow: PropTypes.oneOf([3, 4]),\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Callback fired on year change.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.any,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} If `true` the date will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific month.\n   * @template TDate\n   * @param {TDate} month The month to test.\n   * @returns {boolean} If `true`, the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n  /**\n   * Disable specific year.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} If `true`, the year will be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func,\n    month: PropTypes.func,\n    year: PropTypes.func\n  }),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),\n  /**\n   * Years rendered per row.\n   * @default 4\n   */\n  yearsPerRow: PropTypes.oneOf([3, 4])\n};\nexport { DesktopDatePicker };"]},"metadata":{},"sourceType":"module"}