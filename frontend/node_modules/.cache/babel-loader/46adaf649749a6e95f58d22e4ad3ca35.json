{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"value\", \"referenceDate\"];\nimport { areDatesEqual, getTodayDate, replaceInvalidDateByNull } from './date-utils';\nimport { getDefaultReferenceDate } from './getDefaultReferenceDate';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport var singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: getTodayDate,\n  getInitialReferenceValue: function getInitialReferenceValue(_ref) {\n    var value = _ref.value,\n        referenceDate = _ref.referenceDate,\n        params = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    if (value != null && params.utils.isValid(value)) {\n      return value;\n    }\n\n    if (referenceDate != null) {\n      return referenceDate;\n    }\n\n    return getDefaultReferenceDate(params);\n  },\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: function isSameError(a, b) {\n    return a === b;\n  },\n  hasError: function hasError(error) {\n    return error != null;\n  },\n  defaultErrorState: null,\n  getTimezone: function getTimezone(utils, value) {\n    return value == null || !utils.isValid(value) ? null : utils.getTimezone(value);\n  },\n  setTimezone: function setTimezone(utils, timezone, value) {\n    return value == null ? null : utils.setTimezone(value, timezone);\n  }\n};\nexport var singleItemFieldValueManager = {\n  updateReferenceValue: function updateReferenceValue(utils, value, prevReferenceValue) {\n    return value == null || !utils.isValid(value) ? prevReferenceValue : value;\n  },\n  getSectionsFromValue: function getSectionsFromValue(utils, date, prevSections, isRTL, getSectionsFromDate) {\n    var shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: function getActiveDateManager(utils, state) {\n    return {\n      date: state.value,\n      referenceDate: state.referenceValue,\n      getSections: function getSections(sections) {\n        return sections;\n      },\n      getNewValuesFromNewActiveDate: function getNewValuesFromNewActiveDate(newActiveDate) {\n        return {\n          value: newActiveDate,\n          referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n        };\n      }\n    };\n  },\n  parseValueStr: function parseValueStr(valueStr, referenceValue, parseDate) {\n    return parseDate(valueStr.trim(), referenceValue);\n  }\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js"],"names":["_objectWithoutPropertiesLoose","_excluded","areDatesEqual","getTodayDate","replaceInvalidDateByNull","getDefaultReferenceDate","addPositionPropertiesToSections","createDateStrForInputFromSections","singleItemValueManager","emptyValue","getTodayValue","getInitialReferenceValue","_ref","value","referenceDate","params","utils","isValid","cleanValue","areValuesEqual","isSameError","a","b","hasError","error","defaultErrorState","getTimezone","setTimezone","timezone","singleItemFieldValueManager","updateReferenceValue","prevReferenceValue","getSectionsFromValue","date","prevSections","isRTL","getSectionsFromDate","shouldReUsePrevDateSections","getValueStrFromSections","getActiveDateManager","state","referenceValue","getSections","sections","getNewValuesFromNewActiveDate","newActiveDate","parseValueStr","valueStr","parseDate","trim"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"value\", \"referenceDate\"];\nimport { areDatesEqual, getTodayDate, replaceInvalidDateByNull } from './date-utils';\nimport { getDefaultReferenceDate } from './getDefaultReferenceDate';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: getTodayDate,\n  getInitialReferenceValue: _ref => {\n    let {\n        value,\n        referenceDate\n      } = _ref,\n      params = _objectWithoutPropertiesLoose(_ref, _excluded);\n    if (value != null && params.utils.isValid(value)) {\n      return value;\n    }\n    if (referenceDate != null) {\n      return referenceDate;\n    }\n    return getDefaultReferenceDate(params);\n  },\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  hasError: error => error != null,\n  defaultErrorState: null,\n  getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),\n  setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: (utils, state) => ({\n    date: state.value,\n    referenceDate: state.referenceValue,\n    getSections: sections => sections,\n    getNewValuesFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)\n};"]},"metadata":{},"sourceType":"module"}