{"ast":null,"code":"import _toConsumableArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport var SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport var getSectionTypeGranularity = function getSectionTypeGranularity(sections) {\n  return Math.max.apply(Math, _toConsumableArray(sections.map(function (section) {\n    var _SECTION_TYPE_GRANULA;\n\n    return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n  })));\n};\nexport var getViewsGranularity = function getViewsGranularity(views) {\n  return Math.max.apply(Math, _toConsumableArray(views.map(function (view) {\n    var _SECTION_TYPE_GRANULA2;\n\n    return (_SECTION_TYPE_GRANULA2 = SECTION_TYPE_GRANULARITY[view]) != null ? _SECTION_TYPE_GRANULA2 : 1;\n  })));\n};\n\nvar roundDate = function roundDate(utils, granularity, date) {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  } // We don't have startOfHour / startOfMinute / startOfSecond\n\n\n  var roundedDate = date;\n\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n\n  return roundedDate;\n};\n\nexport var getDefaultReferenceDate = function getDefaultReferenceDate(_ref) {\n  var props = _ref.props,\n      utils = _ref.utils,\n      granularity = _ref.granularity,\n      timezone = _ref.timezone,\n      inGetTodayDate = _ref.getTodayDate;\n\n  var _props$disableIgnorin;\n\n  var referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n\n  var isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n\n  return referenceDate;\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js"],"names":["createIsAfterIgnoreDatePart","mergeDateAndTime","getTodayDate","SECTION_TYPE_GRANULARITY","year","month","day","hours","minutes","seconds","milliseconds","getSectionTypeGranularity","sections","Math","max","map","section","_SECTION_TYPE_GRANULA","type","getViewsGranularity","views","view","_SECTION_TYPE_GRANULA2","roundDate","utils","granularity","date","startOfYear","startOfMonth","startOfDay","roundedDate","setMinutes","setSeconds","setMilliseconds","getDefaultReferenceDate","props","timezone","inGetTodayDate","_props$disableIgnorin","referenceDate","minDate","isAfterDay","maxDate","isBeforeDay","isAfter","disableIgnoringDatePartForTimeValidation","minTime","maxTime"],"mappings":"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","sourcesContent":["import { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport const SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport const getSectionTypeGranularity = sections => Math.max(...sections.map(section => {\n  var _SECTION_TYPE_GRANULA;\n  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n}));\nexport const getViewsGranularity = views => Math.max(...views.map(view => {\n  var _SECTION_TYPE_GRANULA2;\n  return (_SECTION_TYPE_GRANULA2 = SECTION_TYPE_GRANULARITY[view]) != null ? _SECTION_TYPE_GRANULA2 : 1;\n}));\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  let roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nexport const getDefaultReferenceDate = ({\n  props,\n  utils,\n  granularity,\n  timezone,\n  getTodayDate: inGetTodayDate\n}) => {\n  var _props$disableIgnorin;\n  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};"]},"metadata":{},"sourceType":"module"}