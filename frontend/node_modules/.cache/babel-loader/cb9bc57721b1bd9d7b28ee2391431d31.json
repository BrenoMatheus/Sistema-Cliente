{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useControlled from '@mui/utils/useControlled';\nimport { useTheme } from '@mui/material/styles';\nimport { useUtils, useLocaleText, useLocalizationContext } from '../useUtils';\nimport { addPositionPropertiesToSections, splitFormatIntoSections, mergeDateIntoReferenceDate, getSectionsBoundaries, validateSections, getDateFromDateSections } from './useField.utils';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\nimport { getSectionTypeGranularity } from '../../utils/getDefaultReferenceDate';\nexport const useFieldState = params => {\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const adapter = useLocalizationContext();\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const {\n    valueManager,\n    fieldValueManager,\n    valueType,\n    validator,\n    internalProps,\n    internalProps: {\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      onChange,\n      format,\n      formatDensity = 'dense',\n      selectedSections: selectedSectionsProp,\n      onSelectedSectionsChange,\n      shouldRespectLeadingZeros = false,\n      timezone: timezoneProp\n    }\n  } = params;\n  const {\n    timezone,\n    value: valueFromTheOutside,\n    handleValueChange\n  } = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  });\n  const sectionsValueBoundaries = React.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);\n  const getSectionsFromValue = React.useCallback(function (value) {\n    let fallbackSections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL));\n  }, [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);\n  const placeholder = React.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);\n  const [state, setState] = React.useState(() => {\n    const sections = getSectionsFromValue(valueFromTheOutside);\n    validateSections(sections, valueType);\n    const stateWithoutReferenceDate = {\n      sections,\n      value: valueFromTheOutside,\n      referenceValue: valueManager.emptyValue,\n      tempValueStrAndroid: null\n    };\n    const granularity = getSectionTypeGranularity(sections);\n    const referenceValue = valueManager.getInitialReferenceValue({\n      referenceDate: referenceDateProp,\n      value: valueFromTheOutside,\n      utils,\n      props: internalProps,\n      granularity,\n      timezone\n    });\n    return _extends({}, stateWithoutReferenceDate, {\n      referenceValue\n    });\n  });\n  const [selectedSections, innerSetSelectedSections] = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'useField',\n    state: 'selectedSectionIndexes'\n  });\n\n  const setSelectedSections = newSelectedSections => {\n    innerSetSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n    setState(prevState => _extends({}, prevState, {\n      selectedSectionQuery: null\n    }));\n  };\n\n  const selectedSectionIndexes = React.useMemo(() => {\n    if (selectedSections == null) {\n      return null;\n    }\n\n    if (selectedSections === 'all') {\n      return {\n        startIndex: 0,\n        endIndex: state.sections.length - 1,\n        shouldSelectBoundarySelectors: true\n      };\n    }\n\n    if (typeof selectedSections === 'number') {\n      return {\n        startIndex: selectedSections,\n        endIndex: selectedSections\n      };\n    }\n\n    if (typeof selectedSections === 'string') {\n      const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);\n      return {\n        startIndex: selectedSectionIndex,\n        endIndex: selectedSectionIndex\n      };\n    }\n\n    return selectedSections;\n  }, [selectedSections, state.sections]);\n\n  const publishValue = _ref => {\n    let {\n      value,\n      referenceValue,\n      sections\n    } = _ref;\n    setState(prevState => _extends({}, prevState, {\n      sections,\n      value,\n      referenceValue,\n      tempValueStrAndroid: null\n    }));\n\n    if (valueManager.areValuesEqual(utils, state.value, value)) {\n      return;\n    }\n\n    const context = {\n      validationError: validator({\n        adapter,\n        value,\n        props: _extends({}, internalProps, {\n          value,\n          timezone\n        })\n      })\n    };\n    handleValueChange(value, context);\n  };\n\n  const setSectionValue = (sectionIndex, newSectionValue) => {\n    const newSections = [...state.sections];\n    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {\n      value: newSectionValue,\n      modified: true\n    });\n    return addPositionPropertiesToSections(newSections, isRTL);\n  };\n\n  const clearValue = () => {\n    publishValue({\n      value: valueManager.emptyValue,\n      referenceValue: state.referenceValue,\n      sections: getSectionsFromValue(valueManager.emptyValue)\n    });\n  };\n\n  const clearActiveSection = () => {\n    if (selectedSectionIndexes == null) {\n      return;\n    }\n\n    const activeSection = state.sections[selectedSectionIndexes.startIndex];\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;\n    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');\n    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));\n    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n\n    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {\n      publishValue(_extends({}, newValues, {\n        sections: newSections\n      }));\n    } else {\n      setState(prevState => _extends({}, prevState, newValues, {\n        sections: newSections,\n        tempValueStrAndroid: null\n      }));\n    }\n  };\n\n  const updateValueFromValueStr = valueStr => {\n    const parseDateStr = (dateStr, referenceDate) => {\n      const date = utils.parse(dateStr, format);\n\n      if (date == null || !utils.isValid(date)) {\n        return null;\n      }\n\n      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);\n    };\n\n    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);\n    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);\n    publishValue({\n      value: newValue,\n      referenceValue: newReferenceValue,\n      sections: getSectionsFromValue(newValue, state.sections)\n    });\n  };\n\n  const updateSectionValue = _ref2 => {\n    let {\n      activeSection,\n      newSectionValue,\n      shouldGoToNextSection\n    } = _ref2;\n\n    /**\n     * 1. Decide which section should be focused\n     */\n    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {\n      setSelectedSections(selectedSectionIndexes.startIndex + 1);\n    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n      setSelectedSections(selectedSectionIndexes.startIndex);\n    }\n    /**\n     * 2. Try to build a valid date from the new section value\n     */\n\n\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);\n    const newActiveDateSections = activeDateManager.getSections(newSections);\n    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);\n    let values;\n    let shouldPublish;\n    /**\n     * If the new date is valid,\n     * Then we merge the value of the modified sections into the reference date.\n     * This makes sure that we don't lose some information of the initial date (like the time on a date field).\n     */\n\n    if (newActiveDate != null && utils.isValid(newActiveDate)) {\n      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);\n      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);\n      shouldPublish = true;\n    } else {\n      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));\n    }\n    /**\n     * Publish or update the internal state with the new value and sections.\n     */\n\n\n    if (shouldPublish) {\n      return publishValue(_extends({}, values, {\n        sections: newSections\n      }));\n    }\n\n    return setState(prevState => _extends({}, prevState, values, {\n      sections: newSections,\n      tempValueStrAndroid: null\n    }));\n  };\n\n  const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {\n    tempValueStrAndroid\n  }));\n\n  React.useEffect(() => {\n    const sections = getSectionsFromValue(state.value);\n    validateSections(sections, valueType);\n    setState(prevState => _extends({}, prevState, {\n      sections\n    }));\n  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    let shouldUpdate = false;\n\n    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {\n      shouldUpdate = true;\n    } else {\n      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);\n    }\n\n    if (shouldUpdate) {\n      setState(prevState => _extends({}, prevState, {\n        value: valueFromTheOutside,\n        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),\n        sections: getSectionsFromValue(valueFromTheOutside)\n      }));\n    }\n  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js"],"names":["_extends","React","useControlled","useTheme","useUtils","useLocaleText","useLocalizationContext","addPositionPropertiesToSections","splitFormatIntoSections","mergeDateIntoReferenceDate","getSectionsBoundaries","validateSections","getDateFromDateSections","useValueWithTimezone","getSectionTypeGranularity","useFieldState","params","utils","localeText","adapter","theme","isRTL","direction","valueManager","fieldValueManager","valueType","validator","internalProps","value","valueProp","defaultValue","referenceDate","referenceDateProp","onChange","format","formatDensity","selectedSections","selectedSectionsProp","onSelectedSectionsChange","shouldRespectLeadingZeros","timezone","timezoneProp","valueFromTheOutside","handleValueChange","sectionsValueBoundaries","useMemo","getSectionsFromValue","useCallback","fallbackSections","date","placeholder","getValueStrFromSections","emptyValue","state","setState","useState","sections","stateWithoutReferenceDate","referenceValue","tempValueStrAndroid","granularity","getInitialReferenceValue","props","innerSetSelectedSections","controlled","default","name","setSelectedSections","newSelectedSections","prevState","selectedSectionQuery","selectedSectionIndexes","startIndex","endIndex","length","shouldSelectBoundarySelectors","selectedSectionIndex","findIndex","section","type","publishValue","areValuesEqual","context","validationError","setSectionValue","sectionIndex","newSectionValue","newSections","modified","clearValue","clearActiveSection","activeSection","activeDateManager","getActiveDateManager","nonEmptySectionCountBefore","getSections","filter","hasNoOtherNonEmptySections","newActiveDate","Date","newValues","getNewValuesFromNewActiveDate","isValid","updateValueFromValueStr","valueStr","parseDateStr","dateStr","parse","newValue","parseValueStr","newReferenceValue","updateReferenceValue","updateSectionValue","shouldGoToNextSection","newActiveDateSections","values","shouldPublish","mergedDate","setTempAndroidValueStr","prev","useEffect","locale","shouldUpdate","getTimezone"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useControlled from '@mui/utils/useControlled';\nimport { useTheme } from '@mui/material/styles';\nimport { useUtils, useLocaleText, useLocalizationContext } from '../useUtils';\nimport { addPositionPropertiesToSections, splitFormatIntoSections, mergeDateIntoReferenceDate, getSectionsBoundaries, validateSections, getDateFromDateSections } from './useField.utils';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\nimport { getSectionTypeGranularity } from '../../utils/getDefaultReferenceDate';\nexport const useFieldState = params => {\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const adapter = useLocalizationContext();\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const {\n    valueManager,\n    fieldValueManager,\n    valueType,\n    validator,\n    internalProps,\n    internalProps: {\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      onChange,\n      format,\n      formatDensity = 'dense',\n      selectedSections: selectedSectionsProp,\n      onSelectedSectionsChange,\n      shouldRespectLeadingZeros = false,\n      timezone: timezoneProp\n    }\n  } = params;\n  const {\n    timezone,\n    value: valueFromTheOutside,\n    handleValueChange\n  } = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  });\n  const sectionsValueBoundaries = React.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);\n  const getSectionsFromValue = React.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);\n  const placeholder = React.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);\n  const [state, setState] = React.useState(() => {\n    const sections = getSectionsFromValue(valueFromTheOutside);\n    validateSections(sections, valueType);\n    const stateWithoutReferenceDate = {\n      sections,\n      value: valueFromTheOutside,\n      referenceValue: valueManager.emptyValue,\n      tempValueStrAndroid: null\n    };\n    const granularity = getSectionTypeGranularity(sections);\n    const referenceValue = valueManager.getInitialReferenceValue({\n      referenceDate: referenceDateProp,\n      value: valueFromTheOutside,\n      utils,\n      props: internalProps,\n      granularity,\n      timezone\n    });\n    return _extends({}, stateWithoutReferenceDate, {\n      referenceValue\n    });\n  });\n  const [selectedSections, innerSetSelectedSections] = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'useField',\n    state: 'selectedSectionIndexes'\n  });\n  const setSelectedSections = newSelectedSections => {\n    innerSetSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n    setState(prevState => _extends({}, prevState, {\n      selectedSectionQuery: null\n    }));\n  };\n  const selectedSectionIndexes = React.useMemo(() => {\n    if (selectedSections == null) {\n      return null;\n    }\n    if (selectedSections === 'all') {\n      return {\n        startIndex: 0,\n        endIndex: state.sections.length - 1,\n        shouldSelectBoundarySelectors: true\n      };\n    }\n    if (typeof selectedSections === 'number') {\n      return {\n        startIndex: selectedSections,\n        endIndex: selectedSections\n      };\n    }\n    if (typeof selectedSections === 'string') {\n      const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);\n      return {\n        startIndex: selectedSectionIndex,\n        endIndex: selectedSectionIndex\n      };\n    }\n    return selectedSections;\n  }, [selectedSections, state.sections]);\n  const publishValue = ({\n    value,\n    referenceValue,\n    sections\n  }) => {\n    setState(prevState => _extends({}, prevState, {\n      sections,\n      value,\n      referenceValue,\n      tempValueStrAndroid: null\n    }));\n    if (valueManager.areValuesEqual(utils, state.value, value)) {\n      return;\n    }\n    const context = {\n      validationError: validator({\n        adapter,\n        value,\n        props: _extends({}, internalProps, {\n          value,\n          timezone\n        })\n      })\n    };\n    handleValueChange(value, context);\n  };\n  const setSectionValue = (sectionIndex, newSectionValue) => {\n    const newSections = [...state.sections];\n    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {\n      value: newSectionValue,\n      modified: true\n    });\n    return addPositionPropertiesToSections(newSections, isRTL);\n  };\n  const clearValue = () => {\n    publishValue({\n      value: valueManager.emptyValue,\n      referenceValue: state.referenceValue,\n      sections: getSectionsFromValue(valueManager.emptyValue)\n    });\n  };\n  const clearActiveSection = () => {\n    if (selectedSectionIndexes == null) {\n      return;\n    }\n    const activeSection = state.sections[selectedSectionIndexes.startIndex];\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;\n    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');\n    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));\n    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {\n      publishValue(_extends({}, newValues, {\n        sections: newSections\n      }));\n    } else {\n      setState(prevState => _extends({}, prevState, newValues, {\n        sections: newSections,\n        tempValueStrAndroid: null\n      }));\n    }\n  };\n  const updateValueFromValueStr = valueStr => {\n    const parseDateStr = (dateStr, referenceDate) => {\n      const date = utils.parse(dateStr, format);\n      if (date == null || !utils.isValid(date)) {\n        return null;\n      }\n      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);\n    };\n    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);\n    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);\n    publishValue({\n      value: newValue,\n      referenceValue: newReferenceValue,\n      sections: getSectionsFromValue(newValue, state.sections)\n    });\n  };\n  const updateSectionValue = ({\n    activeSection,\n    newSectionValue,\n    shouldGoToNextSection\n  }) => {\n    /**\n     * 1. Decide which section should be focused\n     */\n    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {\n      setSelectedSections(selectedSectionIndexes.startIndex + 1);\n    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n      setSelectedSections(selectedSectionIndexes.startIndex);\n    }\n\n    /**\n     * 2. Try to build a valid date from the new section value\n     */\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);\n    const newActiveDateSections = activeDateManager.getSections(newSections);\n    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);\n    let values;\n    let shouldPublish;\n\n    /**\n     * If the new date is valid,\n     * Then we merge the value of the modified sections into the reference date.\n     * This makes sure that we don't lose some information of the initial date (like the time on a date field).\n     */\n    if (newActiveDate != null && utils.isValid(newActiveDate)) {\n      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);\n      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);\n      shouldPublish = true;\n    } else {\n      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));\n    }\n\n    /**\n     * Publish or update the internal state with the new value and sections.\n     */\n    if (shouldPublish) {\n      return publishValue(_extends({}, values, {\n        sections: newSections\n      }));\n    }\n    return setState(prevState => _extends({}, prevState, values, {\n      sections: newSections,\n      tempValueStrAndroid: null\n    }));\n  };\n  const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {\n    tempValueStrAndroid\n  }));\n  React.useEffect(() => {\n    const sections = getSectionsFromValue(state.value);\n    validateSections(sections, valueType);\n    setState(prevState => _extends({}, prevState, {\n      sections\n    }));\n  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    let shouldUpdate = false;\n    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {\n      shouldUpdate = true;\n    } else {\n      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);\n    }\n    if (shouldUpdate) {\n      setState(prevState => _extends({}, prevState, {\n        value: valueFromTheOutside,\n        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),\n        sections: getSectionsFromValue(valueFromTheOutside)\n      }));\n    }\n  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  };\n};"]},"metadata":{},"sourceType":"module"}