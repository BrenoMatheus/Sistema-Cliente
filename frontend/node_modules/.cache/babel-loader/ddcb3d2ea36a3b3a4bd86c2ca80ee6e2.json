{"ast":null,"code":"import _slicedToArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"sx\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useViews } from '../useViews';\nimport { isTimeView } from '../../utils/time-utils';\n/**\n * Props used to handle the views that are common to all pickers.\n */\n\n/**\n * Props used to handle the views of the pickers.\n */\n\n/**\n * Props used to handle the value of the pickers.\n */\n\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\n\nexport var usePickerViews = function usePickerViews(_ref) {\n  var props = _ref.props,\n      propsFromPickerValue = _ref.propsFromPickerValue,\n      additionalViewProps = _ref.additionalViewProps,\n      inputRef = _ref.inputRef,\n      autoFocusView = _ref.autoFocusView;\n  var onChange = propsFromPickerValue.onChange,\n      open = propsFromPickerValue.open,\n      onSelectedSectionsChange = propsFromPickerValue.onSelectedSectionsChange,\n      onClose = propsFromPickerValue.onClose;\n  var views = props.views,\n      openTo = props.openTo,\n      onViewChange = props.onViewChange,\n      disableOpenPicker = props.disableOpenPicker,\n      viewRenderers = props.viewRenderers,\n      timezone = props.timezone;\n\n  var propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useViews = useViews({\n    view: undefined,\n    views: views,\n    openTo: openTo,\n    onChange: onChange,\n    onViewChange: onViewChange,\n    autoFocus: autoFocusView\n  }),\n      view = _useViews.view,\n      setView = _useViews.setView,\n      defaultView = _useViews.defaultView,\n      focusedView = _useViews.focusedView,\n      setFocusedView = _useViews.setFocusedView,\n      setValueAndGoToNextView = _useViews.setValueAndGoToNextView;\n\n  var _React$useMemo = React.useMemo(function () {\n    return views.reduce(function (acc, viewForReduce) {\n      var viewMode;\n\n      if (disableOpenPicker) {\n        viewMode = 'field';\n      } else if (viewRenderers[viewForReduce] != null) {\n        viewMode = 'UI';\n      } else {\n        viewMode = 'field';\n      }\n\n      acc.viewModeLookup[viewForReduce] = viewMode;\n\n      if (viewMode === 'UI') {\n        acc.hasUIView = true;\n      }\n\n      return acc;\n    }, {\n      hasUIView: false,\n      viewModeLookup: {}\n    });\n  }, [disableOpenPicker, viewRenderers, views]),\n      hasUIView = _React$useMemo.hasUIView,\n      viewModeLookup = _React$useMemo.viewModeLookup;\n\n  var timeViewsCount = React.useMemo(function () {\n    return views.reduce(function (acc, viewForReduce) {\n      if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {\n        return acc + 1;\n      }\n\n      return acc;\n    }, 0);\n  }, [viewRenderers, views]);\n  var currentViewMode = viewModeLookup[view];\n  var shouldRestoreFocus = useEventCallback(function () {\n    return currentViewMode === 'UI';\n  });\n\n  var _React$useState = React.useState(currentViewMode === 'UI' ? view : null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      popperView = _React$useState2[0],\n      setPopperView = _React$useState2[1];\n\n  if (popperView !== view && viewModeLookup[view] === 'UI') {\n    setPopperView(view);\n  }\n\n  useEnhancedEffect(function () {\n    // Handle case of `DateTimePicker` without time renderers\n    if (currentViewMode === 'field' && open) {\n      onClose();\n      setTimeout(function () {\n        // focusing the input before the range selection is done\n        // calling `onSelectedSectionsChange` outside of timeout results in an inconsistent behavior between Safari And Chrome\n        inputRef == null || inputRef.current.focus();\n        onSelectedSectionsChange(view);\n      });\n    }\n  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEnhancedEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    var newView = view; // If the current view is a field view, go to the last popper view\n\n    if (currentViewMode === 'field' && popperView != null) {\n      newView = popperView;\n    } // If the current view is not the default view and both are UI views\n\n\n    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {\n      newView = defaultView;\n    }\n\n    if (newView !== view) {\n      setView(newView);\n    }\n\n    setFocusedView(newView, true);\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var layoutProps = {\n    views: views,\n    view: popperView,\n    onViewChange: setView\n  };\n  return {\n    hasUIView: hasUIView,\n    shouldRestoreFocus: shouldRestoreFocus,\n    layoutProps: layoutProps,\n    renderCurrentView: function renderCurrentView() {\n      if (popperView == null) {\n        return null;\n      }\n\n      var renderer = viewRenderers[popperView];\n\n      if (renderer == null) {\n        return null;\n      }\n\n      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {\n        views: views,\n        timezone: timezone,\n        onChange: setValueAndGoToNextView,\n        view: popperView,\n        onViewChange: setView,\n        focusedView: focusedView,\n        onFocusedViewChange: setFocusedView,\n        showViewSwitcher: timeViewsCount > 1,\n        timeViewsCount: timeViewsCount\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useViews","isTimeView","usePickerViews","props","propsFromPickerValue","additionalViewProps","inputRef","autoFocusView","onChange","open","onSelectedSectionsChange","onClose","views","openTo","onViewChange","disableOpenPicker","viewRenderers","timezone","propsToForwardToView","view","undefined","autoFocus","setView","defaultView","focusedView","setFocusedView","setValueAndGoToNextView","useMemo","reduce","acc","viewForReduce","viewMode","viewModeLookup","hasUIView","timeViewsCount","currentViewMode","shouldRestoreFocus","useState","popperView","setPopperView","setTimeout","current","focus","newView","layoutProps","renderCurrentView","renderer","onFocusedViewChange","showViewSwitcher"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"sx\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useViews } from '../useViews';\nimport { isTimeView } from '../../utils/time-utils';\n\n/**\n * Props used to handle the views that are common to all pickers.\n */\n\n/**\n * Props used to handle the views of the pickers.\n */\n\n/**\n * Props used to handle the value of the pickers.\n */\n\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\nexport const usePickerViews = ({\n  props,\n  propsFromPickerValue,\n  additionalViewProps,\n  inputRef,\n  autoFocusView\n}) => {\n  const {\n    onChange,\n    open,\n    onSelectedSectionsChange,\n    onClose\n  } = propsFromPickerValue;\n  const {\n    views,\n    openTo,\n    onViewChange,\n    disableOpenPicker,\n    viewRenderers,\n    timezone\n  } = props;\n  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    view,\n    setView,\n    defaultView,\n    focusedView,\n    setFocusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: undefined,\n    views,\n    openTo,\n    onChange,\n    onViewChange,\n    autoFocus: autoFocusView\n  });\n  const {\n    hasUIView,\n    viewModeLookup\n  } = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    let viewMode;\n    if (disableOpenPicker) {\n      viewMode = 'field';\n    } else if (viewRenderers[viewForReduce] != null) {\n      viewMode = 'UI';\n    } else {\n      viewMode = 'field';\n    }\n    acc.viewModeLookup[viewForReduce] = viewMode;\n    if (viewMode === 'UI') {\n      acc.hasUIView = true;\n    }\n    return acc;\n  }, {\n    hasUIView: false,\n    viewModeLookup: {}\n  }), [disableOpenPicker, viewRenderers, views]);\n  const timeViewsCount = React.useMemo(() => views.reduce((acc, viewForReduce) => {\n    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0), [viewRenderers, views]);\n  const currentViewMode = viewModeLookup[view];\n  const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');\n  const [popperView, setPopperView] = React.useState(currentViewMode === 'UI' ? view : null);\n  if (popperView !== view && viewModeLookup[view] === 'UI') {\n    setPopperView(view);\n  }\n  useEnhancedEffect(() => {\n    // Handle case of `DateTimePicker` without time renderers\n    if (currentViewMode === 'field' && open) {\n      onClose();\n      setTimeout(() => {\n        // focusing the input before the range selection is done\n        // calling `onSelectedSectionsChange` outside of timeout results in an inconsistent behavior between Safari And Chrome\n        inputRef == null || inputRef.current.focus();\n        onSelectedSectionsChange(view);\n      });\n    }\n  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEnhancedEffect(() => {\n    if (!open) {\n      return;\n    }\n    let newView = view;\n\n    // If the current view is a field view, go to the last popper view\n    if (currentViewMode === 'field' && popperView != null) {\n      newView = popperView;\n    }\n\n    // If the current view is not the default view and both are UI views\n    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {\n      newView = defaultView;\n    }\n    if (newView !== view) {\n      setView(newView);\n    }\n    setFocusedView(newView, true);\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const layoutProps = {\n    views,\n    view: popperView,\n    onViewChange: setView\n  };\n  return {\n    hasUIView,\n    shouldRestoreFocus,\n    layoutProps,\n    renderCurrentView: () => {\n      if (popperView == null) {\n        return null;\n      }\n      const renderer = viewRenderers[popperView];\n      if (renderer == null) {\n        return null;\n      }\n      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {\n        views,\n        timezone,\n        onChange: setValueAndGoToNextView,\n        view: popperView,\n        onViewChange: setView,\n        focusedView,\n        onFocusedViewChange: setFocusedView,\n        showViewSwitcher: timeViewsCount > 1,\n        timeViewsCount\n      }));\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}