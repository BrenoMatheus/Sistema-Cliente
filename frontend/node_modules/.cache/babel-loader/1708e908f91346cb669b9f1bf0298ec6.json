{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi',\n  meridiem: 'il meridiano'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  datePickerToolbarTitle: 'Seleziona data',\n  dateTimePickerToolbarTitle: 'Seleziona data e orario',\n  timePickerToolbarTitle: 'Seleziona orario',\n  dateRangePickerToolbarTitle: 'Seleziona intervallo di date',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Seleziona ${views[view]}. ${time === null ? 'Nessun orario selezionato' : `L'ora selezionata è ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} ore`,\n  minutesClockNumberText: minutes => `${minutes} minuti`,\n  secondsClockNumberText: seconds => `${seconds} secondi`,\n  // Digital clock labels\n  selectViewText: view => `Seleziona ${views[view]}`,\n  // Calendar labels\n  calendarWeekNumberHeaderLabel: 'Numero settimana',\n  calendarWeekNumberHeaderText: '#',\n  calendarWeekNumberAriaLabelText: weekNumber => `Settimana ${weekNumber}`,\n  calendarWeekNumberText: weekNumber => `${weekNumber}`,\n  // Open picker labels\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Scegli la data, la data selezionata è ${utils.format(value, 'fullDate')}` : 'Scegli la data',\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Scegli l'ora, l'ora selezionata è ${utils.format(value, 'fullTime')}` : \"Scegli l'ora\",\n  // fieldClearLabel: 'Clear value',\n  // Table labels\n  timeTableLabel: \"scegli un'ora\",\n  dateTableLabel: 'scegli una data',\n  // Field section placeholders\n  fieldYearPlaceholder: params => 'A'.repeat(params.digitAmount),\n  fieldMonthPlaceholder: params => params.contentType === 'letter' ? 'MMMM' : 'MM',\n  fieldDayPlaceholder: () => 'GG',\n  // fieldWeekDayPlaceholder: params => params.contentType === 'letter' ? 'EEEE' : 'EE',\n  fieldHoursPlaceholder: () => 'hh',\n  fieldMinutesPlaceholder: () => 'mm',\n  fieldSecondsPlaceholder: () => 'ss',\n  fieldMeridiemPlaceholder: () => 'aa'\n};\nexport const itIT = getPickersLocalization(itITPickers);","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/locales/itIT.js"],"names":["getPickersLocalization","views","hours","minutes","seconds","meridiem","itITPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerToolbarTitle","dateTimePickerToolbarTitle","timePickerToolbarTitle","dateRangePickerToolbarTitle","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","selectViewText","calendarWeekNumberHeaderLabel","calendarWeekNumberHeaderText","calendarWeekNumberAriaLabelText","weekNumber","calendarWeekNumberText","openDatePickerDialogue","value","utils","isValid","openTimePickerDialogue","timeTableLabel","dateTableLabel","fieldYearPlaceholder","params","repeat","digitAmount","fieldMonthPlaceholder","contentType","fieldDayPlaceholder","fieldHoursPlaceholder","fieldMinutesPlaceholder","fieldSecondsPlaceholder","fieldMeridiemPlaceholder","itIT"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,QADK;AAEZC,EAAAA,OAAO,EAAE,UAFG;AAGZC,EAAAA,OAAO,EAAE,WAHG;AAIZC,EAAAA,QAAQ,EAAE;AAJE,CAAd;AAMA,MAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,aAAa,EAAE,iBAFG;AAGlBC,EAAAA,SAAS,EAAE,iBAHO;AAIlB;AACAC,EAAAA,gBAAgB,EAAE,0BALA;AAMlBC,EAAAA,YAAY,EAAE,0BANI;AAOlBC,EAAAA,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAT,GAAkB,gEAAlB,GAAqF,iEAPjH;AAQlB;AACAC,EAAAA,KAAK,EAAE,QATW;AAUlBC,EAAAA,GAAG,EAAE,MAVa;AAWlB;AACAC,EAAAA,iBAAiB,EAAE,YAZD;AAalBC,EAAAA,gBAAgB,EAAE,YAbA;AAclBC,EAAAA,aAAa,EAAE,IAdG;AAelBC,EAAAA,gBAAgB,EAAE,MAfA;AAgBlB;AACAC,EAAAA,sBAAsB,EAAE,gBAjBN;AAkBlBC,EAAAA,0BAA0B,EAAE,yBAlBV;AAmBlBC,EAAAA,sBAAsB,EAAE,kBAnBN;AAoBlBC,EAAAA,2BAA2B,EAAE,8BApBX;AAqBlB;AACAC,EAAAA,cAAc,EAAE,CAACX,IAAD,EAAOY,IAAP,EAAaC,OAAb,KAA0B,aAAYxB,KAAK,CAACW,IAAD,CAAO,KAAIY,IAAI,KAAK,IAAT,GAAgB,2BAAhB,GAA+C,uBAAsBC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAAiC,EAAE,EAtB5J;AAuBlBG,EAAAA,oBAAoB,EAAEzB,KAAK,IAAK,GAAEA,KAAM,MAvBtB;AAwBlB0B,EAAAA,sBAAsB,EAAEzB,OAAO,IAAK,GAAEA,OAAQ,SAxB5B;AAyBlB0B,EAAAA,sBAAsB,EAAEzB,OAAO,IAAK,GAAEA,OAAQ,UAzB5B;AA0BlB;AACA0B,EAAAA,cAAc,EAAElB,IAAI,IAAK,aAAYX,KAAK,CAACW,IAAD,CAAO,EA3B/B;AA4BlB;AACAmB,EAAAA,6BAA6B,EAAE,kBA7Bb;AA8BlBC,EAAAA,4BAA4B,EAAE,GA9BZ;AA+BlBC,EAAAA,+BAA+B,EAAEC,UAAU,IAAK,aAAYA,UAAW,EA/BrD;AAgClBC,EAAAA,sBAAsB,EAAED,UAAU,IAAK,GAAEA,UAAW,EAhClC;AAiClB;AACAE,EAAAA,sBAAsB,EAAE,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,KAAK,IAAV,IAAkBC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAlB,GAA0C,yCAAwCC,KAAK,CAACZ,MAAN,CAAaW,KAAb,EAAoB,UAApB,CAAgC,EAAlH,GAAsH,gBAlC9I;AAmClBG,EAAAA,sBAAsB,EAAE,CAACH,KAAD,EAAQC,KAAR,KAAkBD,KAAK,KAAK,IAAV,IAAkBC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAlB,GAA0C,qCAAoCC,KAAK,CAACZ,MAAN,CAAaW,KAAb,EAAoB,UAApB,CAAgC,EAA9G,GAAkH,cAnC1I;AAoClB;AAEA;AACAI,EAAAA,cAAc,EAAE,eAvCE;AAwClBC,EAAAA,cAAc,EAAE,iBAxCE;AAyClB;AACAC,EAAAA,oBAAoB,EAAEC,MAAM,IAAI,IAAIC,MAAJ,CAAWD,MAAM,CAACE,WAAlB,CA1Cd;AA2ClBC,EAAAA,qBAAqB,EAAEH,MAAM,IAAIA,MAAM,CAACI,WAAP,KAAuB,QAAvB,GAAkC,MAAlC,GAA2C,IA3C1D;AA4ClBC,EAAAA,mBAAmB,EAAE,MAAM,IA5CT;AA6ClB;AACAC,EAAAA,qBAAqB,EAAE,MAAM,IA9CX;AA+ClBC,EAAAA,uBAAuB,EAAE,MAAM,IA/Cb;AAgDlBC,EAAAA,uBAAuB,EAAE,MAAM,IAhDb;AAiDlBC,EAAAA,wBAAwB,EAAE,MAAM;AAjDd,CAApB;AAmDA,OAAO,MAAMC,IAAI,GAAGtD,sBAAsB,CAACM,WAAD,CAAnC","sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi',\n  meridiem: 'il meridiano'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  datePickerToolbarTitle: 'Seleziona data',\n  dateTimePickerToolbarTitle: 'Seleziona data e orario',\n  timePickerToolbarTitle: 'Seleziona orario',\n  dateRangePickerToolbarTitle: 'Seleziona intervallo di date',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Seleziona ${views[view]}. ${time === null ? 'Nessun orario selezionato' : `L'ora selezionata è ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} ore`,\n  minutesClockNumberText: minutes => `${minutes} minuti`,\n  secondsClockNumberText: seconds => `${seconds} secondi`,\n  // Digital clock labels\n  selectViewText: view => `Seleziona ${views[view]}`,\n  // Calendar labels\n  calendarWeekNumberHeaderLabel: 'Numero settimana',\n  calendarWeekNumberHeaderText: '#',\n  calendarWeekNumberAriaLabelText: weekNumber => `Settimana ${weekNumber}`,\n  calendarWeekNumberText: weekNumber => `${weekNumber}`,\n  // Open picker labels\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Scegli la data, la data selezionata è ${utils.format(value, 'fullDate')}` : 'Scegli la data',\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Scegli l'ora, l'ora selezionata è ${utils.format(value, 'fullTime')}` : \"Scegli l'ora\",\n  // fieldClearLabel: 'Clear value',\n\n  // Table labels\n  timeTableLabel: \"scegli un'ora\",\n  dateTableLabel: 'scegli una data',\n  // Field section placeholders\n  fieldYearPlaceholder: params => 'A'.repeat(params.digitAmount),\n  fieldMonthPlaceholder: params => params.contentType === 'letter' ? 'MMMM' : 'MM',\n  fieldDayPlaceholder: () => 'GG',\n  // fieldWeekDayPlaceholder: params => params.contentType === 'letter' ? 'EEEE' : 'EE',\n  fieldHoursPlaceholder: () => 'hh',\n  fieldMinutesPlaceholder: () => 'mm',\n  fieldSecondsPlaceholder: () => 'ss',\n  fieldMeridiemPlaceholder: () => 'aa'\n};\nexport const itIT = getPickersLocalization(itITPickers);"]},"metadata":{},"sourceType":"module"}