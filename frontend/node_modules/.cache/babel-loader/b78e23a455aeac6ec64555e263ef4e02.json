{"ast":null,"code":"import _slicedToArray from \"/home/brenomatheus/Documentos/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nvar warnedOnceNotValidView = false;\nexport function useViews(_ref) {\n  var onChange = _ref.onChange,\n      onViewChange = _ref.onViewChange,\n      openTo = _ref.openTo,\n      inView = _ref.view,\n      views = _ref.views,\n      autoFocus = _ref.autoFocus,\n      inFocusedView = _ref.focusedView,\n      onFocusedViewChange = _ref.onFocusedViewChange;\n\n  var _views, _views2;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(\"MUI: `view=\\\"\".concat(inView, \"\\\"` is not a valid prop.\"), \"It must be an element of `views=[\\\"\".concat(views.join('\", \"'), \"\\\"]`.\"));\n        warnedOnceNotValidView = true;\n      }\n\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(\"MUI: `openTo=\\\"\".concat(openTo, \"\\\"` is not a valid prop.\"), \"It must be an element of `views=[\\\"\".concat(views.join('\", \"'), \"\\\"]`.\"));\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n\n  var previousOpenTo = React.useRef(openTo);\n  var previousViews = React.useRef(views);\n  var defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n\n  var _useControlled = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      view = _useControlled2[0],\n      setView = _useControlled2[1];\n\n  var defaultFocusedView = React.useRef(autoFocus ? view : null);\n\n  var _useControlled3 = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  }),\n      _useControlled4 = _slicedToArray(_useControlled3, 2),\n      focusedView = _useControlled4[0],\n      setFocusedView = _useControlled4[1];\n\n  React.useEffect(function () {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(function (previousView) {\n      return !views.includes(previousView);\n    })) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  var viewIndex = views.indexOf(view);\n  var previousView = (_views = views[viewIndex - 1]) != null ? _views : null;\n  var nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;\n  var handleFocusedViewChange = useEventCallback(function (viewToFocus, hasFocus) {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(function (prevFocusedView) {\n        return viewToFocus === prevFocusedView ? null : prevFocusedView;\n      } // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  var handleChangeView = useEventCallback(function (newView) {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n\n    if (newView === view) {\n      return;\n    }\n\n    setView(newView);\n\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  var goToNextView = useEventCallback(function () {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  var setValueAndGoToNextView = useEventCallback(function (value, currentViewSelectionState, selectedView) {\n    var isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    var hasMoreViews = selectedView ? // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but we it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    var globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView); // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n\n    if (selectedView && selectedView !== view) {\n      var nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view: view,\n    setView: handleChangeView,\n    focusedView: focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView: nextView,\n    previousView: previousView,\n    // Always return up to date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView: goToNextView,\n    setValueAndGoToNextView: setValueAndGoToNextView\n  };\n}","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useViews.js"],"names":["React","useEventCallback","unstable_useControlled","useControlled","warnedOnceNotValidView","useViews","onChange","onViewChange","openTo","inView","view","views","autoFocus","inFocusedView","focusedView","onFocusedViewChange","_views","_views2","process","env","NODE_ENV","includes","console","warn","join","previousOpenTo","useRef","previousViews","defaultView","name","state","controlled","default","current","setView","defaultFocusedView","setFocusedView","useEffect","some","previousView","viewIndex","indexOf","nextView","handleFocusedViewChange","viewToFocus","hasFocus","prevFocusedView","handleChangeView","newView","goToNextView","setValueAndGoToNextView","value","currentViewSelectionState","selectedView","isSelectionFinishedOnCurrentView","hasMoreViews","length","Boolean","globalSelectionState","nextViewAfterSelected"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,SAASC,sBAAsB,IAAIC,aAAnC,QAAwD,YAAxD;AACA,IAAIC,sBAAsB,GAAG,KAA7B;AACA,OAAO,SAASC,QAAT,OASJ;AAAA,MARDC,QAQC,QARDA,QAQC;AAAA,MAPDC,YAOC,QAPDA,YAOC;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALKC,MAKL,QALDC,IAKC;AAAA,MAJDC,KAIC,QAJDA,KAIC;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAFYC,aAEZ,QAFDC,WAEC;AAAA,MADDC,mBACC,QADDA,mBACC;;AACD,MAAIC,MAAJ,EAAYC,OAAZ;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,CAAChB,sBAAL,EAA6B;AAC3B,UAAIK,MAAM,IAAI,IAAV,IAAkB,CAACE,KAAK,CAACU,QAAN,CAAeZ,MAAf,CAAvB,EAA+C;AAC7Ca,QAAAA,OAAO,CAACC,IAAR,wBAA6Bd,MAA7B,4EAAqGE,KAAK,CAACa,IAAN,CAAW,MAAX,CAArG;AACApB,QAAAA,sBAAsB,GAAG,IAAzB;AACD;;AACD,UAAIK,MAAM,IAAI,IAAV,IAAkBD,MAAM,IAAI,IAA5B,IAAoC,CAACG,KAAK,CAACU,QAAN,CAAeb,MAAf,CAAzC,EAAiE;AAC/Dc,QAAAA,OAAO,CAACC,IAAR,0BAA+Bf,MAA/B,4EAAuGG,KAAK,CAACa,IAAN,CAAW,MAAX,CAAvG;AACApB,QAAAA,sBAAsB,GAAG,IAAzB;AACD;AACF;AACF;;AACD,MAAMqB,cAAc,GAAGzB,KAAK,CAAC0B,MAAN,CAAalB,MAAb,CAAvB;AACA,MAAMmB,aAAa,GAAG3B,KAAK,CAAC0B,MAAN,CAAaf,KAAb,CAAtB;AACA,MAAMiB,WAAW,GAAG5B,KAAK,CAAC0B,MAAN,CAAaf,KAAK,CAACU,QAAN,CAAeb,MAAf,IAAyBA,MAAzB,GAAkCG,KAAK,CAAC,CAAD,CAApD,CAApB;;AACA,uBAAwBR,aAAa,CAAC;AACpC0B,IAAAA,IAAI,EAAE,UAD8B;AAEpCC,IAAAA,KAAK,EAAE,MAF6B;AAGpCC,IAAAA,UAAU,EAAEtB,MAHwB;AAIpCuB,IAAAA,OAAO,EAAEJ,WAAW,CAACK;AAJe,GAAD,CAArC;AAAA;AAAA,MAAOvB,IAAP;AAAA,MAAawB,OAAb;;AAMA,MAAMC,kBAAkB,GAAGnC,KAAK,CAAC0B,MAAN,CAAad,SAAS,GAAGF,IAAH,GAAU,IAAhC,CAA3B;;AACA,wBAAsCP,aAAa,CAAC;AAClD0B,IAAAA,IAAI,EAAE,UAD4C;AAElDC,IAAAA,KAAK,EAAE,aAF2C;AAGlDC,IAAAA,UAAU,EAAElB,aAHsC;AAIlDmB,IAAAA,OAAO,EAAEG,kBAAkB,CAACF;AAJsB,GAAD,CAAnD;AAAA;AAAA,MAAOnB,WAAP;AAAA,MAAoBsB,cAApB;;AAMApC,EAAAA,KAAK,CAACqC,SAAN,CAAgB,YAAM;AACpB;AACA,QAAIZ,cAAc,CAACQ,OAAf,IAA0BR,cAAc,CAACQ,OAAf,KAA2BzB,MAArD,IAA+DmB,aAAa,CAACM,OAAd,IAAyBN,aAAa,CAACM,OAAd,CAAsBK,IAAtB,CAA2B,UAAAC,YAAY;AAAA,aAAI,CAAC5B,KAAK,CAACU,QAAN,CAAekB,YAAf,CAAL;AAAA,KAAvC,CAA5F,EAAuK;AACrKL,MAAAA,OAAO,CAACvB,KAAK,CAACU,QAAN,CAAeb,MAAf,IAAyBA,MAAzB,GAAkCG,KAAK,CAAC,CAAD,CAAxC,CAAP;AACAgB,MAAAA,aAAa,CAACM,OAAd,GAAwBtB,KAAxB;AACAc,MAAAA,cAAc,CAACQ,OAAf,GAAyBzB,MAAzB;AACD;AACF,GAPD,EAOG,CAACA,MAAD,EAAS0B,OAAT,EAAkBxB,IAAlB,EAAwBC,KAAxB,CAPH;AAQA,MAAM6B,SAAS,GAAG7B,KAAK,CAAC8B,OAAN,CAAc/B,IAAd,CAAlB;AACA,MAAM6B,YAAY,GAAG,CAACvB,MAAM,GAAGL,KAAK,CAAC6B,SAAS,GAAG,CAAb,CAAf,KAAmC,IAAnC,GAA0CxB,MAA1C,GAAmD,IAAxE;AACA,MAAM0B,QAAQ,GAAG,CAACzB,OAAO,GAAGN,KAAK,CAAC6B,SAAS,GAAG,CAAb,CAAhB,KAAoC,IAApC,GAA2CvB,OAA3C,GAAqD,IAAtE;AACA,MAAM0B,uBAAuB,GAAG1C,gBAAgB,CAAC,UAAC2C,WAAD,EAAcC,QAAd,EAA2B;AAC1E,QAAIA,QAAJ,EAAc;AACZ;AACAT,MAAAA,cAAc,CAACQ,WAAD,CAAd;AACD,KAHD,MAGO;AACL;AACAR,MAAAA,cAAc,CAAC,UAAAU,eAAe;AAAA,eAAIF,WAAW,KAAKE,eAAhB,GAAkC,IAAlC,GAAyCA,eAA7C;AAAA,OAAhB,CAA6E;AAA7E,OAAd;AAED;;AAED/B,IAAAA,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,CAAC6B,WAAD,EAAcC,QAAd,CAAlD;AACD,GAX+C,CAAhD;AAYA,MAAME,gBAAgB,GAAG9C,gBAAgB,CAAC,UAAA+C,OAAO,EAAI;AACnD;AACAL,IAAAA,uBAAuB,CAACK,OAAD,EAAU,IAAV,CAAvB;;AACA,QAAIA,OAAO,KAAKtC,IAAhB,EAAsB;AACpB;AACD;;AACDwB,IAAAA,OAAO,CAACc,OAAD,CAAP;;AACA,QAAIzC,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACyC,OAAD,CAAZ;AACD;AACF,GAVwC,CAAzC;AAWA,MAAMC,YAAY,GAAGhD,gBAAgB,CAAC,YAAM;AAC1C,QAAIyC,QAAJ,EAAc;AACZK,MAAAA,gBAAgB,CAACL,QAAD,CAAhB;AACD;AACF,GAJoC,CAArC;AAKA,MAAMQ,uBAAuB,GAAGjD,gBAAgB,CAAC,UAACkD,KAAD,EAAQC,yBAAR,EAAmCC,YAAnC,EAAoD;AACnG,QAAMC,gCAAgC,GAAGF,yBAAyB,KAAK,QAAvE;AACA,QAAMG,YAAY,GAAGF,YAAY,GACjC;AACA;AACA1C,IAAAA,KAAK,CAAC8B,OAAN,CAAcY,YAAd,IAA8B1C,KAAK,CAAC6C,MAAN,GAAe,CAHZ,GAGgBC,OAAO,CAACf,QAAD,CAHxD;AAIA,QAAMgB,oBAAoB,GAAGJ,gCAAgC,IAAIC,YAApC,GAAmD,SAAnD,GAA+DH,yBAA5F;AACA9C,IAAAA,QAAQ,CAAC6C,KAAD,EAAQO,oBAAR,EAA8BL,YAA9B,CAAR,CAPmG,CAQnG;AACA;;AACA,QAAIA,YAAY,IAAIA,YAAY,KAAK3C,IAArC,EAA2C;AACzC,UAAMiD,qBAAqB,GAAGhD,KAAK,CAACA,KAAK,CAAC8B,OAAN,CAAcY,YAAd,IAA8B,CAA/B,CAAnC;;AACA,UAAIM,qBAAJ,EAA2B;AACzB;AACAZ,QAAAA,gBAAgB,CAACY,qBAAD,CAAhB;AACD;AACF,KAND,MAMO,IAAIL,gCAAJ,EAAsC;AAC3CL,MAAAA,YAAY;AACb;AACF,GAnB+C,CAAhD;AAoBA,SAAO;AACLvC,IAAAA,IAAI,EAAJA,IADK;AAELwB,IAAAA,OAAO,EAAEa,gBAFJ;AAGLjC,IAAAA,WAAW,EAAXA,WAHK;AAILsB,IAAAA,cAAc,EAAEO,uBAJX;AAKLD,IAAAA,QAAQ,EAARA,QALK;AAMLH,IAAAA,YAAY,EAAZA,YANK;AAOL;AACAX,IAAAA,WAAW,EAAEjB,KAAK,CAACU,QAAN,CAAeb,MAAf,IAAyBA,MAAzB,GAAkCG,KAAK,CAAC,CAAD,CAR/C;AASLsC,IAAAA,YAAY,EAAZA,YATK;AAULC,IAAAA,uBAAuB,EAAvBA;AAVK,GAAP;AAYD","sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews({\n  onChange,\n  onViewChange,\n  openTo,\n  view: inView,\n  views,\n  autoFocus,\n  focusedView: inFocusedView,\n  onFocusedViewChange\n}) {\n  var _views, _views2;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n    if (newView === view) {\n      return;\n    }\n    setView(newView);\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ?\n    // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but we it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView);\n    // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up to date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}"]},"metadata":{},"sourceType":"module"}