{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews(_ref) {\n  let {\n    onChange,\n    onViewChange,\n    openTo,\n    view: inView,\n    views,\n    autoFocus,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  } = _ref;\n\n  var _views, _views2;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n\n    if (newView === view) {\n      return;\n    }\n\n    setView(newView);\n\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ? // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but we it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView); // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up to date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}","map":{"version":3,"sources":["/home/brenomatheus/Documentos/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useViews.js"],"names":["React","useEventCallback","unstable_useControlled","useControlled","warnedOnceNotValidView","useViews","onChange","onViewChange","openTo","view","inView","views","autoFocus","focusedView","inFocusedView","onFocusedViewChange","_views","_views2","process","env","NODE_ENV","includes","console","warn","join","previousOpenTo","useRef","previousViews","defaultView","setView","name","state","controlled","default","current","defaultFocusedView","setFocusedView","useEffect","some","previousView","viewIndex","indexOf","nextView","handleFocusedViewChange","viewToFocus","hasFocus","prevFocusedView","handleChangeView","newView","goToNextView","setValueAndGoToNextView","value","currentViewSelectionState","selectedView","isSelectionFinishedOnCurrentView","hasMoreViews","length","Boolean","globalSelectionState","nextViewAfterSelected"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews({\n  onChange,\n  onViewChange,\n  openTo,\n  view: inView,\n  views,\n  autoFocus,\n  focusedView: inFocusedView,\n  onFocusedViewChange\n}) {\n  var _views, _views2;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n    if (newView === view) {\n      return;\n    }\n    setView(newView);\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ?\n    // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but we it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView);\n    // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up to date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}"]},"metadata":{},"sourceType":"module"}